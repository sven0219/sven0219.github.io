[{"title":"世界，您好！","url":"/2019/01/02/hello-world-1/","content":"<p>因为阿里云服务器优惠活动购买了一台机器， 发现没什么用途，于是就想将以前的迁移到阿里云上。 之前的博客是使用 GitPage 完成的，无法直接迁移到阿里云ECS，于是查了一些文章，决定使用 WordPress 也就是现在正在使用的博客进行新的记录，整个搭建的过程还是比较简单便捷的，目前也只是简单搭建完成，域名也还在备案中，后续再进行细节的优化。 说实话，之前的博客也是属于年更的状态，希望现在这个 blog 能坚持的久一点，毕竟机器是花了钱的，哈哈 这个博客不再是像上个一样只记录技术文档了，可能会多一点生活的记录。<span id=\"more\"></span></p>\n","categories":["Essay","skills","life"]},{"title":"Centos安装Docker CE","url":"/2019/10/02/centos%E5%AE%89%E8%A3%85docker-ce/","content":"<h1 id=\"Centos安装Docker-CE\"><a href=\"#Centos安装Docker-CE\" class=\"headerlink\" title=\"Centos安装Docker CE\"></a>Centos安装Docker CE</h1><p>Docker分为CE和EE两大版本.CE免费,支持周期7个月,EE付费,支持周期24个月.</p>\n<h2 id=\"系统要求\"><a href=\"#系统要求\" class=\"headerlink\" title=\"系统要求\"></a>系统要求</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Docker CE支持64位版本CentOS7,并且要求内核版本不低于3.10。</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n\n<p>根据官方文档：<a href=\"https://docs.docker.com/install/linux/docker-ce/centos/%E6%90%AD%E5%BB%BAdocker\">https://docs.docker.com/install/linux/docker-ce/centos/搭建docker</a></p>\n<h5 id=\"1-卸载docker旧版本：\"><a href=\"#1-卸载docker旧版本：\" class=\"headerlink\" title=\"1.卸载docker旧版本：\"></a>1.卸载docker旧版本：</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo yum remove docker \\</span><br><span class=\"line\">                  docker-client \\</span><br><span class=\"line\">                  docker-client-latest \\</span><br><span class=\"line\">                  docker-common \\</span><br><span class=\"line\">                  docker-latest \\</span><br><span class=\"line\">                  docker-latest-logrotate \\</span><br><span class=\"line\">                  docker-logrotate \\</span><br><span class=\"line\">                  docker-selinux \\</span><br><span class=\"line\">                  docker-engine-selinux \\</span><br><span class=\"line\">                  docker-engine</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-安装相关工具类：\"><a href=\"#2-安装相关工具类：\" class=\"headerlink\" title=\"2.安装相关工具类：\"></a>2.安装相关工具类：</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo yum install -y yum-utils  device-mapper-persistent-data  lvm2</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-配置docker仓库：\"><a href=\"#3-配置docker仓库：\" class=\"headerlink\" title=\"3.配置docker仓库：\"></a>3.配置docker仓库：</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>\n\n<p>出现以下内容则表示docker仓库配置成功：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Loaded plugins: fastestmirror</span><br><span class=\"line\">adding repo from: http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class=\"line\">grabbing file http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo to /etc/yum.repos.d/docker-ce.repo</span><br><span class=\"line\">repo saved to /etc/yum.repos.d/docker-ce.repo</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-安装docker\"><a href=\"#4-安装docker\" class=\"headerlink\" title=\"4.安装docker\"></a>4.安装docker</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo yum install docker-ce</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Installed:</span><br><span class=\"line\">  docker-ce.x86_64 0:18.03.0.ce-1.el7.centos</span><br><span class=\"line\"></span><br><span class=\"line\">Dependency Installed:</span><br><span class=\"line\">  audit-libs-python.x86_64 0:2.7.6-3.el7 checkpolicy.x86_64 0:2.5-4.el7   container-selinux.noarch 2:2.42-1.gitad8f0f7.el7 libcgroup.x86_64 0</span><br><span class=\"line\">  libtool-ltdl.x86_64 0:2.4.2-22.el7_3   pigz.x86_64 0:2.3.3-1.el7.centos policycoreutils-python.x86_64 0:2.5-17.1.el7     python-IPy.noarch</span><br><span class=\"line\"></span><br><span class=\"line\">Complete!</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"5-验证docker安装成功：\"><a href=\"#5-验证docker安装成功：\" class=\"headerlink\" title=\"5.验证docker安装成功：\"></a>5.验证docker安装成功：</h5><p>启动docker：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo systemctl <span class=\"built_in\">enable</span> docker</span><br><span class=\"line\">sudo systemctl start docker </span><br></pre></td></tr></table></figure>\n\n<p>验证docker:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker run hello-world</span><br></pre></td></tr></table></figure>\n\n<p>出现以下内容则表示安装成功：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Unable to find image &#x27;hello-world:latest&#x27; locally</span><br><span class=\"line\">latest: Pulling from library/hello-world</span><br><span class=\"line\">9bb5a5d4561a: Pull complete</span><br><span class=\"line\">Digest: sha256:f5233545e43561214ca4891fd1157e1c3c563316ed8e237750d59bde73361e77</span><br><span class=\"line\">Status: Downloaded newer image for hello-world:latest</span><br><span class=\"line\"></span><br><span class=\"line\">Hello from Docker!</span><br><span class=\"line\">This message shows that your installation appears to be working correctly.</span><br><span class=\"line\"></span><br><span class=\"line\">To generate this message, Docker took the following steps:</span><br><span class=\"line\"> 1. The Docker client contacted the Docker daemon.</span><br><span class=\"line\"> 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.</span><br><span class=\"line\">    (amd64)</span><br><span class=\"line\"> 3. The Docker daemon created a new container from that image which runs the</span><br><span class=\"line\">    executable that produces the output you are currently reading.</span><br><span class=\"line\"> 4. The Docker daemon streamed that output to the Docker client, which sent it</span><br><span class=\"line\">    to your terminal.</span><br><span class=\"line\"></span><br><span class=\"line\">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class=\"line\"> $ docker run -it ubuntu bash</span><br><span class=\"line\"></span><br><span class=\"line\">Share images, automate workflows, and more with a free Docker ID:</span><br><span class=\"line\"> https://hub.docker.com/</span><br><span class=\"line\"></span><br><span class=\"line\">For more examples and ideas, visit:</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"6-建立docker用户组\"><a href=\"#6-建立docker用户组\" class=\"headerlink\" title=\"6. 建立docker用户组\"></a>6. 建立docker用户组</h5><p>默认情况下, docker 命令会使用 Unix socket 与 Docker 引擎通讯。而只有 root 用户和 docker 组的用户才可以访问 Docker 引擎的 Unix socket。出于安全考虑,一般 Linux 系统 上不会直接使用 root 用户。因此,更好地做法是将需要使用 docker 的用户加入 docker<br>用户组。 建立docker组:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo groupadd docker</span><br></pre></td></tr></table></figure>\n\n<p>将当前用户加入docker组:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo usermod -aG docker $USER</span><br></pre></td></tr></table></figure>","categories":["skills"],"tags":["centos","运维"]},{"title":"运维提升之容器化——Docker（01）","url":"/2019/10/14/%E8%BF%90%E7%BB%B4%E6%8F%90%E5%8D%87%E4%B9%8B%E5%AE%B9%E5%99%A8%E5%8C%96-docker%EF%BC%8801%EF%BC%89/","content":"<h1 id=\"为什么写这个\"><a href=\"#为什么写这个\" class=\"headerlink\" title=\"为什么写这个\"></a>为什么写这个</h1><p>从 18 年刚实习时就听说过 Docker 这个单词，当时只知道这个是个容器化技术，并没有深入了解。 有过一段时间的工作发现 Docker 这个技术对于运维来说是个趋势，于是就诞生了开始写这类的博客的想法，以记博客的形式促进自己学习。 没有一个固定周期记博客，工作闲暇时间作记录。 废话不多说，开始正题。</p>\n<span id=\"more\"></span>\n<h1 id=\"什么是-Docker\"><a href=\"#什么是-Docker\" class=\"headerlink\" title=\"什么是 Docker\"></a>什么是 Docker</h1><p>百度百科上是这样介绍的：</p>\n<blockquote>\n<p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。</p>\n</blockquote>\n<p>要想了解 Docker，首先我们得知道什么是<strong>容器技术</strong>？ 容器技术是和我们的宿主机共享硬件资源及操作系统，可以实现资源的动态分配。容器包含应用和其所有的依赖包，但是与其他容器共享内核。容器在宿主机操作系统中，在用户空间以分离的进程运行。 不同于我们虚拟机的是虚拟机需要模拟整台机器包括硬件，而 Docker 是共享宿主机的资源。</p>\n<h1 id=\"Docker-可以用来做什么\"><a href=\"#Docker-可以用来做什么\" class=\"headerlink\" title=\"Docker 可以用来做什么\"></a>Docker 可以用来做什么</h1><ol>\n<li><p>提供一次性的环境。比如，本地测试他人的软件、持续集成的时候提供单元测试和构建的环境。</p>\n</li>\n<li><p>提供弹性的云服务。因为 Docker 容器可以随开随关，很适合动态扩容和缩容。</p>\n</li>\n<li><p>组建微服务架构。通过多个容器，一台机器可以跑多个服务，因此在本机就可以模拟出微服务架构。</p>\n</li>\n</ol>\n<h1 id=\"哪些人需要学习-Docker\"><a href=\"#哪些人需要学习-Docker\" class=\"headerlink\" title=\"哪些人需要学习 Docker\"></a>哪些人需要学习 Docker</h1><p>就个人看法来说，运维工程师、软件开发工程师、测试工程师等岗位都需要学习 docker 这项技术。</p>\n","categories":["skills"],"tags":["运维","Docker","教程"]},{"title":"运维提升之容器化——Docker（02）","url":"/2019/11/12/%E8%BF%90%E7%BB%B4%E6%8F%90%E5%8D%87%E4%B9%8B%E5%AE%B9%E5%99%A8%E5%8C%96-docker%EF%BC%8802%EF%BC%89/","content":"<h1 id=\"Docker-安装\"><a href=\"#Docker-安装\" class=\"headerlink\" title=\"Docker 安装\"></a>Docker 安装</h1><p>直接前往<a href=\"https://docs.docker.com/install/\" title=\"官方文档\">官方文档</a>选择合适的平台安装即可，比如我们这里想要在centos系统上安装 Docker，这前往<a href=\"https://docs.docker.com/install/linux/docker-ce/centos/\" title=\"地址\">地址</a>根据提示安装即可。 安装依赖包</p>\n<span id=\"more\"></span>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure>\n\n<p>添加软件仓库，我们这里使用稳定版 Docker，执行下面命令添加 yum 仓库地址：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo yum-config-manager \\</span><br><span class=\"line\">    --add-repo \\</span><br><span class=\"line\">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>\n\n<p>然后直接安装即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo yum install docker-ce</span><br></pre></td></tr></table></figure>\n\n<p>启动 Docker ：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#设置开机自启</span></span><br><span class=\"line\">$ sudo systemctl <span class=\"built_in\">enable</span> docker</span><br><span class=\"line\"><span class=\"comment\">#启动 Docker</span></span><br><span class=\"line\">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure>\n\n<p>测试是否成功: 验证docker:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker run hello-world</span><br></pre></td></tr></table></figure>\n\n<p>出现以下内容则表示安装成功：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Unable to find image &#x27;hello-world:latest&#x27; locally</span><br><span class=\"line\">latest: Pulling from library/hello-world</span><br><span class=\"line\">9bb5a5d4561a: Pull complete</span><br><span class=\"line\">Digest: sha256:f5233545e43561214ca4891fd1157e1c3c563316ed8e237750d59bde73361e77</span><br><span class=\"line\">Status: Downloaded newer image for hello-world:latest</span><br><span class=\"line\"></span><br><span class=\"line\">Hello from Docker!</span><br><span class=\"line\">This message shows that your installation appears to be working correctly.</span><br><span class=\"line\"></span><br><span class=\"line\">To generate this message, Docker took the following steps:</span><br><span class=\"line\"> 1. The Docker client contacted the Docker daemon.</span><br><span class=\"line\"> 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.</span><br><span class=\"line\">    (amd64)</span><br><span class=\"line\"> 3. The Docker daemon created a new container from that image which runs the</span><br><span class=\"line\">    executable that produces the output you are currently reading.</span><br><span class=\"line\"> 4. The Docker daemon streamed that output to the Docker client, which sent it</span><br><span class=\"line\">    to your terminal.</span><br><span class=\"line\"></span><br><span class=\"line\">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class=\"line\"> $ docker run -it ubuntu bash</span><br><span class=\"line\"></span><br><span class=\"line\">Share images, automate workflows, and more with a free Docker ID:</span><br><span class=\"line\"> https://hub.docker.com/</span><br><span class=\"line\"></span><br><span class=\"line\">For more examples and ideas, visit:</span><br></pre></td></tr></table></figure>","categories":["skills"],"tags":["运维","Docker","教程"]},{"title":"运维提升之容器化——Docker（03）","url":"/2019/12/05/%E8%BF%90%E7%BB%B4%E6%8F%90%E5%8D%87%E4%B9%8B%E5%AE%B9%E5%99%A8%E5%8C%96-docker%EF%BC%8803%EF%BC%89/","content":"<h1 id=\"镜像和容器的基本操作\"><a href=\"#镜像和容器的基本操作\" class=\"headerlink\" title=\"镜像和容器的基本操作\"></a>镜像和容器的基本操作</h1><h2 id=\"获取镜像\"><a href=\"#获取镜像\" class=\"headerlink\" title=\"获取镜像\"></a>获取镜像</h2><p>Docker 官方提供了一个公共的镜像仓库：<a href=\"https://hub.docker.com/explore/\" title=\"Docker Hub\">Docker Hub</a>，我们就可以从这上面获取镜像，获取镜像的命令：docker pull，格式为：</p>\n<span id=\"more\"></span>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker pull [选项] [Docker Registry 地址[:端口]/]仓库名[:标签]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Docker 镜像仓库地址：地址的格式一般是 &lt;域名&#x2F;IP&gt;[:端口号]，默认地址是 Docker Hub。</li>\n<li>仓库名：这里的仓库名是两段式名称，即 &lt;用户名&gt;&#x2F;&lt;软件名&gt;。对于 Docker Hub，如果不给出用户名，则默认为 library，也就是官方镜像。比如：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker pull mysql:5.7  </span><br><span class=\"line\">5.7: Pulling from library/mysql</span><br><span class=\"line\">68ced04f60ab: Pull complete </span><br><span class=\"line\">f9748e016a5c: Pull complete </span><br><span class=\"line\">da54b038fed1: Pull complete </span><br><span class=\"line\">6895ec5eb2c0: Pull complete </span><br><span class=\"line\">111ba0647b87: Pull complete </span><br><span class=\"line\">c1dce60f2f1a: Pull complete </span><br><span class=\"line\">702ec598d0af: Pull complete </span><br><span class=\"line\">63cca87a5d4d: Pull complete </span><br><span class=\"line\">ec05b7b1c5c7: Pull complete </span><br><span class=\"line\">834b1d9f49b0: Pull complete </span><br><span class=\"line\">8ded6a30c87c: Pull complete </span><br><span class=\"line\">Digest: sha256:f4a5f5be3d94b4f4d3aef00fbc276ce7c08e62f2e1f28867d930deb73a314c58</span><br><span class=\"line\">Status: Downloaded newer image for mysql:5.7</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>上面的命令中没有给出 Docker 镜像仓库地址，因此将会从 Docker Hub 获取镜像。而镜像名称是 mysql:5.7 ，因此将会获取官方镜像 library&#x2F;mysql 仓库中标签为 5.7 的镜像。 从下载过程中可以看到镜像是由多层存储所构成。下载也是一层层的去下载，并非单一文件。下载过程中给出了每一层的 ID 的前 12 位。并且下载结束后，给出该镜像完整的sha256的摘要，以确保下载一致性。 在国内官方仓库可能速度没有这么快，可以使用<a href=\"https://help.aliyun.com/document_detail/60750.html?spm=a2c4g.11186623.6.551.24ae42c7Wu47Yz\" title=\"阿里云镜像加速\">阿里云镜像加速</a></p>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><p>有了镜像后，我们就能够以这个镜像为基础启动并运行一个容器。以上面的 mysql:5.7 为例，如果我们打算启动里面的 bash 并且进行交互式操作的话，可以执行下面的命令。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it --rm mysql:5.7 /bin/bash</span><br><span class=\"line\"># 进入容器执行命令</span><br><span class=\"line\">root@9075ee7db42e:/#  mysql -V</span><br><span class=\"line\">mysql  Ver 14.14 Distrib 5.7.29, for Linux (x86_64) using  EditLine wrapper</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>docker run</code>就是运行容器的命令</li>\n<li><code>-it</code>：这是两个参数，一个是 -i：交互式操作，一个是 -t 终端。我们这里打算进入 bash 执行一些命令并查看返回结果，因此我们需要交互式终端。</li>\n<li><code>--rm</code>：这个参数是说容器退出后随之将其删除。默认情况下，为了排障需求，退出的容器并不会立即删除，除非手动 docker rm。</li>\n<li><code>mysql:5.7</code>：这是指用 <code>mysql:5.7</code> 镜像为基础来启动容器。</li>\n<li><code>bash</code>：放在镜像名后的是命令，这里我们希望有个交互式 <code>Shell</code>，因此用的是 <code>bash</code>。 进入容器后，我们可以在 <code>Shell</code> 下操作，执行任何所需的命令。这里，我们执行了<code>mysql -V</code>，这是查看<code>mysql</code> 版本的命令，从返回的结果可以看到容器内是 <code>mysql</code> 版本 <code>Ver 14.14 Distrib 5.7.29</code>。</li>\n</ul>\n<h2 id=\"其它命令\"><a href=\"#其它命令\" class=\"headerlink\" title=\"其它命令\"></a>其它命令</h2><h4 id=\"列出镜像\"><a href=\"#列出镜像\" class=\"headerlink\" title=\"列出镜像\"></a>列出镜像</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker images</span><br><span class=\"line\"></span><br><span class=\"line\">REPOSITORY                                                    TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">mysql                                                         5.7                 84164b03fa2e        8 hours ago         456MB</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"镜像大小\"><a href=\"#镜像大小\" class=\"headerlink\" title=\"镜像大小\"></a>镜像大小</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker system df</span><br><span class=\"line\"></span><br><span class=\"line\">TYPE                TOTAL               ACTIVE              SIZE                RECLAIMABLE</span><br><span class=\"line\">Images              17                  7                   4.612GB             3.702GB (80%)</span><br><span class=\"line\">Containers          10                  0                   2.155GB             2.155GB (100%)</span><br><span class=\"line\">Local Volumes       1                   1                   206.9MB             0B (0%)</span><br><span class=\"line\">Build Cache         0                   0                   0B                  0B</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"后台运行容器\"><a href=\"#后台运行容器\" class=\"headerlink\" title=\"后台运行容器\"></a>后台运行容器</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d  --name mysql mysql:5.7 /bin/sh -c &quot;while true; do echo hello world; sleep 1; done&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">05801216d88b750051fcdff2733bf86e44e358d57454f06342a6009c29251b09</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用 docker ps 命令可以查看所有已运行的的容器</span><br><span class=\"line\">docker ps</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                 NAMES</span><br><span class=\"line\">05801216d88b        mysql:5.7           &quot;docker-entrypoint.s…&quot;   3 seconds ago       Up 2 seconds        3306/tcp, 33060/tcp   mysql</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"终止容器\"><a href=\"#终止容器\" class=\"headerlink\" title=\"终止容器\"></a>终止容器</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker stop mysql</span><br><span class=\"line\"># 停止后会打印容器名</span><br><span class=\"line\">mysql</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"启动已终止的容器\"><a href=\"#启动已终止的容器\" class=\"headerlink\" title=\"启动已终止的容器\"></a>启动已终止的容器</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker start mysql</span><br><span class=\"line\"># 启动会打印容器名</span><br><span class=\"line\">mysql</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"进入已启动的容器\"><a href=\"#进入已启动的容器\" class=\"headerlink\" title=\"进入已启动的容器\"></a>进入已启动的容器</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker exec -it mysql /bin/bash</span><br><span class=\"line\"># 进入容器中的终端</span><br><span class=\"line\">root@05801216d88b:/# </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"删除容器\"><a href=\"#删除容器\" class=\"headerlink\" title=\"删除容器\"></a>删除容器</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 删除已停止的容器</span><br><span class=\"line\">docker rm mysql </span><br><span class=\"line\"># 删除正在运行的容器</span><br><span class=\"line\">docker rm -f mysql</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"删除本地镜像\"><a href=\"#删除本地镜像\" class=\"headerlink\" title=\"删除本地镜像\"></a>删除本地镜像</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 删除镜像前必须先删除该镜像启动的容器</span><br><span class=\"line\">docker rm mysql </span><br><span class=\"line\"># 删除镜像</span><br><span class=\"line\">docker rmi mysql:5.7</span><br></pre></td></tr></table></figure>","categories":["skills"],"tags":["运维","Docker","教程"]},{"title":"squid 正向代理","url":"/2019/12/06/squid-%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86/","content":"<h1 id=\"正向代理-squid-安装配置\"><a href=\"#正向代理-squid-安装配置\" class=\"headerlink\" title=\"正向代理 squid 安装配置\"></a>正向代理 squid 安装配置</h1><blockquote>\n<p>之前一个香港客户连接我们公司的 sass 服务（部署在阿里云上海）一直网络延迟很大，于是就在阿里云香港购买了一个ECS 实例搭建了正向代理服务，由于在这之前从未接触过正向代理，所以当时随便在网上查了查，使用了 squid 进行搭建。 最初很简单的，直接使用 squid 默认配置，也没有限制 ip 网段和配置用户认证，导致某天看日志发现很多其它 ip 使用了这个代理。 今天工作不是很忙，正好整理下这个文档，以备后面还需要使用到</p>\n</blockquote>\n<span id=\"more\"></span>\n<p>操作系统： Centos7.6 文章中所有命令都是 root 用户执行的，如使用管理员在命令前加上<code>sudo</code></p>\n<h2 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1. 安装\"></a>1. 安装</h2><p>Centos 7默认软件安装源是有 squid 的，所以安装很简单，直接使用命令即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install aquid</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-配置\"><a href=\"#2-配置\" class=\"headerlink\" title=\"2. 配置\"></a>2. 配置</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /etc/squid/squid.conf</span><br></pre></td></tr></table></figure>\n\n<p>修改配置文件如下</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">http_port</span> <span class=\"string\">3712</span></span><br><span class=\"line\"><span class=\"attr\">cache_mem</span> <span class=\"string\">64 MB</span></span><br><span class=\"line\"><span class=\"attr\">maximum_object_size</span> <span class=\"string\">4 MB</span></span><br><span class=\"line\"><span class=\"attr\">cache_dir</span> <span class=\"string\">ufs /var/spool/squid 100 16 256</span></span><br><span class=\"line\"><span class=\"attr\">access_log</span> <span class=\"string\">/var/log/squid/access.log</span></span><br><span class=\"line\"><span class=\"attr\">http_access</span> <span class=\"string\">allow all</span></span><br><span class=\"line\"><span class=\"attr\">visible_hostname</span> <span class=\"string\">squid</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-初始化\"><a href=\"#3-初始化\" class=\"headerlink\" title=\"3. 初始化\"></a>3. 初始化</h2><p>在第一次启动之前或者修改了<a href=\"https://www.centos.bz/tag/cache/\">cache</a>路径之后，需要重新初始化cache目录。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">squid -z</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-启动\"><a href=\"#4-启动\" class=\"headerlink\" title=\"4. 启动\"></a>4. 启动</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl start squid</span><br><span class=\"line\"><span class=\"comment\"># 设置开机自启</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> squid</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-使用\"><a href=\"#5-使用\" class=\"headerlink\" title=\"5. 使用\"></a>5. 使用</h2><p>在浏览器中修改代理配置即可。 在<a href=\"https://www.centos.bz/category/other-system/windows/\">windows</a>中：</p>\n<ul>\n<li>Internet选项 -&gt; 连接 -&gt; 局域网连接 -&gt; 代理服务器</li>\n</ul>\n<p>在macOSX中：</p>\n<ul>\n<li>Safari -&gt; 偏好设置 -&gt; 代理 -&gt; Web代理</li>\n</ul>\n<p>在 linux 中：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1、临时生效</span></span><br><span class=\"line\"><span class=\"built_in\">set</span><span class=\"string\">&quot;http_proxy=http://[user]:[pass]@host:port/&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 或</span></span><br><span class=\"line\"><span class=\"built_in\">export</span><span class=\"string\">&quot;http_proxy=http://[user]:[pass]@host:port/&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 2. 永久生效</span></span><br><span class=\"line\">创建<span class=\"variable\">$HOME</span>/.wgetrc文件，加入以下内容：</span><br><span class=\"line\">http_proxy=代理主机IP:端口</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-测试\"><a href=\"#6-测试\" class=\"headerlink\" title=\"6. 测试\"></a>6. 测试</h2><p>首先打开百度，然后搜索ip。如果出来的是你代理的那台机器的ip，就是设置成功了</p>\n<h2 id=\"7-配置用户认证\"><a href=\"#7-配置用户认证\" class=\"headerlink\" title=\"7.配置用户认证\"></a>7.配置用户认证</h2><p>Squid实现用户名密码，使用HTTPBasicAuth 的方式。 需要htpasswd工具来创建passwd文件 （安装Apache软件，此工具会附带安装， 或者使用 <code>yum install http-tools</code>的方式安装此工具）</p>\n<ol>\n<li>创建用户密码</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">htpasswd  -c /etc/squid/passwd proxy_username</span><br></pre></td></tr></table></figure>\n\n<p>输入相应的密码后，生成 文件 &#x2F;etc&#x2F;squid&#x2F;passwd</p>\n<ol start=\"2\">\n<li>将下述代码添加到&#x2F;etc&#x2F;squid&#x2F;squid.conf 中即配置实用验证的功能</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">auth_param basic program /usr/lib64/squid/basic_ncsa_auth /etc/squid/passwd</span><br><span class=\"line\">acl auth_user proxy_auth REQUIRED</span><br><span class=\"line\">http_access allow auth_user</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>重启服务</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">service squid restart</span><br></pre></td></tr></table></figure>","categories":["skills"],"tags":["运维","正向代理","软件安装"]},{"title":"win10 wsl linux 子系统ssh服务自启","url":"/2019/12/13/win10-wsl-linux-%E5%AD%90%E7%B3%BB%E7%BB%9Fssh%E6%9C%8D%E5%8A%A1%E8%87%AA%E5%90%AF/","content":"<h1 id=\"win10-wsl-linux-子系统ssh服务自启\"><a href=\"#win10-wsl-linux-子系统ssh服务自启\" class=\"headerlink\" title=\"win10 wsl linux 子系统ssh服务自启\"></a>win10 wsl linux 子系统ssh服务自启</h1><p>创建并编辑<code>/etc/init.wsl</code>，写入如下内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">/ect/init.d/ssh $1</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p>添加可执行权限</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo chmod +x /etc/init.wsl</span><br></pre></td></tr></table></figure>\n\n<p>编辑 sudoers ,避免输入密码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo visudo</span><br></pre></td></tr></table></figure>\n\n<p>添加一行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">%sudo ALL=NOPASSWD: /etc/init.wsl</span><br></pre></td></tr></table></figure>\n\n<p>创建一个 start.vbs 脚本，内容为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Set ws = WScript.CreateObject(&quot;WScript.Shell&quot;)</span><br><span class=\"line\">ws.run &quot;ubuntu run sudo /etc/init.wsl start&quot;, vbhide</span><br></pre></td></tr></table></figure>\n\n<p>win10 的开始-运行里面输入<code>shell:startup</code>打开启动文件夹，将该文件放入即可</p>\n","categories":["skills"],"tags":["运维","windows"]},{"title":"运维提升之容器化——Docker（04）","url":"/2019/12/26/%E8%BF%90%E7%BB%B4%E6%8F%90%E5%8D%87%E4%B9%8B%E5%AE%B9%E5%99%A8%E5%8C%96-docker%EF%BC%8804%EF%BC%89/","content":"<h1 id=\"Dockerfile-定制镜像\"><a href=\"#Dockerfile-定制镜像\" class=\"headerlink\" title=\"Dockerfile 定制镜像\"></a>Dockerfile 定制镜像</h1><p>官方的镜像可能不符合自己的业务场景需求，这时候需要自己定制镜像，定制镜像主要使用 <code>Dockerfile</code></p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p><code>Dockerfile</code> 是一个文本文件，其内包含了一条条的指令(<code>Instruction</code>)，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。 还以之前定制 <code>nginx</code> 镜像为例，这次我们使用 <code>Dockerfile</code> 来定制。在一个空白目录中，建立一个文本文件，并命名为 <code>Dockerfile</code>：</p>\n<span id=\"more\"></span>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ mkdir mynginx</span><br><span class=\"line\">$ cd mynginx</span><br><span class=\"line\">$ touch Dockerfile</span><br></pre></td></tr></table></figure>\n\n<p>Dockerfile 内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">FROM nginx</span><br><span class=\"line\">RUN echo &#x27;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&#x27; &gt; /usr/share/nginx/html/index.html</span><br></pre></td></tr></table></figure>\n\n<p>这个 <code>Dockerfile</code> 很简单，一共就两行。涉及到了两条指令，<code>FROM</code> 和 <code>RUN</code>。</p>\n<h2 id=\"FROM-指定基础镜像\"><a href=\"#FROM-指定基础镜像\" class=\"headerlink\" title=\"FROM 指定基础镜像\"></a>FROM 指定基础镜像</h2><p>定制镜像，一定是要以一个镜像为基础，在其上进行定制。就像我们之前运行了一个 nginx 镜像的容器，再进行修改一样，基础镜像是必须指定的。而FROM就是指定基础镜像，因此一个 Dockerfile 中 FROM 是必备的指令，并且必须是第一条指令。 除了选择现有镜像为基础镜像外，Docker 还存在一个特殊的镜像，名为scratch。这个镜像是虚拟的概念，并不实际存在，它表示一个空白的镜像。</p>\n<h2 id=\"RUN-执行命令\"><a href=\"#RUN-执行命令\" class=\"headerlink\" title=\"RUN 执行命令\"></a>RUN 执行命令</h2><p>RUN指令是用来执行命令行命令的。由于命令行的强大能力，RUN指令在定制镜像时是最常用的指令之一。其格式有两种：</p>\n<ul>\n<li>shell 格式：RUN &lt;命令&gt;，就像直接在命令行中输入的命令一样。刚才写的 Dockerfile 中的 RUN 指令就是这种格式</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">RUN echo &#x27;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&#x27; &gt; /usr/share/nginx/html/index.html</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>exec 格式：RUN [“可执行文件”, “参数1”, “参数2”]，这更像是函数调用中的格式。 既然 RUN 就像 Shell 脚本一样可以执行命令，那么我们是否就可以像 Shell 脚本一样把每个命令对应一个 RUN 呢？比如这样：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">FROM debian:jessie</span><br><span class=\"line\">RUN apt-get update</span><br><span class=\"line\">RUN apt-get install -y gcc libc6-dev make</span><br><span class=\"line\">RUN wget -O redis.tar.gz &quot;http://download.redis.io/releases/redis-3.2.5.tar.gz&quot;</span><br><span class=\"line\">RUN mkdir -p /usr/src/redis</span><br><span class=\"line\">RUN tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1</span><br><span class=\"line\">RUN make -C /usr/src/redis</span><br><span class=\"line\">RUN make -C /usr/src/redis install</span><br></pre></td></tr></table></figure>\n\n<p>之前说过，Dockerfile 中每一个指令都会建立一层，RUN 也不例外。每一个 RUN 的行为，就和刚才我们手工建立镜像的过程一样：新建立一层，在其上执行这些命令，执行结束后，commit 这一层的修改，构成新的镜像。 而上面的这种写法，创建了 7 层镜像。这是完全没有意义的，而且很多运行时不需要的东西，都被装进了镜像里，比如编译环境、更新的软件包等等。结果就是产生非常臃肿、非常多层的镜像，不仅仅增加了构建部署的时间，也很容易出错。 这是很多初学 Docker 的人常犯的一个错误。</p>\n<blockquote>\n<p>Union FS 是有最大层数限制的，比如 AUFS，曾经是最大不得超过 42 层，现在是不得超过 127 层。</p>\n</blockquote>\n<p>上面的 Dockerfile 正确的写法应该是这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">FROM debian:jessie</span><br><span class=\"line\">RUN buildDeps=&#x27;gcc libc6-dev make&#x27; \\</span><br><span class=\"line\">    &amp;&amp; apt-get update \\</span><br><span class=\"line\">    &amp;&amp; apt-get install -y $buildDeps \\</span><br><span class=\"line\">    &amp;&amp; wget -O redis.tar.gz &quot;http://download.redis.io/releases/redis-3.2.5.tar.gz&quot; \\</span><br><span class=\"line\">    &amp;&amp; mkdir -p /usr/src/redis \\</span><br><span class=\"line\">    &amp;&amp; tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \\</span><br><span class=\"line\">    &amp;&amp; make -C /usr/src/redis \\</span><br><span class=\"line\">    &amp;&amp; make -C /usr/src/redis install \\</span><br><span class=\"line\">    &amp;&amp; rm -rf /var/lib/apt/lists/* \\</span><br><span class=\"line\">    &amp;&amp; rm redis.tar.gz \\</span><br><span class=\"line\">    &amp;&amp; rm -r /usr/src/redis \\</span><br><span class=\"line\">    &amp;&amp; apt-get purge -y --auto-remove $buildDeps</span><br></pre></td></tr></table></figure>\n\n<p>首先，之前所有的命令只有一个目的，就是编译、安装 redis 可执行文件。因此没有必要建立很多层，这只是一层的事情。因此，这里没有使用很多个 RUN 对一一对应不同的命令，而是仅仅使用一个 RUN 指令，并使用&amp;&amp;将各个所需命令串联起来。将之前的 7 层，简化为了 1 层。在撰写 Dockerfile 的时候，要经常提醒自己，这并不是在写 Shell 脚本，而是在定义每一层该如何构建。 并且，这里为了格式化还进行了换行。Dockerfile 支持 Shell 类的行尾添加\\的命令换行方式，以及行首#进行注释的格式。良好的格式，比如换行、缩进、注释等，会让维护、排障更为容易，这是一个比较好的习惯。 此外，还可以看到这一组命令的最后添加了清理工作的命令，删除了为了编译构建所需要的软件，清理了所有下载、展开的文件，并且还清理了 apt 缓存文件。这是很重要的一步，我们之前说过，镜像是多层存储，每一层的东西并不会在下一层被删除，会一直跟随着镜像。因此镜像构建时，一定要确保每一层只添加真正需要添加的东西，任何无关的东西都应该清理掉。 很多人初学 Docker 制作出了很臃肿的镜像的原因之一，就是忘记了每一层构建的最后一定要清理掉无关文件。</p>\n<h2 id=\"构建镜像\"><a href=\"#构建镜像\" class=\"headerlink\" title=\"构建镜像\"></a>构建镜像</h2><p>好了，让我们再回到之前定制的 nginx 镜像的 Dockerfile 来。现在我们明白了这个 Dockerfile的内容，那么让我们来构建这个镜像吧。在 Dockerfile 文件所在目录执行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker build -t nginx:v3 .</span><br><span class=\"line\">Sending build context to Docker daemon 2.048 kB</span><br><span class=\"line\">Step 1 : FROM nginx</span><br><span class=\"line\"> ---&gt; e43d811ce2f4</span><br><span class=\"line\">Step 2 : RUN echo &#x27;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&#x27; &gt; /usr/share/nginx/html/index.html</span><br><span class=\"line\"> ---&gt; Running in 9cdc27646c7b</span><br><span class=\"line\"> ---&gt; 44aa4490ce2c</span><br><span class=\"line\">Removing intermediate container 9cdc27646c7b</span><br><span class=\"line\">Successfully built 44aa4490ce2c</span><br></pre></td></tr></table></figure>\n\n<p>从命令的输出结果中，我们可以清晰的看到镜像的构建过程。在 Step 2 中，如同我们之前所说的那样，RUN 指令启动了一个容器 9cdc27646c7b，执行了所要求的命令，并最后提交了这一层 44aa4490ce2c，随后删除了所用到的这个容器 9cdc27646c7b。这里我们使用了 docker build命令进行镜像构建。其格式为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker build [选项] &lt;上下文路径/URL/-&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在这里我们指定了最终镜像的名称 -t nginx:v3，构建成功后，我们可以像之前运行 nginx:v2 那样来运行这个镜像，其结果会和 nginx:v2 一样。</p>\n","categories":["skills"],"tags":["Docker","教程"]},{"title":"测试文章","url":"/2020/01/02/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/","content":"<h1 id=\"这是一个测试文字\"><a href=\"#这是一个测试文字\" class=\"headerlink\" title=\"这是一个测试文字\"></a>这是一个测试文字</h1><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 代码测试</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;hello world&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>图片测试 <a href=\"https://i.loli.net/2020/06/17/stA67yYdIrbXclp.jpg\"><img src=\"https://i.loli.net/2020/06/17/stA67yYdIrbXclp.jpg\"></a><span id=\"more\"></span></p>\n","categories":["Essay"],"tags":["测试"]},{"title":"运维提升之容器化——Docker（05）","url":"/2020/01/02/%E8%BF%90%E7%BB%B4%E6%8F%90%E5%8D%87%E4%B9%8B%E5%AE%B9%E5%99%A8%E5%8C%96-docker%EF%BC%8805%EF%BC%89/","content":"<h1 id=\"私有镜像仓库\"><a href=\"#私有镜像仓库\" class=\"headerlink\" title=\"私有镜像仓库\"></a>私有镜像仓库</h1><h2 id=\"Dockerhub\"><a href=\"#Dockerhub\" class=\"headerlink\" title=\"Dockerhub\"></a>Dockerhub</h2><p>目前 Docker 官方维护了一个公共仓库Docker Hub，大部分需求都可以通过在 Docker Hub 中直接下载镜像来实现。如果你觉得拉取 Docker Hub 的镜像比较慢的话，我们可以配置一个镜像加速器：<a href=\"http://docker-cn.com/\" title=\"http://docker-cn.com/\">http://docker-cn.com/</a>，当然国内大部分云厂商都提供了相应的加速器，简单配置即可。</p>\n<blockquote>\n<p><a href=\"https://help.aliyun.com/document_detail/60750.html\" title=\" 阿里云镜像加速\">阿里云镜像加速</a></p>\n</blockquote>\n<span id=\"more\"></span>\n<h2 id=\"私有仓库\"><a href=\"#私有仓库\" class=\"headerlink\" title=\"私有仓库\"></a>私有仓库</h2><p>有时候使用 Docker Hub 这样的公共仓库可能不方便，用户可以创建一个本地仓库供私人使用。 docker-registry是官方提供的工具，可以用于构建私有的镜像仓库。本文内容基于 docker-registry v2.x 版本。你可以通过获取官方 registry 镜像来运行。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker run -d -p 5000:5000 --restart=always --name registry registry</span><br></pre></td></tr></table></figure>\n\n<p>这将使用官方的registry镜像来启动私有仓库。默认情况下，仓库会被创建在容器的&#x2F;var&#x2F;lib&#x2F;registry目录下。你可以通过 -v 参数来将镜像文件存放在本地的指定路径。例如下面的例子将上传的镜像放到本地的 &#x2F;opt&#x2F;data&#x2F;registry 目录。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker run -d \\</span><br><span class=\"line\">    -p 5000:5000 \\</span><br><span class=\"line\">    -v /opt/data/registry:/var/lib/registry \\</span><br><span class=\"line\">    registry</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"在私有仓库上传、搜索、下载镜像\"><a href=\"#在私有仓库上传、搜索、下载镜像\" class=\"headerlink\" title=\"在私有仓库上传、搜索、下载镜像\"></a>在私有仓库上传、搜索、下载镜像</h2><p>创建好私有仓库之后，就可以使用docker tag来标记一个镜像，然后推送它到仓库。例如私有仓库地址为 127.0.0.1:5000。先在本机查看已有的镜像。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker image ls</span><br><span class=\"line\">REPOSITORY                        TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</span><br><span class=\"line\">ubuntu                            latest              ba5877dc9bec        6 weeks ago  </span><br></pre></td></tr></table></figure>\n\n<p>使用docker tag将 ubuntu:latest 这个镜像标记为 127.0.0.1:5000&#x2F;ubuntu:latest。 格式为 docker tag IMAGE[:TAG] [REGISTRY_HOST[:REGISTRY_PORT]&#x2F;]REPOSITORY[:TAG]</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker tag ubuntu:latest 127.0.0.1:5000/ubuntu:latest</span><br><span class=\"line\">$ docker image ls</span><br><span class=\"line\">REPOSITORY                        TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</span><br><span class=\"line\">ubuntu                            latest              ba5877dc9bec        6 weeks ago         192.7 MB</span><br><span class=\"line\">127.0.0.1:5000/ubuntu:latest      latest              ba5877dc9bec        6 weeks ago         192.7 MB</span><br></pre></td></tr></table></figure>\n\n<p>使用docker push上传标记的镜像。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker push 127.0.0.1:5000/ubuntu:latest</span><br><span class=\"line\">The push refers to repository [127.0.0.1:5000/ubuntu]</span><br><span class=\"line\">373a30c24545: Pushed</span><br><span class=\"line\">a9148f5200b0: Pushed</span><br><span class=\"line\">cdd3de0940ab: Pushedfc56279bbb33: Pushed</span><br><span class=\"line\">b38367233d37: Pushed</span><br><span class=\"line\">2aebd096e0e2: Pushed</span><br><span class=\"line\">latest: digest: sha256:fe4277621f10b5026266932ddf760f5a756d2facd505a94d2da12f4f52f71f5a size: 1568</span><br></pre></td></tr></table></figure>\n\n<p>用curl查看仓库中的镜像。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ curl 127.0.0.1:5000/v2/_catalog</span><br><span class=\"line\">&#123;&quot;repositories&quot;:[&quot;ubuntu&quot;]&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里可以看到 {“repositories”:[“ubuntu”]}，表明镜像已经被成功上传了。 先删除已有镜像，再尝试从私有仓库中下载这个镜像。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker image rm 127.0.0.1:5000/ubuntu:latest</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker pull 127.0.0.1:5000/ubuntu:latest</span><br><span class=\"line\">Pulling repository 127.0.0.1:5000/ubuntu:latest</span><br><span class=\"line\">ba5877dc9bec: Download complete</span><br><span class=\"line\">511136ea3c5a: Download complete</span><br><span class=\"line\">9bad880da3d2: Download complete</span><br><span class=\"line\">25f11f5fb0cb: Download complete</span><br><span class=\"line\">ebc34468f71d: Download complete</span><br><span class=\"line\">2318d26665ef: Download complete</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker image ls</span><br><span class=\"line\">REPOSITORY                         TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</span><br><span class=\"line\">127.0.0.1:5000/ubuntu:latest       latest              ba5877dc9bec        6 weeks ago         192.7 MB</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"harbor\"><a href=\"#harbor\" class=\"headerlink\" title=\"harbor\"></a>harbor</h2><p>官方提供的 registry 比较简单，且没有 ui 界面，可以使用 harbor 搭建私有仓库 <a href=\"https://www.52ynn.top/index.php/2020/02/19/harbor%e7%a7%81%e6%9c%89%e9%95%9c%e5%83%8f%e4%bb%93%e5%ba%93%e6%90%ad%e5%bb%ba/\" title=\"harbor 搭建教程\">harbor 搭建教程</a></p>\n","categories":["skills"],"tags":["Docker","教程"]},{"title":"2019年总结","url":"/2020/01/03/2019%E5%B9%B4%E6%80%BB%E7%BB%93/","content":"<h1 id=\"2019年的总结\"><a href=\"#2019年的总结\" class=\"headerlink\" title=\"2019年的总结\"></a>2019年的总结</h1><p>随着各个软件 2019 年的总结结束，是时候要给我的 2019 年做个总结了。 2019 年对于我来说真的是很特别的一年，在这一年里经历了太多太多，也成长了太多太多。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"关于工作\"><a href=\"#关于工作\" class=\"headerlink\" title=\"关于工作\"></a>关于工作</h2><p>到 2019 年结束，在亘岩已经快两年了，同时毕业也快两年了，若不是公司来了很多实习生，我可能还觉得毕业没多久。 过去的 19 年，见证了亘岩从几十人的小公司慢慢扩大为几百人的公司，自己一个涉世未深的学生也慢慢的开始承担起责任了。 变化最大的自然就是工作的方式改变了，做任何事情都有计划,当然自己的沟通能力还是很欠缺的，希望 2020 年能有所改进。</p>\n<h2 id=\"关于生活\"><a href=\"#关于生活\" class=\"headerlink\" title=\"关于生活\"></a>关于生活</h2><p>2019 年应该是我这二十几年的人生中最重要的一年了，这一年我和她终于走到了一起，也即将迎来自己的鼠宝宝。 有人说结婚早不好，对于我来说，这个也是顺其自然的事情，结婚之后虽然压力更大了，但是同时对未来的期待也更多了。</p>\n<h2 id=\"2020-的期待\"><a href=\"#2020-的期待\" class=\"headerlink\" title=\"2020 的期待\"></a>2020 的期待</h2><p>希望 2020 年工作能更上一层楼，家人都身体健康平平安安！ <strong>2020 只争朝夕，不负韶华</strong> <img src=\"https://i.loli.net/2020/01/03/PbIu98hTQelUVJ2.jpg\" alt=\"7aac11f31618d25c966bd540338bc667.jpg\"></p>\n","categories":["Essay"],"tags":["个人"]},{"title":"2020 事件清单","url":"/2020/01/06/2020%E5%B9%B4%E6%83%B3%E5%81%9A%E7%9A%84%E4%BA%8B%E6%83%85%E6%B8%85%E5%8D%95/","content":"<ol>\n<li><p>全家一起旅游一次</p>\n</li>\n<li><p>带能能去趟泰国（这条可以和第一条一起）<span id=\"more\"></span></p>\n</li>\n<li><p>网络安全入门学习（渗透测试）</p>\n</li>\n<li><p>运维技能提升（k8s，Python）</p>\n</li>\n<li><p>尽量回芜湖工作，如果还在上海每月回去两次(1，2，3 ,4,5,6，7，8月达成)</p>\n</li>\n<li><p>每周和父母打个电话</p>\n</li>\n<li><p>列个<a href=\"https://www.52ynn.top/index.php/2020/01/06/2020-%e8%af%bb%e4%b9%a6%e6%b8%85%e5%8d%95/\" title=\"读书清单\">读书清单</a>并完成</p>\n</li>\n<li><p>锻炼减肥，70kg</p>\n</li>\n<li><p>四月底前完成 ACP 认证 （考了个华为 HCIA 认证）</p>\n<p>未完…</p>\n</li>\n</ol>\n","categories":["life"],"tags":["清单"]},{"title":"华为云 arm 架构安装 mysql 5.7","url":"/2020/01/06/%E5%8D%8E%E4%B8%BA%E4%BA%91-arm-%E6%9E%B6%E6%9E%84%E5%AE%89%E8%A3%85-mysql-5-7/","content":"<h1 id=\"华为云-arm-centos7-安装部署-mysql\"><a href=\"#华为云-arm-centos7-安装部署-mysql\" class=\"headerlink\" title=\"华为云 arm centos7 安装部署 mysql\"></a>华为云 arm centos7 安装部署 mysql</h1><h1 id=\"1-配置环境\"><a href=\"#1-配置环境\" class=\"headerlink\" title=\"1. 配置环境\"></a>1. 配置环境</h1><h2 id=\"1-1-防火墙并取消开机自启动\"><a href=\"#1-1-防火墙并取消开机自启动\" class=\"headerlink\" title=\"1.1 防火墙并取消开机自启动\"></a>1.1 防火墙并取消开机自启动</h2><p>步骤 1 停止防火墙</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl stop firewalld.service</span><br></pre></td></tr></table></figure>\n\n<p>步骤 2 关闭开机自启</p>\n<span id=\"more\"></span>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">disable</span> firewalld.service</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"1-2-修改selinux-为-disable\"><a href=\"#1-2-修改selinux-为-disable\" class=\"headerlink\" title=\"1.2 修改selinux 为 disable\"></a>1.2 修改selinux 为 disable</h1><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sed -i <span class=\"string\">&#x27;s/SELINUX=enforcing/SELINUX=disabled/g&#x27;</span> /etc/sysconfig/selinux</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"1-3-创建组和用户\"><a href=\"#1-3-创建组和用户\" class=\"headerlink\" title=\"1.3 创建组和用户\"></a>1.3 创建组和用户</h1><p>服务器环境下，为了系统安全，通常会为进程分配单独的用户，以实现权限隔离。本章节创建的组和用户都是操作系统层面的，不是数据库层面的。 创建mysql用户(组)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">groupadd mysql</span><br><span class=\"line\">useradd -g mysql mysql</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-4-创建数据目录\"><a href=\"#1-4-创建数据目录\" class=\"headerlink\" title=\"1.4 创建数据目录\"></a>1.4 创建数据目录</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> /data</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /data/mysql-5.7.27-1/mysql</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /data/mysql-5.7.27-1/mysql</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> data tmp run <span class=\"built_in\">log</span></span><br><span class=\"line\"><span class=\"built_in\">chown</span> -R mysql:mysql /data/mysql-5.7.27-1/mysql</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-安装、运行、卸载\"><a href=\"#2-安装、运行、卸载\" class=\"headerlink\" title=\"2.安装、运行、卸载\"></a>2.安装、运行、卸载</h1><h2 id=\"2-1-安装\"><a href=\"#2-1-安装\" class=\"headerlink\" title=\"2.1 安装\"></a>2.1 安装</h2><h3 id=\"2-1-1-镜像站-RPM-安装\"><a href=\"#2-1-1-镜像站-RPM-安装\" class=\"headerlink\" title=\"2.1.1 镜像站 RPM 安装\"></a>2.1.1 镜像站 RPM 安装</h3><p>镜像站中的mysql-5.7.27-1.aarch64.rpm安装包根据《MySQL 5.7.27 编译指南（CentOS 7.6）》打包而成，然后将其上传到镜像站。此安装方式需要连接外网。如果没有外网，则下载RPM包，上传到服务器任意路径，并在该路径下执行命令<code>rpm -ivh mysql-5.7.27-1.aarch64.rpm</code>安装即可。本小节相关连接如下： RPM下载链接为： <strong><a href=\"x-wc://file=zh-cn_topic_0200581783.html\">https://mirrors.huaweicloud.com/kunpeng/yum/el/7/aarch64/Packages/mysql-5.7.27-1.aarch64.rpm</a></strong> 编译指南链接为： <a href=\"https://bbs.huaweicloud.com/forum/thread-26825-1-1.html\">https://bbs.huaweicloud.com/forum/thread-26825-1-1.html</a></p>\n<h3 id=\"2-1-2-编译安装\"><a href=\"#2-1-2-编译安装\" class=\"headerlink\" title=\"2.1.2 编译安装\"></a>2.1.2 编译安装</h3><p>参考《MySQL 5.7.27 编译指南（CentOS 7.6）.doc》，文档链接为：<a href=\"https://bbs.huaweicloud.com/forum/thread-26825-1-1.html\"><strong>https://bbs.huaweicloud.com/forum/thread-26825-1-1.html</strong></a></p>\n<h2 id=\"2-2-运行\"><a href=\"#2-2-运行\" class=\"headerlink\" title=\"2.2 运行\"></a>2.2 运行</h2><p>如果采用镜像站rpm安装方式安装，则需要额外做以下操作步骤避免初始化数据库失败：</p>\n<ol>\n<li><p>从连接<a href=\"x-wc://file=zh-cn_topic_0200581780.html\">https://bbs.huaweicloud.com/forum/thread-29895-1-1.html</a>中下载压缩包rpm-bug.zip并上传到服务器&#x2F;home目录下</p>\n</li>\n<li><p>解压压缩包</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /home/</span><br><span class=\"line\">unzip rpm-bug.zip</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>进入解压后的文件目录并将其中的文件放入到指定目录</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> rpm-bug</span><br><span class=\"line\"><span class=\"built_in\">cp</span> libatomic.so.1 /usr/lib64/</span><br><span class=\"line\"><span class=\"built_in\">cp</span> libstdc++.so.6.0.24 /lib64/  </span><br><span class=\"line\"><span class=\"built_in\">rm</span> /lib64/libstdc++.so.6</span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s /lib64/libstdc++.so.6.0.24  /lib64/libstdc++.so.6</span><br><span class=\"line\"><span class=\"built_in\">cp</span> libaio.so.1.0.1 /usr/lib64/libaio.so.1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-1-修改配置文件\"><a href=\"#2-2-1-修改配置文件\" class=\"headerlink\" title=\"2.2.1 修改配置文件\"></a>2.2.1 修改配置文件</h3><p>步骤 1 编辑my.cnf配置文件，其中文件路径（包括软件安装路径basedir、数据路径datadir等）根据实际情况修改。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">rm</span> -f /etc/my.cnf</span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;[mysqld_safe]\\nlog-error=/data/mysql-5.7.27-1/mysql/log/mysql.log\\npid-file=/data/mysql-5.7.27-1/mysql/run/mysqld.pid\\n[mysqldump]\\nquick\\n[mysql]\\nno-auto-rehash\\n[client]\\ndefault-character-set=utf8\\n[mysqld]\\nbasedir=/home/mysql-5.7.27-1/mysql\\nsocket=/data/mysql-5.7.27-1/mysql/run/mysql.sock\\ntmpdir=/data/mysql-5.7.27-1/mysql/tmp\\ndatadir=/data/mysql-5.7.27-1/mysql/data\\nsocket=/data/mysql-5.7.27-1/mysql/run/mysql.sock\\nport=3306\\nuser=root\\n&quot;</span> &gt; /etc/my.cnf</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>步骤 2 确保 my.cnf 配置文件修改正确</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> /etc/my.cnf</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[mysqld_safe]</span><br><span class=\"line\">log-error=/data/mysql-5.7.27-1/mysql/log/mysql.log</span><br><span class=\"line\">pid-file=/data/mysql-5.7.27-1/mysql/run/mysqld.pid</span><br><span class=\"line\">[mysqldump]</span><br><span class=\"line\">quick</span><br><span class=\"line\">[mysql]</span><br><span class=\"line\">no-auto-rehash</span><br><span class=\"line\">[client]</span><br><span class=\"line\">default-character-set=utf8</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">basedir=/home/mysql-5.7.27-1/mysql</span><br><span class=\"line\">socket=/data/mysql-5.7.27-1/mysql/run/mysql.sock</span><br><span class=\"line\">tmpdir=/data/mysql-5.7.27-1/mysql/tmp</span><br><span class=\"line\">datadir=/data/mysql-5.7.27-1/mysql/data</span><br><span class=\"line\">socket=/data/mysql-5.7.27-1/mysql/run/mysql.sock</span><br><span class=\"line\">port=3306</span><br><span class=\"line\">user=root</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-2-配置环境变量\"><a href=\"#2-2-2-配置环境变量\" class=\"headerlink\" title=\"2.2.2 配置环境变量\"></a>2.2.2 配置环境变量</h3><p><strong>步骤 1</strong> 安装完成后，将MySQL二进制文件路径到PATH。 其中PATH中的“&#x2F;home&#x2F;mysql-5.7&#x2F;mysql&#x2F;bin”路径，为MySQL软件安装目录下的bin文件的绝对路径。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span>  <span class=\"built_in\">export</span>  PATH=<span class=\"variable\">$PATH</span>:/home/mysql-5.7.27-1/mysql/bin  &gt;&gt; /etc/profile</span><br></pre></td></tr></table></figure>\n\n<p>步骤 2 使环境变量配置生效</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile     </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-3-初始化数据库\"><a href=\"#2-2-3-初始化数据库\" class=\"headerlink\" title=\"2.2.3 初始化数据库\"></a>2.2.3 初始化数据库</h3><p>步骤 1 初始化数据库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">/home/mysql-5.7.27-1/mysql/bin/mysqld --defaults-file=/etc/my.cnf --initialize  --basedir=/home/mysql-5.7.27-1/mysql --datadir=/data/mysql-5.7.27-1/mysql/data --user=mysql</span><br></pre></td></tr></table></figure>\n\n<p>回显信息倒数第一行会显示初始密码，需要保存，后面登陆会使用到</p>\n<h3 id=\"2-2-4-启动数据库\"><a href=\"#2-2-4-启动数据库\" class=\"headerlink\" title=\"2.2.4 启动数据库\"></a>2.2.4 启动数据库</h3><p>步骤 1 启动 MySQL，执行下面命令回车</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">/home/mysql-5.7.27-1/mysql/bin/mysqld_safe --basedir=/home/mysql-5.7.27-1/mysql/ --datadir=/data/mysql-5.7.27-1/mysql/data --user=root &amp;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-5-登陆数据库\"><a href=\"#2-2-5-登陆数据库\" class=\"headerlink\" title=\"2.2.5 登陆数据库\"></a>2.2.5 登陆数据库</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">/home/mysql-5.7.27-1/mysql/bin/mysql -uroot -p -S /data/mysql-5.7.27-1/mysql/run/mysql.sock</span><br></pre></td></tr></table></figure>\n\n<p>此处使用初始密码登陆</p>\n<h3 id=\"2-2-6-配置数据库账号和密码\"><a href=\"#2-2-6-配置数据库账号和密码\" class=\"headerlink\" title=\"2.2.6 配置数据库账号和密码\"></a>2.2.6 配置数据库账号和密码</h3><p>步骤 1 修改本地root用户登录密码。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">alter user &#x27;root&#x27;@&#x27;localhost&#x27; identified by &quot;123456&quot;;</span><br></pre></td></tr></table></figure>\n\n<p>步骤 2 创建全域root用户（允许root从其他服务器访问）。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">create user &#x27;root&#x27;@&#x27;%&#x27; identified by &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>步骤 3 进行授权。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">grant all privileges on *.* to &#x27;root&#x27;@&#x27;%&#x27;;</span><br><span class=\"line\">flush privileges;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-3-卸载\"><a href=\"#2-3-卸载\" class=\"headerlink\" title=\"2.3 卸载\"></a>2.3 卸载</h2><p>编译安装只是生成对应的文件，不涉及卸载。 步骤 1 关闭数据库进程 mysql_safe 和 mysqld</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ps -ef  grep mysql</span><br><span class=\"line\"><span class=\"built_in\">kill</span> -9 进程ID</span><br></pre></td></tr></table></figure>\n\n<p>步骤 2 卸载数据库 RPM 包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">rpm -e mysql-5.7.27-1.aarch64</span><br></pre></td></tr></table></figure>\n\n<p>步骤 3 删除数据库的安装目录和数据目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">rm</span> -rf /home/mysql-5.7.27-1</span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf /data/mysql-5.7.27-1</span><br></pre></td></tr></table></figure>","categories":["skills"],"tags":["运维","软件安装","MySQL"]},{"title":"Linux 运维笔试题","url":"/2020/01/19/linux-%E8%BF%90%E7%BB%B4%E7%AC%94%E8%AF%95%E9%A2%98/","content":"<h3 id=\"一．填空题：\"><a href=\"#一．填空题：\" class=\"headerlink\" title=\"一．填空题：\"></a>一．填空题：</h3><ol>\n<li>在Linux系统中，以 文件 方式访问设备 。</li>\n<li>Linux内核引导时，从文件 &#x2F;etc&#x2F;fstab 中读取要加载的文件系统。</li>\n<li>Linux文件系统中每个文件用 i节点 来标识。</li>\n<li>全部磁盘块由四个部分组成，分别为引导块 、专用块 、 i节点表块 和数据存储块。</li>\n<li>链接分为： 硬链接 和 符号链接 。</li>\n<li>超级块包含了i节点表 和 空闲块表 等重要的文件系统信息。</li>\n<li>某文件的权限为：d-rw-_r–_r–，用数值形式表示该权限，则该八进制数为： 644 ，该文件属性是 目录 。</li>\n<li>前台起动的进程使用 Ctrl+c 终止。</li>\n<li>静态路由设定后，若网络拓扑结构发生变化，需由系统管理员修改路由的设置。</li>\n<li>网络管理的重要任务是： 控制 和 监控 。<span id=\"more\"></span></li>\n<li>安装Linux系统对硬盘分区时，必须有两种分区类型： 文件系统分区 和 交换分区 。</li>\n<li>编写的Shell程序运行前必须赋予该脚本文件 执行 权限。</li>\n<li>系统管理的任务之一是能够在 分布式 环境中实现对程序和数据的安全保护、备份、恢复和更新。</li>\n<li>系统交换分区是作为系统 虚拟存储器 的一块区域。</li>\n<li>内核分为 进程管理系统 、 内存管理系统 、 I&#x2F;O管理系统 和文件管理系统 等四个子系统。</li>\n<li>内核配置是系统管理员在改变系统配置 硬件 时要进行的重要操作。</li>\n<li>在安装Linux系统中，使用netconfig程序对网络进行配置，该安装程序会一步步提示用户输入主机名、域名、域名服务器、IP地址、 网关地址 和 子网掩码 等必要信息。</li>\n<li>唯一标识每一个用户的是用户 ID 和用户名。</li>\n<li>RIP 协议是最为普遍的一种内部协议，一般称为动态路由信息协议。</li>\n<li>在Linux系统中所有内容都被表示为文件，组织文件的各种方法称为 文件系统 。</li>\n<li>DHCP可以实现动态 IP 地址分配。</li>\n<li>系统网络管理员的管理对象是服务器、 用户 和服务器的进程 以及系统的各种资源。</li>\n<li>网络管理通常由监测、传输和管理三部分组成，其中管理部分是整个网络管理的中心。</li>\n<li>当想删除本系统用不上的 设备驱动程序 时必须编译内核，当内核不支持系统上的 设备驱动程序 时，必须对内核 升级 。</li>\n<li>Ping命令可以测试网络中本机系统是否能到达 一台远程主机 ，所以常常用于测试网络的 连通性 。</li>\n<li>vi编辑器具有两种工作模式： 命令模式 和 输入模式 。</li>\n<li>可以用ls –al命令来观察文件的权限，每个文件的权限都用10位表示，并分为四段，其中第一段占 1 位，表示 文件类型 ，第二段占3位，表示 文件所有者 对该文件的权限。</li>\n<li>进程与程序的区别在于其动态性，动态的产生和终止，从产生到终止进程可以具有的基本状态为： 运行态 、 就绪态 和 等待态（阻塞态） 。</li>\n<li>DNS实际上是分布在internet上的主机信息的数据库，其作用是实现 IP地址和主机名 之间的转换。</li>\n<li>Apache是实现WWW服务器功能的应用程序，即通常所说的“浏览web服务器”，在服务器端 为用户提供浏览 web服务 的就是apache应用程序。</li>\n<li>在Linux系统上做备份可以有两种类型：系统备份 和 用户备份 。其中前者是指对 操作系统 的备份，后者是指对 应用程序和用户文件的备份。</li>\n<li>CD-ROM标准的文件系统类型是 iso9660 。</li>\n<li>当lilo.conf配置完毕后，使之生效，应运行的命令及参数是 lilo 。</li>\n<li>在使用ls命令时，用八进制形式显示非打印字符应使用参数 -b 。</li>\n<li>Linux使用支持Windows 9.x&#x2F;2000长文件名的文件系统的类型是 vfat 。</li>\n<li>设定限制用户使用磁盘空间的命令是 quota 。</li>\n<li>在Linux系统中，用来存放系统所需要的配置文件和子目录的目录是 &#x2F;etc 。</li>\n<li>硬连接只能建立对 文件 链接。符号链接可以跨不同文件系统创建。</li>\n<li>套接字文件的属性位是 s 。</li>\n<li>结束后台进程的命令是 kill 。</li>\n<li>进程的运行有两种方式，即 独立运行和使用父进程运行 。</li>\n<li>Links分为 硬链接和符号链接 。</li>\n<li>在超级用户下显示Linux系统中正在运行的全部进程，应使用的命令及参数是 ps -aux 。</li>\n<li>管道文件的属性位是 p 。</li>\n<li>将前一个命令的标准输出作为后一个命令的标准输入，称之为 管道 。</li>\n<li>为脚本程序指定执行权的命令及参数是 chmod a+x filename 。</li>\n<li>进行远程登录的命令是 telnet 。</li>\n<li>欲发送10个分组报文测试与主机abc.tuu.edu.cn的连通性，应使用的命令和参数是： ping abc.tuu.edu.cn –c 10 。</li>\n<li>DNS服务器的进程命名为named，当其启动时，自动装载 &#x2F;etc目录下的 named.conf 文件中定义的DNS分区数据库文件。</li>\n<li>Apache服务器进程配置文件是 httpd.conf 。</li>\n<li>在 Linux系统中，压缩文件后生成后缀为.gz文件的命令是 gzip 。</li>\n<li>在用vi编辑文件时，将文件内容存入test.txt文件中，应在命令模式下键入 ：w test.txt 。</li>\n<li>可以在标准输出上显示整年日历的命令及参数是 cal -y 。</li>\n<li>在shell编程时，使用方括号表示测试条件的规则是：方括号两边必须有 空格 。</li>\n<li>检查已安装的文件系统&#x2F;dev&#x2F;had5是否正常，若检查有错，则自动修复，其命令及参数是 fsck –a &#x2F;dev&#x2F;had5 。</li>\n<li>在Windows9.x环境下共享Unix&#x2F;Linux中的用户目录的一个工具是 Samba服务器 。</li>\n<li>系统管理员的职责是进行系统资源管理、系统性能管理、设备管理、安全管理和 系统性能监测 。</li>\n<li>在Linux系统中，测试DNS服务器是否能够正确解析域名的的客户端命令，使用命令 nslookup 。</li>\n<li>在Linux系统下，第二个IDE通道的硬盘（从盘）被标识为 hdb 。</li>\n<li>当系统管理员需升级内核版本和改变系统硬件配置时，应 重新编译内核 。</li>\n<li>如果只是要修改系统的IP地址，应修改 &#x2F;etc&#x2F;rc.d&#x2F;rc.inet1 配置文件。</li>\n<li>当LAN内没有条件建立DNS服务器，但又想让局域网内的用户可以使用计算机名互相访问时，应配置 &#x2F;etc&#x2F;hosts 文件。</li>\n<li>在vi编辑环境下，使用 Esc键 进行模式转换。</li>\n<li>Slackware Linux 9.0通常使用 ext3 文件系统，系统的全部磁盘块由 四 部分组成。</li>\n<li>将&#x2F;home&#x2F;stud1&#x2F;wang目录做归档压缩，压缩后生成wang.tar.gz文件，并将此文件保存到&#x2F;home目录下，实现此任务的tar命令格式 tar zcvf &#x2F;home&#x2F;wang.tar.gz &#x2F;home&#x2F;stud1&#x2F;wang 。</li>\n<li>管道就是将前一个命令的 标准输出 作为后一个命令的 标准输入 。</li>\n<li>在使用手工的方法配置网络时，可通过修改 &#x2F;etc&#x2F;HOSTNAME 文件来改变主机名，若要配置该计算机的域名解析客户端，需配置 &#x2F;etc&#x2F;resolv.conf 文件。</li>\n<li>启动进程有手动启动和调度启动两种方法，其中调度启动常用的命令为 at 、 batch 和 crontab 。</li>\n<li>test.bns.com.cn的域名是 bns.com.cn ，如果要配置一域名服务器，应在 named.conf 文件中定义DNS数据库的工作目录。</li>\n<li>Sendmail邮件系统使用的两个主要协议是： SMTP 和 POP ，前者用来发送邮件,后者用来接收邮件。</li>\n<li>DHCP是动态主机配置协议的简称，其作用是：为网络中的主机分配IP地址 。</li>\n<li>目前代理服务器使用的软件包有很多种，教材中使用的是 squid 。</li>\n<li>rm命令可删除文件或目录，其主要差别就是是否使用递归开关 -r或-R 。</li>\n<li>mv 命令可以移动文件和目录，还可以为文件和目录重新命名。</li>\n<li>路由选择协议（RIP）的跳数表示到达目的地之前必须通过的 网关 数，RIP接受的最长距离是 15跳 。</li>\n<li>ping命令用于测试网络的连通性，ping命令通过 ICMP 协议（internet控制信息协议）来实现。</li>\n<li>nfs 协议用于实现Unix（&#x2F;linux）主机之间的文件系统共享。</li>\n<li>在Linux操作系统中，设备都是通过特殊的 文件 来访问。</li>\n<li>shell不仅是 用户命令的解释器 ，它同时也是一种功能强大的编程语言。 bash是Linux的缺省shell。</li>\n<li>用 &gt;;&gt;; 符号将输出重定向内容附加在原文的后面。</li>\n<li>增加一个用户的命令是：adduser 或useradd 。 83 进行字符串查找，使用grep命令。</li>\n<li>使用 * 每次匹配若干个字符。</li>\n<li>&#x2F;sbin 目录用来存放系统管理员使用的管理程序。</li>\n</ol>\n<p>二．单项选择题: 1. 下面的网络协议中，面向连接的的协议是： A 。 A 传输控制协议 B 用户数据报协议 C 网际协议 D 网际控制报文协议</p>\n<ol start=\"2\">\n<li><p>在&#x2F;etc&#x2F;fstab文件中指定的文件系统加载参数中， D 参数一般用于CD-ROM等移动设备。 A defaults B sw C rw和ro D noauto</p>\n</li>\n<li><p>Linux文件权限一共10位长度，分成四段，第三段表示的内容是 C 。 A 文件类型 B 文件所有者的权限 C 文件所有者所在组的权限 D 其他用户的权限</p>\n</li>\n<li><p>终止一个前台进程可能用到的命令和操作 B 。 A kill B ;+C C shut down D halt</p>\n</li>\n</ol>\n<p>5．在使用mkdir命令创建新的目录时，在其父目录不存在时先创建父目录的选项是 D 。 A -m B -d C -f D -p</p>\n<ol start=\"6\">\n<li><p>下面关于i节点描述错误的是 A 。（inode是一种数据结构，vfs中描述文件的相关参数？？） A i节点和文件是一一对应的 B i节点能描述文件占用的块数 C i节点描述了文件大小和指向数据块的指针 D 通过i节点实现文件的逻辑结构和物理结构的转换</p>\n</li>\n<li><p>一个文件名字为rr.Z，可以用来解压缩的命令是： D 。 A tar B gzip C compress D uncompress</p>\n</li>\n<li><p>具有很多C语言的功能，又称过滤器的是 C 。 A csh B tcsh C awk　　（awk详解） D sed</p>\n</li>\n<li><p>一台主机要实现通过局域网与另一个局域网通信，需要做的工作是 C 。 A 配置域名服务器 B 定义一条本机指向所在网络的路由 C 定义一条本机指向所在网络网关的路由 D 定义一条本机指向目标网络网关的路由</p>\n</li>\n<li><p>建立动态路由需要用到的文件有 D 。 A &#x2F;etc&#x2F;hosts B &#x2F;etc&#x2F;HOSTNAME C &#x2F;etc&#x2F;resolv.conf D &#x2F;etc&#x2F;gateways</p>\n</li>\n<li><p>局域网的网络地址192.168.1.0&#x2F;24，局域网络连接其它网络的网关地址是192.168.1.1。主机192.168.1.20访问172.16.1.0&#x2F;24网络时，其路由设置正确的是 B 。 A route add –net 192.168.1.0 gw 192.168.1.1 netmask 255.255.255.0 metric 1 B route add –net 172.16.1.0 gw 192.168.1.1 netmask 255.255.255.255 metric 1 C route add –net 172.16.1.0 gw 172.16.1.1 netmask 255.255.255.0 metric 1 D route add default 192.168.1.0 netmask 172.168.1.1 metric 1</p>\n</li>\n<li><p>下列提法中，不属于ifconfig命令作用范围的是 D 。 A 配置本地回环地址 B 配置网卡的IP地址 C 激活网络适配器 D 加载网卡到内核中</p>\n</li>\n<li><p>下列关于链接描述，错误的是 B 。 A 硬链接就是让链接文件的i节点号指向被链接文件的i节点 B 硬链接和符号连接都是产生一个新的i节点 C 链接分为硬链接和符号链接 D 硬连接不能链接目录文件</p>\n</li>\n<li><p>在局域网络内的某台主机用ping命令测试网络连接时发现网络内部的主机都可以连同，而不能与公网连通，问题可能是 C。 A 主机IP设置有误 B 没有设置连接局域网的网关 C 局域网的网关或主机的网关设置有误 D 局域网DNS服务器设置有误</p>\n</li>\n<li><p>下列文件中，包含了主机名到IP地址的映射关系的文件是： B 。 A &#x2F;etc&#x2F;HOSTNAME B &#x2F;etc&#x2F;hosts C &#x2F;etc&#x2F;resolv.conf D &#x2F;etc&#x2F;networks</p>\n</li>\n<li><p>不需要编译内核的情况是 D 。 A 删除系统不用的设备驱动程序时 B 升级内核时 C 添加新硬件时 D 将网卡激活</p>\n</li>\n<li><p>在shell中变量的赋值有四种方法，其中，采用name&#x3D;12的方法称 A 。 A 直接赋值 B使用read命令 C 使用命令行参数 D使用命令的输出</p>\n</li>\n<li><p>D 命令可以从文本文件的每一行中截取指定内容的数据。 A cp B dd C fmt D cut</p>\n</li>\n<li><p>下列不是Linux系统进程类型的是 D 。 A 交互进程 B 批处理进程 C 守护进程 D 就绪进程（进程状态）</p>\n</li>\n</ol>\n<p>20．配置Apache 1.3.19服务器需要修改的配置文件为___A______ A httpd.conf B access.conf C srm.conf D named.conf</p>\n<ol start=\"21\">\n<li>内核不包括的子系统是 D 。 A 进程管理系统 B 内存管理系统 C I&#x2F;O管理系统 D硬件管理系统</li>\n</ol>\n<p>22． 在日常管理中，通常CPU会影响系统性能的情况是： A 。 A CPU已满负荷地运转 B CPU的运行效率为30% C CPU的运行效率为50% D CPU的运行效率为80% 23． 若一台计算机的内存为128MB，则交换分区的大小通常是 C 。 A 64MB B 128MB C 256MB D 512MB 24． 在安装Linux的过程中的第五步是让用户选择安装方式，如果用户希望安装部分组件（软件程序），并在选择好后让系统自动安装，应该选择的选项是 D 。 A full B expert C newbie D menu 25． Linux有三个查看文件的命令，若希望在查看文件内容过程中可以用光标上下移动来查看文件内容，应使用 C 命令。 A cat B more C less D menu 26． 下列信息是某系统用ps –ef命令列出的正在运行的进程， D 进程是运行Internet超级服务器，它负责监听Internet sockets上的连接，并调用合适的服务器来处理接收的信息。 A root 1 4.0 0.0 344 204? S 17:09 0:00 init B root 2 0.0 0.1 2916 1520? S 17:09 0:00 &#x2F;sbin&#x2F;getty C root 3 0.0 0.2 1364 632? S 17:09 0:00 &#x2F;usr&#x2F;sbin&#x2F;syslogd D root 4 0.0 1344 1204? S 17:09 0:10 &#x2F;usr&#x2F;sbin&#x2F;inetd 27．在TCP&#x2F;IP模型中，应用层包含了所有的高层协议，在下列的一些应用协议中， B 是能够实现本地与远程主机之间的文件传输工作。 A telnet B FTP C SNMP D NFS 28．当我们与某远程网络连接不上时，就需要跟踪路由查看，以便了解在网络的什么位置出现了问题，满足该目的的命令是 C 。 A ping B ifconfig C traceroute D netstat 29．对名为fido的文件用chmod 551 fido 进行了修改，则它的许可权是 D 。 A -rwxr-xr-x B -rwxr–r– C -r–r–r– D -r-xr-x—x 30． 在i节点表中的磁盘地址表中，若一个文件的长度是从磁盘地址表的第1块到第11块，则该文件共占有 B 块号。 A 256 B 266 C 11 D 256×10 31． 用ls –al 命令列出下面的文件列表， D 文件是符号连接文件。 A -rw-rw-rw- 2 hel-s users 56 Sep 09 11:05 hello B -rwxrwxrwx 2 hel-s users 56 Sep 09 11:05 goodbey C drwxr–r– 1 hel users 1024 Sep 10 08:10 zhang D lrwxr–r– 1 hel users 2024 Sep 12 08:12 cheng 32． DNS域名系统主要负责主机名和 A 之间的解析。 A IP地址 B MAC地址 C 网络地址 D 主机别名 33． WWW服务器是在Internet上使用最为广泛，它采用的是 B 结构。 A 服务器&#x2F;工作站 B B&#x2F;S C 集中式 D 分布式 34．Linux系统通过 C 命令给其他用户发消息。 A less B mesg y C write D echo to [ 注：mesg [yn] 所有使用者 决定是否允许其他人传讯息到自己的终端机介面 ] 35．NFS是 C 系统。 A 文件 B 磁盘 C 网络文件 D 操作 36． B 命令可以在Linux的安全系统中完成文件向磁带备份的工作。 A cp B tr C dir D cpio [注：如果用 echo $PATH 或者 echo $LD_LIBRARY_PATH 等类似的命令来显示路径信息的话，我们看到的将会是一大堆用冒号连接在一起的路径， tr 命令可以把这些冒号转换为回车，这样，这些路径就具有很好的可读性了： echo $PATH tr “:” “\\n”] 37．Linux文件系统的文件都按其作用分门别类地放在相关的目录中，对于外部设备文件，一般应将其放在 C 目录中。 A &#x2F;bin B &#x2F;etc C &#x2F;dev D &#x2F;lib 38．在重新启动Linux系统的同时把内存中的信息写入硬盘，应使用 D 命令实现。 A # reboot B # halt C # reboot D # shutdown –r now 39．网络管理具备以下几大功能：配置管理、 A 、性能管理、安全管理和计费管理等。 A 故障管理 B 日常备份管理 C 升级管理 D 发送邮件 40．关于代理服务器的论述，正确的是 A 。 A 使用internet上已有的公开代理服务器，只需配置客户端。 B 代理服务器只能代理客户端http的请求。 C 设置好的代理服务器可以被网络上任何主机使用。 D 使用代理服务器的客户端没有自己的ip地址。 41.关闭linux系统（不重新启动）可使用命令 B 。 A Ctrl+Alt+Del B halt C shutdown -r now D reboot 42．实现从IP地址到以太网MAC地址转换的命令为： C 。 A ping B ifconfig C arp D traceroute 43．在vi编辑器中的命令模式下，键入 B 可在光标当前所在行下添加一新行。 A <code>&lt;a&gt;</code>; B<code>&lt;o&gt;</code>; C `_``; D A 44．在vi编辑器中的命令模式下，删除当前光标处的字符使用 A 命令。 A ; B ;; C ; D ;; 45．在vi编辑器中的命令模式下，重复上一次对编辑的文本进行的操作，可使用 C 命令。 A 上箭头 B 下箭头 C &lt;.&gt;; D &lt;*&gt;; 46．用命令ls -al显示出文件ff的描述如下所示，由此可知文件ff的类型为 A 。 -rwxr-xr– 1 root root 599 Cec 10 17:12 ff A 普通文件 B 硬链接 C 目录 D 符号链接 47．删除文件命令为： D 。 A mkdir B rmdir C mv D rm 48．在下列的名称中，不属于DNS服务器类型的是：____C_____ A Primary Master Server B Secondary Master Server C samba D Cache_only Server 49．网络管理员对WWW服务器进行访问、控制存取和运行等控制，这些控制可在 A 文件中体现。 A httpd.conf B lilo.conf C inetd.conf D resolv.conf 50．邮件转发代理也称邮件转发服务器，它可以使用SMTP协议，也可以使用 C 协议。 A FTP B TCP C UUCP D POP 51．启动samba服务器进程，可以有两种方式：独立启动方式和父进程启动方式，其中前者是在 C 文件中以独立进程方式启动。 A &#x2F;usr&#x2F;sbin&#x2F;smbd B &#x2F;usr&#x2F;sbin&#x2F;nmbd C rc.samba D &#x2F;etc&#x2F;inetd.conf 52．DHCP是动态主机配置协议的简称，其作用是可以使网络管理员通过一台服务器来管理一个网络系统，自动地为一个网络中的主机分配___D______地址。 A 网络 B MAC C TCP D IP 53．为了保证在启动服务器时自动启动DHCP进程，应将 A文件中的dhcpd&#x3D;no改为dhcpd&#x3D;yes。 A rc.inet1 B lilo.conf C inetd.conf D httpd.conf 54．对文件进行归档的命令为 D 。 A dd B cpio C gzip D tar 55．改变文件所有者的命令为 C 。 A chmod B touch C chown D cat 56．在给定文件中查找与设定条件相符字符串的命令为： A 。 A grep B gzip C find D sort 57．建立一个新文件可以使用的命令为 D 。 A chmod B more C cp D touch(指令改变档案的时间记录。) 58．在下列命令中，不能显示文本文件内容的命令是： D 。 A more B less C tail D join 59．在使用匿名登录ftp时，用户名为 B 。 A users B anonymous C root D guest 60．在实际操作中，想了解命令logname 的用法，可以键入 D 得到帮助。 A logname –man B logname&#x2F;？ C help logname D logname –help 61．如果LILO被安装在MBR，使用 A 命令即可卸载LILO。 A lilo –u B lilo –c C lilo –v D lilo -V 62．当用命令ls –al查看文件和目录时，欲观看卷过屏幕的内容，应使用组合键 D 。 A Shift+Home B Ctrl+ PgUp C Alt+ PgDn D Shift+ PgUp 63．mc是UNIX风格操作系统的 C 。 A 文件编辑器&#x2F;程序编译器 B 配置网络的窗口工具 C 目录浏览器&#x2F;文件管理器 D Samba服务器管理工具 64．i节点是一个 D 长的表，表中包含了文件的相关信息。 A 8字节 B 16字节 C 32字节 D 64字节 65．文件权限读、写、执行的三种标志符号依次是 A 。 A rwx B xrw C rdx D srw 66．Linux 文件名的长度不得超过 C 个字符。 A 64 B 128 C 256 D 512 67．进程有三种状态： C 。 A 准备态、执行态和退出态 B 精确态、模糊态和随机态 C 运行态、就绪态和等待态 D 手工态、自动态和自由态 68． 从后台启动进程，应在命令的结尾加上符号 A 。 A &amp; B @ C # D $ 69． B 不是邮件系统的组成部分。 A 用户代理 B 代理服务器 C 传输代理 D 投递代理 70．在Shell脚本中，用来读取文件内各个域的内容并将其赋值给Shell变量的命令是 D 。 A fold B join C tr D read 71．crontab文件由六个域组成，每个域之间用空格分割，其排列如下： B 。 A MIN HOUR DAY MONTH YEAR COMMAND B MIN HOUR DAY MONTH DAYOFWEEK COMMAND C COMMAND HOUR DAY MONTH DAYOFWEEK D COMMAND YEAR MONTH DAY HOUR MIN crontab命令：实现程序定时运行 72．用ftp进行文件传输时，有两种模式： C 。 A Word和binary B .txt和Word Document C ASCII和binary D ASCII和Rich Text Format 73．某文件的组外成员的权限为只读；所有者有全部权限；组内的权限为读与写，则该文件的权限为 D 。 A 467 B 674 C 476 D 764 74．在DNS系统测试时，设named进程号是53，命令 D 通知进程重读配置文件。 A kill –USR2 53 B kill –USR1 53 C kill -INT 63 D kill –HUP 53 75．Apache服务器默认的接听连接端口号是 C 。 A 1024 B 800 C 80 (http)D 8 76．PHP和MySQL的联合使用解决了 C 。 A 在Proxy上处理数据库的访问问题 B 在WWW服务器上处理黑客的非法访问问题 C 在WWW服务器上处理数据库的访问问题 D 在Sendmail邮件系统上处理数据库的访问问题 77．OpenSSL是一个 A 。 A 加密软件 B 邮件系统 C 数据库管理系统 D 嵌入式脚本编程语言 78．Samba服务器的配置文件是 D 。 A httpd.conf B inetd.conf C rc.samba D smb.conf 79．关于DNS服务器，叙述正确的是 D 。 A DNS服务器配置不需要配置客户端 B 建立某个分区的DNS服务器时只需要建立一个主DNS服务器 C 主DNS服务器需要启动named进程，而辅DNS服务器不需要 D DNS服务器的root.cache文件包含了根名字服务器的有关信息 80．退出交互模式的shell，应键入 C 。 A ; B ^q C exit D quit 81．将Windows C:盘(hda1)安装在Linux文件系统的&#x2F;winsys目录下，命令是 B 。 A <a href=\"mailto:&#114;&#111;&#x6f;&#116;&#64;&#x6c;&#x30;&#52;&#x2e;&#x65;&#x64;&#x75;&#x2e;&#99;&#110;\">&#114;&#111;&#x6f;&#116;&#64;&#x6c;&#x30;&#52;&#x2e;&#x65;&#x64;&#x75;&#x2e;&#99;&#110;</a>:<del>#mount dev&#x2F;had1 &#x2F;winsys B <a href=\"mailto:&#114;&#x6f;&#111;&#x74;&#x40;&#x6c;&#48;&#52;&#46;&#101;&#x64;&#x75;&#x2e;&#99;&#110;\">&#114;&#x6f;&#111;&#x74;&#x40;&#x6c;&#48;&#52;&#46;&#101;&#x64;&#x75;&#x2e;&#99;&#110;</a>:</del>#mount &#x2F;dev&#x2F;had1 &#x2F;winsys C <a href=\"mailto:&#114;&#x6f;&#x6f;&#116;&#x40;&#x6c;&#x30;&#x34;&#46;&#101;&#100;&#117;&#46;&#x63;&#x6e;\">&#114;&#x6f;&#x6f;&#116;&#x40;&#x6c;&#x30;&#x34;&#46;&#101;&#100;&#117;&#46;&#x63;&#x6e;</a>:<del>#mount &#x2F;dev&#x2F;had1 winsys D <a href=\"mailto:&#114;&#x6f;&#x6f;&#116;&#64;&#x6c;&#48;&#52;&#x2e;&#101;&#100;&#x75;&#x2e;&#99;&#110;\">&#114;&#x6f;&#x6f;&#116;&#64;&#x6c;&#48;&#52;&#x2e;&#101;&#100;&#x75;&#x2e;&#99;&#110;</a>:</del>#mount dev&#x2F;had1 winsys 82．设超级用户root当前所在目录为：&#x2F;usr&#x2F;local，键入cd命令后，用户当前所在目录为 B 。 A &#x2F;home B &#x2F;root C &#x2F;home&#x2F;root D &#x2F;usr&#x2F;local 83．字符设备文件类型的标志是 B 。 A p B c C s D l 84．将光盘CD-ROM（hdc）安装到文件系统的&#x2F;mnt&#x2F;cdrom目录下的命令是 C 。 A mount &#x2F;mnt&#x2F;cdrom B mount &#x2F;mnt&#x2F;cdrom &#x2F;dev&#x2F;hdc C mount &#x2F;dev&#x2F;hdc &#x2F;mnt&#x2F;cdrom D mount &#x2F;dev&#x2F;hdc 85．将光盘&#x2F;dev&#x2F;hdc卸载的命令是 C 。 A umount &#x2F;dev&#x2F;hdc B unmount &#x2F;dev&#x2F;hdc C umount &#x2F;mnt&#x2F;cdrom &#x2F;dev&#x2F;hdc D unmount &#x2F;mnt&#x2F;cdrom &#x2F;dev&#x2F;hdc 86．在&#x2F;home&#x2F;stud1&#x2F;wang目录下有一文件file，使用 D 可实现在后台执行命令，此命令将file文件中的内容输出到file.copy文件中。 A cat file &gt;;file.copy B cat &gt;;file.copy C cat file file.copy &amp; D cat file &gt;;file.copy &amp; 87．在DNS配置文件中，用于表示某主机别名的是： B 。 A NS B CNAME C NAME D CN 88．可以完成主机名与IP地址的正向解析和反向解析任务的命令是： A 。 A nslookup B arp C ifconfig D dnslook 89．下列变量名中有效的shell变量名是： C 。 A -2-time B _2$3 C trust_no_1 D 2004file 90．qmail是 B 。 A 收取邮件的协议 B 邮件服务器的一种 C 发送邮件的协议 D 邮件队列 91．已知某用户stud1，其用户目录为&#x2F;home&#x2F;stud1。分页显示当前目录下的所有文件的文件或目录名、用户组、用户、文件大小、文件或目录权限、文件创建时间等信息的命令是 D 。 A more ls –al B more –al ls C more &lt; ls –al D ls –al more 92．关于进程调度命令， B 是不正确的。at–定期执行程序的调度命令 A 当日晚11点执行clear命令，使用at命令：at 23:00 today clear B 每年1月1日早上6点执行date命令，使用at命令：at 6am Jan 1 date C 每日晚11点执行date命令，crontab文件中应为：0 23 * * * date D 每小时执行一次clear命令，crontab文件中应为：0 *&#x2F;1 * * * clear 93．系统中有用户user1和user2，同属于users组。在user1用户目录下有一文件file1，它拥有644的权限，如果user2用户想修改user1用户目录下的file1文件，应拥有 B 权限。 A 744 B 664 C 646 D 746 94．如果想配置一台匿名ftp服务器，应修改 C 文件。 A &#x2F;etc&#x2F;gateway B &#x2F;etc&#x2F;ftpservers C &#x2F;etc&#x2F;ftpusers D &#x2F;etc&#x2F;inetd.conf 95．Samba服务器的进程由B 两部分组成 。 A named和sendmail B smbd和nmbd C bootp和dhcpd D httpd和squid 96．要配置NFS服务器，在服务器端主要配置 C 文件。 A &#x2F;etc&#x2F;rc.d&#x2F;rc.inet1 B &#x2F;etc&#x2F;rc.d&#x2F;rc.M C &#x2F;etc&#x2F;exports D &#x2F;etc&#x2F;rc.d&#x2F;rc.S 97．为保证在启动服务器时自动启动DHCP进程，应对 B 文件进行编辑。 A &#x2F;etc&#x2F;rc.d&#x2F;rc.inet2 B &#x2F;etc&#x2F;rc.d&#x2F;rc.inet1 C &#x2F;etc&#x2F;dhcpd.conf D &#x2F;etc&#x2F;rc.d&#x2F;rc.S 98．在配置代理服务器时，若设置代理服务器的工作缓存为64MB，配置行应为 D 。 A cache 64MB B cache_dir ufs &#x2F;usr&#x2F;local&#x2F;squid&#x2F;cache 10000 16 256 C cache_ mgr 64MB D cache_ mem 64MB 99．安全管理涉及的问题包括保证网络管理工作可靠进行的安全问题和保护网络用户及网络管理对象问题。 C 属于安全管理的内容。 A 配置设备的工作参数 B 收集与网络性能有关的数据 C 控制和维护访问权限 D 监测故障 100．以下命令对中，正确的是： B 。 A ls和sl B cat和tac C more和erom D exit和tixe cat是显示文件夹的命令，这个大家都知道，tac是cat的倒写，意思也和它是相反的。cat是从第一行显示到最后一行，而tac是从最后一行显示到第一行，而rev 则是从最后一个字符显示到第一个字符 101． B 命令是在vi编辑器中执行存盘退出。 A :q B ZZ C :q! D :WQ 102．下列关于&#x2F;etc&#x2F;fstab文件描述，正确的是 D 。 A fstab文件只能描述属于linux的文件系统 B CD_ROM和软盘必须是自动加载的 C fstab文件中描述的文件系统不能被卸载 D 启动时按fstab文件描述内容加载文件系统 103．通过文件名存取文件时，文件系统内部的操作过程是通过 C 。 A 文件在目录中查找文件数据存取位置。B 文件名直接找到文件的数据，进行存取操作。 C 文件名在目录中查找对应的I节点，通过I节点存取文件数据。 D 文件名在中查找对应的超级块，在超级块查找对应i节点，通过i节点存取文件数据 104．Linux将存储设备和输入&#x2F;输出设备均看做文件来操作， C 不是以文件的形式出现。 A 目录 B 软链接 C i节点表 D 网络适配器 105．关于i节点和超级块，下列论述不正确的是 B 。 A i节点是一个长度固定的表 B 超级块在文件系统的个数是唯一的 C i节点包含了描述一个文件所必需的全部信息 D 超级块记录了i节点表和空闲块表信息在磁盘中存放的位置 106． D 设备是字符设备。 A hdc B fd0 C hda1 D tty1(A,B,C为块设备) 107． B 目录存放着Linux的源代码。 A &#x2F;etc B &#x2F;usr&#x2F;src C &#x2F;usr D &#x2F;home 108．关于文件系统的安装和卸载，下面描述正确的是 A 。 A 如果光盘未经卸载，光驱是打不开的 B 安装文件系统的安装点只能是&#x2F;mnt下 C 不管光驱中是否有光盘，系统都可以安装CD-ROM设备 D mount &#x2F;dev&#x2F;fd0 &#x2F;floppy 此命令中目录&#x2F;floppy是自动生成的 109． B 不是进程和程序的区别。 A 程序是一组有序的静态指令，进程是一次程序的执行过程 B 程序只能在前台运行，而进程可以在前台或后台运行 C 程序可以长期保存，进程是暂时的 D 程序没有状态，而进程是有状态的 110．文件exer1的访问权限为rw-r–r–，现要增加所有用户的执行权限和同组用户的写权限，下列命令正确的是 A 。 A chmod a+x g+w exer1 B chmod 765 exer1 C chmod o+x exer1 D chmod g+w exer1 111．有关归档和压缩命令，下面描述正确的是 C 。 A 用uncompress命令解压缩由compress命令生成的后缀为.zip的压缩文件 B unzip命令和gzip命令可以解压缩相同类型的文件 C tar归档且压缩的文件可以由gzip命令解压缩 D tar命令归档后的文件也是一种压缩文件 112．不是shell具有的功能和特点的是 C 。 A 管道 B 输入输出重定向 C 执行后台进程 D 处理程序命令 113．下列对shell变量FRUIT操作，正确的是： C 。 A 为变量赋值：$FRUIT&#x3D;apple B 显示变量的值：fruit&#x3D;apple C 显示变量的值：echo $FRUIT D 判断变量是否有值：[ -f “$FRUIT” ] 三．简答题： 1．简述Linux文件系统通过i节点把文件的逻辑结构和物理结构转换的工作过程。 参考答案： Linux通过i节点表将文件的逻辑结构和物理结构进行转换。 i 节点是一个64字节长的表，表中包含了文件的相关信息，其中有文件的大小、文件所有者、文件的存取许可方式以及文件的类型等重要信息。在i节点表中最重要 的内容是磁盘地址表。在磁盘地址表中有13个块号，文件将以块号在磁盘地址表中出现的顺序依次读取相应的块。Linux文件系统通过把i节点和文件名进行 连接，当需要读取该文件时，文件系统在当前目录表中查找该文件名对应的项，由此得到该文件相对应的i节点号，通过该i节点的磁盘地址表把分散存放的文件物 理块连接成文件的逻辑结构。 2．简述进程的启动、终止的方式以及如何进行进程的查看。 参考答案： 在Linux中启动一个进程有手工启动和调度启动两种方式： （1）手工启动 用户在输入端发出命令，直接启动一个进程的启动方式。可以分为： ①前台启动：直接在SHELL中输入命令进行启动。 ②后台启动：启动一个目前并不紧急的进程，如打印进程。 （2）调度启动 系统管理员根据系统资源和进程占用资源的情况，事先进行调度安排，指定任务运行的时间和场合，到时候系统会自动完成该任务。 经常使用的进程调度命令为：at、batch、crontab。</p>\n<ol start=\"3\">\n<li>简述DNS进行域名解析的过程。 参考答案： 首先，客户端发出DNS请求翻译IP地址或主机名。DNS服务器在收到客户机的请求后： （1）检查DNS服务器的缓存，若查到请求的地址或名字，即向客户机发出应答信息； （2）若没有查到，则在数据库中查找，若查到请求的地址或名字，即向客户机发出应答信息； （3）若没有查到，则将请求发给根域DNS服务器，并依序从根域查找顶级域，由顶级查找二级域，二级域查找三级，直至找到要解析的地址或名字，即向客户机所在网络的DNS服务器发出应答信息，DNS服务器收到应答后现在缓存中存储，然后，将解析结果发给客户机。 （4）若没有找到，则返回错误信息。</li>\n</ol>\n<p>4．系统管理员的职责包括那些？管理的对象是什么？ 参考答案： 系统管理员的职责是进行系统资源管理、设备管理、系统性能管理、安全管理和系统性能监测。管理的对象是服务器、用户、服务器的进程及系统的各种资源等。 5．简述安装Slackware Linux系统的过程。 参考答案： （1）对硬盘重新分区。 （2）启动Linux系统（用光盘、软盘等）。 （3）建立Linux主分区和交换分区。（4）用setup命令安装Linux系统。 （5）格式化Linux主分区和交换分区（6）安装Linux软件包 （7）安装完毕，建立从硬盘启动Linux系统的LILO启动程序，或者制作一张启动Linux系统的软盘。重新启动Linux系统。 6．什么是静态路由，其特点是什么？什么是动态路由，其特点是什么？ 参考答案： 静态路由是由系统管理员设计与构建的路由表规定的路由。适用于网关数量有限的场合，且网络拓朴结构不经常变化的网络。其缺点是不能动态地适用网络状况的变化，当网络状况变化后必须由网络管理员修改路由表。 动态路由是由路由选择协议而动态构建的，路由协议之间通过交换各自所拥有的路由信息实时更新路由表的内容。动态路由可以自动学习网络的拓朴结构，并更新路由表。其缺点是路由广播更新信息将占据大量的网络带宽。 7．进程的查看和调度分别使用什么命令？ 参考答案： 进程查看的命令是ps和top。 进程调度的命令有at，crontab，batch，kill。 8．当文件系统受到破坏时，如何检查和修复系统？ 参考答案： 成功修复文件系统的前提是要有两个以上的主文件系统，并保证在修复之前首先卸载将被修复的文件系统。 使用命令fsck对受到破坏的文件系统进行修复。fsck检查文件系统分为5步，每一步检查系统不同部分的连接特性并对上一步进行验证和修改。在执行 fsck命令时，检查首先从超级块开始，然后是分配的磁盘块、路径名、目录的连接性、链接数目以及空闲块链表、i-node。 9．解释i节点在文件系统中的作用。 参考答案： 在linux文件系统中，是以块为单位存储信息的，为了找到某一个文件在存储空间中存放的位置，用i节点对一个文件进行索引。I节点包含了描述一个文件所必须的全部信息。所以i节点是文件系统管理的一个数据结构。 10．什么是符号链接，什么是硬链接？符号链接与硬链接的区别是什么？ 参考答案： 链接分硬链接和符号链接。 符号链接可以建立对于文件和目录的链接。符号链接可以跨文件系统，即可以跨磁盘分区。符号链接的文件类型位是l，链接文件具有新的i节点。 硬链接不可以跨文件系统。它只能建立对文件的链接，硬链接的文件类型位是－，且硬链接文件的i节点同被链接文件的i节点相同。 11．在对linux系统分区进行格式化时需要对磁盘簇（或i节点密度）的大小进行选择，请说明选择的原则。 参考答案： 磁盘簇（或i节点密度）是文件系统调度文件的基本单元。磁盘簇的大小，直接影响系统调度磁盘空间效率。当磁盘分区较大时，磁盘簇也应选得大些；当分区较小时，磁盘簇应选得小些。通常使用经验值。 12．简述网络文件系统NFS，并说明其作用。 参考答案： 网络文件系统是应用层的一种应用服务，它主要应用于Linux和Linux系统、Linux和Unix系统之间的文件或目录的共享。对于用户而言可以通过 NFS方便的访问远地的文件系统，使之成为本地文件系统的一部分。采用NFS之后省去了登录的过程，方便了用户访问系统资源。 13．某&#x2F;etc&#x2F;fstab文件中的某行如下： &#x2F;dev&#x2F;had5 &#x2F;mnt&#x2F;dosdata msdos defaults,usrquota 1 2 请解释其含义。 参考答案: （1）第一列：将被加载的文件系统名；（2）第二列：该文件系统的安装点； （3）第三列：文件系统的类型；（4）第四列：设置参数； （5）第五列：供备份程序确定上次备份距现在的天数； （6）第六列：在系统引导时检测文件系统的顺序。 14．Apache服务器的配置文件httpd.conf中有很多内容，请解释如下配置项： （1）MaxKeepAliveRequests 200 （2）UserDir public_html （3）DefaultType text&#x2F;plain （4）AddLanguare en.en （5）DocumentRoot“&#x2F;usr&#x2F;local&#x2F;httpd&#x2F;htdocs” （6）AddType application&#x2F;x-httpd-php.php.php.php4 参考答案: （1）允许每次连接的最大请求数目，此为200；（2）设定用户放置网页的目录； （3）设置服务器对于不认识的文件类型的预设格式； （4）设置可传送语言的文件给浏览器；（5）该目录为Apache放置网页的地方； （6）服务器选择使用php4。 15．某Linux主机的&#x2F;etc&#x2F;rc.d&#x2F;rc.inet1文件中有如下语句，请修正错误，并解释其内容。 &#x2F;etc&#x2F;rc.d&#x2F;rc.inet1： …… ROUTE add –net default gw 192.168.0.101 netmask 255.255.0.0 metric 1 ROUTE add –net 192.168.1.0 gw 192.168.0.250 netmask 255.255.0.0 metric 1 参考答案: 修正错误: （1）ROUTE应改为小写：route；（2）netmask 255.255.0.0应改为:netmask 255.255.255.0； （3）缺省路由的子网掩码应改为:netmask 0.0.0.0； （4）缺省路由必须在最后设定,否则其后的路由将无效。 解释内容: （1）route：建立静态路由表的命令；（2）add：增加一条新路由； （3）-net 192.168.1.0：到达一个目标网络的网络地址； （4）default：建立一条缺省路由；（5）gw 192.168.0.101：网关地址； （6）metric 1：到达目标网络经过的路由器数（跳数）。 16．试解释apache服务器以下配置的含义： （1）port 1080 （2）UserDir userdoc （3）DocumentRoot “&#x2F;home&#x2F;htdocs” （4）; Options Indexes FollowSymLinks AllowOverride None Order deny,allow deny from all allow from 192.168.1.5 ; （5）Server Type Standlone 参考答案： Apache服务器配置行含义如下： （1）将apache服务器的端口号设定为1080； （2）设定用户网页目录为userdoc； （3）设定apache服务器的网页根目录:&#x2F;home&#x2F;htdocs； （4）在此apache服务器上设定一个目录&#x2F;home&#x2F;htdocs&#x2F;inside，且此目录只允许IP地址为192.168.1.5的主机访问； （5）定义apache服务器以独立进程的方式运行。 17．简述使用ftp进行文件传输时的两种登录方式？它们的区别是什么？常用的ftp文件传输命令是什么？ 参考答案： （1）ftp有两种登录方式：匿名登录和授权登录。使用匿名登录时，用户名为：anonymous，密码为：任何合法email地址；使用授权登录时，用户名为用户在远程系统中的用户帐号，密码为用户在远程系统中的用户密码。 区别：使用匿名登录只能访问ftp目录下的资源，默认配置下只能下载；而授权登录访问的权限大于匿名登录，且上载、下载均可。 （2）ftp文件传输有两种文件传输模式：ASCII模式和binary模式。ASCII模式用来传输文本文件，其他文件的传输使用binary模式。 （3）常用的ftp文件传输命令为：bin、asc、put、get、mput、mget、prompt、bye_</p>\n","categories":["skills"],"tags":["面试","题库"]},{"title":"Linux ssh加固方案","url":"/2020/02/04/linux-ssh%E5%8A%A0%E5%9B%BA%E6%96%B9%E6%A1%88/","content":"<h2 id=\"1-设置密码有效期和长度\"><a href=\"#1-设置密码有效期和长度\" class=\"headerlink\" title=\"1. 设置密码有效期和长度\"></a>1. 设置密码有效期和长度</h2><p>默认配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@swq_test ~]<span class=\"comment\"># cat /etc/login.defs grep PASS_ grep -v &#x27;#&#x27;</span></span><br><span class=\"line\">PASS_MAX_DAYS    99999</span><br><span class=\"line\">PASS_MIN_DAYS    0</span><br><span class=\"line\">PASS_MIN_LEN    5</span><br><span class=\"line\">PASS_WARN_AGE    7</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p>加固方案</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 1.备份配置文件：</span><br><span class=\"line\"></span><br><span class=\"line\"># cp -a /etc/login.defs /etc/login.defs.default</span><br><span class=\"line\"></span><br><span class=\"line\"># 2.编辑配置文件并将相关参数改成如下</span><br><span class=\"line\"></span><br><span class=\"line\"># vi /etc/login.defs</span><br><span class=\"line\">PASS_MAX_DAYS 90</span><br><span class=\"line\">PASS_MIN_DAYS 6</span><br><span class=\"line\">PASS_MIN_LEN 8</span><br><span class=\"line\">PASS_WARN_AGE 30</span><br></pre></td></tr></table></figure>\n\n<p>参数说明： PASS_MAX_DAYS 密码有效期 PASS_MIN_DAYS 修改密码的最短期限 PASS_MIN_LEN 密码最短长度 PASS_WARN_AGE 密码过期提醒</p>\n<h2 id=\"2-密码复杂度\"><a href=\"#2-密码复杂度\" class=\"headerlink\" title=\"2. 密码复杂度\"></a>2. 密码复杂度</h2><p>默认配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@swq_test ~]# cat /etc/pam.d/system-auth  grep  &quot;pam_pwquality.so try_first_pass local_users_only retry=3 authtok_type=&quot;</span><br><span class=\"line\">password    requisite     pam_pwquality.so try_first_pass local_users_only retry=3 authtok_type=</span><br></pre></td></tr></table></figure>\n\n<p>加固方案</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.备份配置文件：</span><br><span class=\"line\"># cp -a /etc/pam.d/system-auth /etc/pam.d/system-auth.default</span><br><span class=\"line\">2.编辑配置文件</span><br><span class=\"line\"># vi /etc/pam.d/system-auth</span><br><span class=\"line\">将password    requisite     pam_pwquality.so try_first_pass local_users_only retry=3 authtok_type=</span><br><span class=\"line\"> 注释并在其下面新增1行 password requisite pam_cracklib.so try_first_pass minlen=8 difok=5 dcredit=-1 lcredit=-1 ocredit=-1 retry=1 type= </span><br><span class=\"line\">3.保存配置文件</span><br></pre></td></tr></table></figure>\n\n<p>备注: try_first_pass而当pam_unix验证模块与password验证类型一起使用时，该选项主要用来防止用户新设定的密码与以前的旧密码相同。 minlen&#x3D;8：最小长度8位 difok&#x3D;5:新、旧密码最少5个字符不同 dcredit&#x3D;-1：最少1个数字 lcredit&#x3D;-1：最少1个小写字符，（ucredit&#x3D;-1:最少1个大写字符) ocredit&#x3D;-1：最少1个特殊字符 retry&#x3D;1:1次错误后返回错误信息 type&#x3D;xxx：此选项用来修改缺省的密码提示文本</p>\n<h2 id=\"3-设置会话超时时间\"><a href=\"#3-设置会话超时时间\" class=\"headerlink\" title=\"3. 设置会话超时时间\"></a>3. 设置会话超时时间</h2><p>默认配置 无 加固方案</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.备份配置文件：</span><br><span class=\"line\"># cp -a /etc/profile /etc/profile.default</span><br><span class=\"line\">2.编辑配置文件：</span><br><span class=\"line\">vi /etc/profile</span><br><span class=\"line\">在文件的末尾添加参数 </span><br><span class=\"line\">export TMOUT=300</span><br><span class=\"line\">3.保存配置文件</span><br></pre></td></tr></table></figure>\n\n<p>备注： 五分钟不操作会中断会话</p>\n<h2 id=\"4-设置登陆失败锁定\"><a href=\"#4-设置登陆失败锁定\" class=\"headerlink\" title=\"4. 设置登陆失败锁定\"></a>4. 设置登陆失败锁定</h2><p>默认配置 无 加固方案</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.备份配置文件</span><br><span class=\"line\">2.编辑配置文件：</span><br><span class=\"line\"># vi /etc/pam.d/system-auth</span><br><span class=\"line\">在# User changes will be destroyed the next time authconfig is run.行的下面，添加</span><br><span class=\"line\">auth       required     pam_tally2.so deny=5 unlock_time=1800 even_deny_root root_unlock_time=1800</span><br><span class=\"line\">3.保存配置文件</span><br></pre></td></tr></table></figure>\n\n<p>备注: 通过终端登录，5次登录失败后锁定账号30分钟，锁定期间此账号无法再次登录。</p>\n<h2 id=\"5-禁止-Root-账号远程登陆\"><a href=\"#5-禁止-Root-账号远程登陆\" class=\"headerlink\" title=\"5.禁止 Root 账号远程登陆\"></a>5.禁止 Root 账号远程登陆</h2><p>默认配置:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># cat /etc/ssh/sshd_config grep PermitRootLogin</span><br><span class=\"line\">#PermitRootLogin yes</span><br></pre></td></tr></table></figure>\n\n<p>加固方案</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.备份配置文件</span><br><span class=\"line\"># cp -a /etc/ssh/sshd_config /etc/ssh/sshd_config.default</span><br><span class=\"line\">2.编辑配置文件</span><br><span class=\"line\">vi /etc/ssh/sshd_config</span><br><span class=\"line\">将配置参数#PermitRootLogin yes改成PermitRootLogin no</span><br><span class=\"line\">3.保存配置文件</span><br><span class=\"line\">4.重启ssh服务</span><br><span class=\"line\"># /etc/init.d/sshd restart</span><br></pre></td></tr></table></figure>\n\n<p>备注： 若需要使用 root 用户，可通过<code>su</code>切换到 root 用户</p>\n<h2 id=\"6-修改-ssh-默认端口\"><a href=\"#6-修改-ssh-默认端口\" class=\"headerlink\" title=\"6. 修改 ssh 默认端口\"></a>6. 修改 ssh 默认端口</h2><p>默认配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># cat /etc/ssh/sshd_configgrep Port</span><br><span class=\"line\">Port 22</span><br></pre></td></tr></table></figure>\n\n<p>加固方案</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.备份配置文件</span><br><span class=\"line\"># cp -a /etc/ssh/sshd_config /etc/ssh/sshd_config.default</span><br><span class=\"line\">2.编辑配置文件</span><br><span class=\"line\">vi /etc/ssh/sshd_config</span><br><span class=\"line\">将配置参数Port 22改成Port 60022</span><br><span class=\"line\">3.保存配置文件</span><br><span class=\"line\">4.重启ssh服务</span><br><span class=\"line\"># /etc/init.d/sshd restart</span><br></pre></td></tr></table></figure>\n\n<p>备注： 修改后 ssh 登陆需要指定端口 60022</p>\n","categories":["skills"],"tags":["运维","Linux"]},{"title":"Harbor私有镜像仓库搭建","url":"/2020/02/19/harbor%E7%A7%81%E6%9C%89%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93%E6%90%AD%E5%BB%BA/","content":"<h1 id=\"Harbor私有镜像仓库搭建\"><a href=\"#Harbor私有镜像仓库搭建\" class=\"headerlink\" title=\"Harbor私有镜像仓库搭建\"></a>Harbor私有镜像仓库搭建</h1><h2 id=\"1-harbor-介绍\"><a href=\"#1-harbor-介绍\" class=\"headerlink\" title=\"1. harbor 介绍\"></a>1. harbor 介绍</h2><p>Docker容器应用的开发和运行离不开可靠的镜像管理，虽然Docker官方也提供了公共的镜像仓库，但是从安全和效率等方面考虑，部署我们私有环境内的Registry也是非常必要的。Harbor是由VMware公司开源的企业级的Docker Registry管理项目，它包括权限管理(RBAC)、LDAP、日志审核、管理界面、自我注册、镜像复制和中文支持等功能</p>\n<h2 id=\"2-docker-ce-安装\"><a href=\"#2-docker-ce-安装\" class=\"headerlink\" title=\"2.docker-ce 安装\"></a>2.docker-ce 安装</h2><p><a href=\"https://www.52ynn.top/index.php/2019/10/02/centos%e5%ae%89%e8%a3%85docker-ce/\" title=\"docker-ce 安装\">docker-ce 安装</a></p>\n<span id=\"more\"></span>\n<h2 id=\"3-docker-compose-安装\"><a href=\"#3-docker-compose-安装\" class=\"headerlink\" title=\"3.docker-compose 安装\"></a>3.docker-compose 安装</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -L https://github.com/docker/compose/releases/download/1.18.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</span><br><span class=\"line\">chmod +x /usr/local/bin/docker-compose</span><br><span class=\"line\">#查看版本</span><br><span class=\"line\">docker-compose version</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-harbor私有仓库安装\"><a href=\"#4-harbor私有仓库安装\" class=\"headerlink\" title=\"4.harbor私有仓库安装\"></a>4.harbor私有仓库安装</h2><p>从 github harbor 官网 release 页面下载指定版本的安装包。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#推荐使用第二种，因为第一种在线安装可能由于官网源的网络波动导致安装失败。</span><br><span class=\"line\">1、在线安装包</span><br><span class=\"line\">wget https://github.com/vmware/harbor/releases/download/v1.1.2/harbor-online-installer-v1.1.2.tgz</span><br><span class=\"line\">tar xvf harbor-online-installer-v1.1.2.tgz</span><br><span class=\"line\">2、离线安装包</span><br><span class=\"line\">wget https://github.com/vmware/harbor/releases/download/v1.1.2/harbor-offline-installer-v1.1.2.tgz</span><br><span class=\"line\">tar xvf harbor-offline-installer-v1.1.2.tgz</span><br></pre></td></tr></table></figure>\n\n<p>配置harbor cd harbor &amp;&amp; vim harbor.cfg 修改如下内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">## Configuration file of Harbor</span><br><span class=\"line\">...</span><br><span class=\"line\">#DO NOT use localhost or 127.0.0.1, because Harbor needs to be accessed by external clients.</span><br><span class=\"line\"># 这里是访问地址</span><br><span class=\"line\">hostname = 192.168.50.84</span><br><span class=\"line\"></span><br><span class=\"line\">#The protocol for accessing the UI and token/notification service, by default it is http.</span><br><span class=\"line\">#It can be set to https if ssl is enabled on nginx.</span><br><span class=\"line\"># 设置https访问</span><br><span class=\"line\">ui_url_protocol = https</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\">#修改默认密码</span><br><span class=\"line\">#Change the admin password from UI after launching Harbor.</span><br><span class=\"line\">harbor_admin_password = qiyuesuo&amp;harbor</span><br></pre></td></tr></table></figure>\n\n<p>启动harbor</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-生成自签名证书\"><a href=\"#5-生成自签名证书\" class=\"headerlink\" title=\"5. 生成自签名证书\"></a>5. 生成自签名证书</h2><p>因为harbor使用的是基于官方registy:v2,官方默认使用https,否则无法进行正常的login,pull和push操作</p>\n<h4 id=\"Step1-创建证书存放目录\"><a href=\"#Step1-创建证书存放目录\" class=\"headerlink\" title=\"Step1:创建证书存放目录\"></a>Step1:创建证书存放目录</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir -p /data/cert &amp;&amp; cd /data/cert</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Step2-创建自己的CA证书-不使用第三方权威机构的CA来认证\"><a href=\"#Step2-创建自己的CA证书-不使用第三方权威机构的CA来认证\" class=\"headerlink\" title=\"Step2:创建自己的CA证书(不使用第三方权威机构的CA来认证)\"></a>Step2:创建自己的CA证书(不使用第三方权威机构的CA来认证)</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">openssl genrsa -out ca.key 2048   #生成根证书私钥（无加密）</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Step3-生成自签名证书-使用已有私钥ca-key自行签发根证书\"><a href=\"#Step3-生成自签名证书-使用已有私钥ca-key自行签发根证书\" class=\"headerlink\" title=\"Step3: 生成自签名证书(使用已有私钥ca.key自行签发根证书)\"></a>Step3: 生成自签名证书(使用已有私钥ca.key自行签发根证书)</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">openssl req -x509 -new -nodes -key ca.key -days 10000 -out ca.crt -subj &quot;/CN=Harbor-ca&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">req 　　  产生证书签发申请命令</span><br><span class=\"line\">-x509 　　签发X.509格式证书命令。X.509是最通用的一种签名证书格式。</span><br><span class=\"line\">-new 　　 生成证书请求</span><br><span class=\"line\">-key     指定私钥文件</span><br><span class=\"line\">-nodes   表示私钥不加密</span><br><span class=\"line\">-out 　　 输出</span><br><span class=\"line\">-subj    指定用户信息</span><br><span class=\"line\">-days    有效期</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Step4-生成服务器端私钥和CSR签名请求\"><a href=\"#Step4-生成服务器端私钥和CSR签名请求\" class=\"headerlink\" title=\"Step4:生成服务器端私钥和CSR签名请求\"></a>Step4:生成服务器端私钥和CSR签名请求</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">openssl req -newkey rsa:4096 -nodes -sha256 -keyout server.key -out server.csr</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Step5-签发服务器证书\"><a href=\"#Step5-签发服务器证书\" class=\"headerlink\" title=\"Step5:签发服务器证书\"></a>Step5:签发服务器证书</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">echo subjectAltName = IP:192.168.88.128 &gt; extfile.cnf</span><br><span class=\"line\">openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -days 365 -extfile extfile.cnf -out server.crt</span><br><span class=\"line\">x509           签发X.509格式证书命令。</span><br><span class=\"line\">-req           表示证书输入请求。</span><br><span class=\"line\">-days          表示有效天数</span><br><span class=\"line\">-extensions    表示按OpenSSL配置文件v3_req项添加扩展。</span><br><span class=\"line\">-CA            表示CA证书,这里为ca.crt</span><br><span class=\"line\">-CAkey         表示CA证书密钥,这里为ca.key</span><br><span class=\"line\">-CAcreateserial表示创建CA证书序列号</span><br><span class=\"line\">-extfile  　　  指定文件</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Step6-设置docker证书\"><a href=\"#Step6-设置docker证书\" class=\"headerlink\" title=\"Step6:设置docker证书\"></a>Step6:设置docker证书</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 如果如下目录不存在，请创建，如果有域名请按此格式依次创建</span><br><span class=\"line\">mkdir -p /etc/docker/certs.d/192.168.50.84</span><br><span class=\"line\"># mkdir -p /etc/docker/certs.d/[IP2]</span><br><span class=\"line\"># mkdir -p /etc/docker/certs.d/[example1.com]</span><br><span class=\"line\"># 如果端口为443，则不需要指定。如果为自定义端口，请指定端口</span><br><span class=\"line\"># /etc/docker/certs.d/yourdomain.com:port</span><br><span class=\"line\"></span><br><span class=\"line\"># 将ca根证书依次复制到上述创建的目录中</span><br><span class=\"line\">cp ca.crt /etc/docker/certs.d/192.168.50.84/</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-为harbor生成配置文件\"><a href=\"#6-为harbor生成配置文件\" class=\"headerlink\" title=\"6.为harbor生成配置文件\"></a>6.为harbor生成配置文件</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#首先重启下docker</span><br><span class=\"line\">service docker restart</span><br><span class=\"line\">#为Harbor生成配置文件</span><br><span class=\"line\">./prepare</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-启动-harbor\"><a href=\"#7-启动-harbor\" class=\"headerlink\" title=\"7.启动 harbor\"></a>7.启动 harbor</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure>\n\n<p>访问:<code>192.168.50.84:80</code>进入登录页面(在docker-compose.yml文件中修改端口)</p>\n<h2 id=\"8-测试\"><a href=\"#8-测试\" class=\"headerlink\" title=\"8.测试\"></a>8.测试</h2><h4 id=\"Step1-登录192-168-50-84-90-创建项目test\"><a href=\"#Step1-登录192-168-50-84-90-创建项目test\" class=\"headerlink\" title=\"Step1:登录192.168.50.84:90,创建项目test\"></a>Step1:登录192.168.50.84:90,创建项目test</h4><h4 id=\"Step2-push\"><a href=\"#Step2-push\" class=\"headerlink\" title=\"Step2:push\"></a>Step2:push</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#1.admin登录</span><br><span class=\"line\">docker login 192.168.50.84</span><br><span class=\"line\">Username:admin</span><br><span class=\"line\">Password:</span><br><span class=\"line\">Login Succeeded</span><br><span class=\"line\">#2.给镜像打tag</span><br><span class=\"line\">docker tag postgres:9.4 192.168.50.84/test/postgres:test</span><br><span class=\"line\">#3.push</span><br><span class=\"line\">docker push  192.168.50.84/test/postgres:test</span><br></pre></td></tr></table></figure>\n\n<p>刷新页面即可看见push的镜像</p>\n","categories":["skills"],"tags":["运维","Docker","软件安装"]},{"title":"起点","url":"/2020/02/20/%E8%B5%B7%E7%82%B9/","content":"<h1 id=\"时刻\"><a href=\"#时刻\" class=\"headerlink\" title=\"时刻\"></a>时刻</h1><p>2020 年 2 月 19 日凌晨 4 点 19 分，那一声哇哇哭声让我知道生命里重要的人又多了一个，一个与我骨肉相连的人。</p>\n<h1 id=\"生命\"><a href=\"#生命\" class=\"headerlink\" title=\"生命\"></a>生命</h1><p>生命真的很奇妙，老婆第一次做产检时看到 B 超上面显示的图像才真正让我知道这个神奇的生命开始与我息息相关了。<span id=\"more\"></span>昨天凌晨到医院是我这辈子到现在最紧张的时刻。 之前很担心这次的疫情会影响她的降生，现在反而有些感谢这次疫情的出现，这次疫情机缘巧合的让我能寸步不离的陪在老婆身边，让我能见证她降生的这一时刻，也希望她以后每个重要时刻都能陪在她的身边。 当她来到这个世界的时候一时间让我有点不知所措，虽然已经预想过很多次与她第一次见面的情形了，她的小手紧握着我手指的感觉是真的无法用言语言表的，我当爸爸了！ <img src=\"https://www.52ynn.top/wp-content/uploads/2020/02/WechatIMG68-225x300.jpeg\"></p>\n<h1 id=\"累，不累\"><a href=\"#累，不累\" class=\"headerlink\" title=\"累，不累\"></a>累，不累</h1><p>从昨天凌晨到现在，只睡了几个小时，因为一直处于兴奋中，恨不得无时无刻都看着她。身体很累，精神上一点不累，因为我当爸爸了，因为有你！</p>\n<h1 id=\"起点\"><a href=\"#起点\" class=\"headerlink\" title=\"起点\"></a>起点</h1><p>这是她以后漫长人生的一个起点，同时也是我和老婆人生的一个重要时刻，希望你以后的路程都有我和你妈妈的身影。爸爸会尽自己最大的努力给你最好的。</p>\n","categories":["life"],"tags":["个人"]},{"title":"科大讯飞面试记录","url":"/2020/03/11/%E7%A7%91%E5%A4%A7%E8%AE%AF%E9%A3%9E%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95/","content":"<h1 id=\"岗位\"><a href=\"#岗位\" class=\"headerlink\" title=\"岗位\"></a>岗位</h1><p>运营商 BU 运维工程师</p>\n<h1 id=\"一面（技术）\"><a href=\"#一面（技术）\" class=\"headerlink\" title=\"一面（技术）\"></a>一面（技术）</h1><ul>\n<li><p>Linux 操作系统优化</p>\n</li>\n<li><p>正则表达式</p>\n</li>\n<li><p>nginx root 和 alias 的区别</p>\n</li>\n<li><p>docker 容器修改对镜像是都有影响</p>\n</li>\n<li><p>怎么看待运维这个岗位</p>\n</li>\n<li><p>运维需要什么基本素质</p>\n</li>\n<li><p>能否接受加班</p>\n</li>\n<li><p>以后的规划<span id=\"more\"></span></p>\n<h1 id=\"二面（技术总监）\"><a href=\"#二面（技术总监）\" class=\"headerlink\" title=\"二面（技术总监）\"></a>二面（技术总监）</h1></li>\n<li><p>介绍下自己做过的项目，负责了哪些东西</p>\n</li>\n<li><p>nginx 高可用方案</p>\n</li>\n<li><p>docker 中 cmd 与entrypoint 的区别</p>\n</li>\n<li><p>说下自己遇到比较棘手的事情，怎么解决的</p>\n</li>\n<li><p>有什么要问的（我问了一些团队的问题）</p>\n<h1 id=\"三面-（HR）\"><a href=\"#三面-（HR）\" class=\"headerlink\" title=\"三面 （HR）\"></a>三面 （HR）</h1></li>\n<li><p>介绍下自己</p>\n</li>\n<li><p>以后的规划</p>\n</li>\n<li><p>说下自己在平时工作中比较厌烦的事情</p>\n</li>\n<li><p>其它的记不得了，就问了一些职场中交流的问题</p>\n<h1 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h1><p>面试通过，薪资不合适拒绝了</p>\n<h1 id=\"感受\"><a href=\"#感受\" class=\"headerlink\" title=\"感受\"></a>感受</h1><p>整体感觉科大讯飞的面试难度较小，可能是因为我的工作年限少，技术问题比较少，另外科大讯飞的反馈比较快，基本上第二天就有结果反馈 感受不好的是，薪资直接和学历、工作经验挂钩，没有商量的余地，直接给你个数。</p>\n</li>\n</ul>\n","categories":["Essay"],"tags":["面试","记录"]},{"title":"Nginx 高可用方案","url":"/2020/03/19/nginx-%E9%AB%98%E5%8F%AF%E7%94%A8%E6%96%B9%E6%A1%88/","content":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><h3 id=\"什么是高可用\"><a href=\"#什么是高可用\" class=\"headerlink\" title=\"什么是高可用\"></a>什么是高可用</h3><p>高可用<code>HA（High Availability）</code>是分布式系统架构设计中必须考虑的因素之一，它通常是指，通过设计减少系统不能提供服务的时间。如果一个系统能够一直提供服务，那么这个可用性则是百分之百，但是天有不测风云。所以我们只能尽可能的去减少服务的故障。</p>\n<h3 id=\"解决什么问题\"><a href=\"#解决什么问题\" class=\"headerlink\" title=\"解决什么问题\"></a>解决什么问题</h3><p>在生产环境上很多时候是以<code>Nginx</code>做反向代理对外提供服务，但是一天<code>Nginx</code>难免遇见故障，如：服务器宕机。当<code>Nginx</code>宕机那么所有对外提供的接口都将导致无法访问。 虽然我们无法保证服务器百分之百可用，但是也得想办法避免这种悲剧，今天我们使用<code>keepalived</code>来实现<code>Nginx</code>的高可用。</p>\n<span id=\"more\"></span>\n<h3 id=\"双机热备方案\"><a href=\"#双机热备方案\" class=\"headerlink\" title=\"双机热备方案\"></a>双机热备方案</h3><p>这种方案是国内企业中最为普遍的一种高可用方案，双机热备其实就是指一台服务器在提供服务，另一台为某服务的备用状态，当一台服务器不可用另外一台就会顶替上去。</p>\n<h4 id=\"keepalived是什么？\"><a href=\"#keepalived是什么？\" class=\"headerlink\" title=\"keepalived是什么？\"></a>keepalived是什么？</h4><p><code>Keepalived</code>软件起初是专为<code>LVS</code>负载均衡软件设计的，用来管理并监控LVS集群系统中各个服务节点的状态，后来又加入了可以实现高可用的<code>VRRP</code>(<code>Virtual Router Redundancy Protocol</code> ,虚拟路由器冗余协议）功能。因此，<code>Keepalived</code>除了能够管理<code>LVS</code>软件外，还可以作为其他服务（例如：<code>Nginx</code>、<code>Haproxy</code>、<code>MySQL</code>等）的高可用解决方案软件</p>\n<h4 id=\"故障转移机制\"><a href=\"#故障转移机制\" class=\"headerlink\" title=\"故障转移机制\"></a>故障转移机制</h4><p><code>Keepalived</code>高可用服务之间的故障切换转移，是通过<code>VRRP</code> 来实现的。 在 <code>Keepalived</code>服务正常工作时，主 <code>Master</code>节点会不断地向备节点发送（多播的方式）心跳消息，用以告诉备<code>Backup</code>节点自己还活着，当主 <code>Master</code>节点发生故障时，就无法发送心跳消息，备节点也就因此无法继续检测到来自主 <code>Master</code>节点的心跳了，于是调用自身的接管程序，接管主<code>Master</code>节点的 <code>IP</code>资源及服务。而当主 <code>Master</code>节点恢复时，备<code>Backup</code>节点又会释放主节点故障时自身接管的<code>IP</code>资源及服务，恢复到原来的备用角色。</p>\n<h1 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h1><p>机器都为 <code>Centos7</code> 操作系统 机器 1：<code>192.168.1.140</code>（主） 机器 2：<code>192.168.1.141</code>（从） 虚拟 ip：<code>192.168.1.150</code></p>\n<h1 id=\"安装-Nginx\"><a href=\"#安装-Nginx\" class=\"headerlink\" title=\"安装 Nginx\"></a>安装 Nginx</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 安装</span><br><span class=\"line\">yum install nginx -y</span><br><span class=\"line\"># 启动停止</span><br><span class=\"line\">systemctl start nginx </span><br><span class=\"line\">systemctl stop nginx </span><br></pre></td></tr></table></figure>\n\n<h1 id=\"安装-keepalived\"><a href=\"#安装-keepalived\" class=\"headerlink\" title=\"安装 keepalived\"></a>安装 keepalived</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum -y install keepalived</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"配置高可用\"><a href=\"#配置高可用\" class=\"headerlink\" title=\"配置高可用\"></a>配置高可用</h1><h4 id=\"修改机器-1（192-168-1-140）配置文件\"><a href=\"#修改机器-1（192-168-1-140）配置文件\" class=\"headerlink\" title=\"修改机器 1（192.168.1.140）配置文件\"></a>修改机器 1（192.168.1.140）配置文件</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /etc/keepalived/keepalived.conf</span><br></pre></td></tr></table></figure>\n\n<p><code>keepalived.conf</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#检测脚本</span><br><span class=\"line\">vrrp_script chk_http_port &#123;</span><br><span class=\"line\">    script &quot;/usr/local/src/check_nginx_pid.sh&quot; #心跳执行的脚本，检测nginx是否启动</span><br><span class=\"line\">    interval 2                          #（检测脚本执行的间隔，单位是秒）</span><br><span class=\"line\">    weight 2                            #权重</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#vrrp 实例定义部分</span><br><span class=\"line\">vrrp_instance VI_1 &#123;</span><br><span class=\"line\">    state MASTER            # 指定keepalived的角色，MASTER为主，BACKUP为备</span><br><span class=\"line\">    interface ens33         # 当前进行vrrp通讯的网络接口卡(当前centos的网卡) 用ifconfig查看你具体的网卡</span><br><span class=\"line\">    virtual_router_id 66    # 虚拟路由编号，主从要一直</span><br><span class=\"line\">    priority 100            # 优先级，数值越大，获取处理请求的优先级越高</span><br><span class=\"line\">    advert_int 1            # 检查间隔，默认为1s(vrrp组播周期秒数)</span><br><span class=\"line\">    #授权访问</span><br><span class=\"line\">    authentication &#123;</span><br><span class=\"line\">        auth_type PASS #设置验证类型和密码，MASTER和BACKUP必须使用相同的密码才能正常通信</span><br><span class=\"line\">        auth_pass 1111</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    track_script &#123;</span><br><span class=\"line\">        chk_http_port            #（调用检测脚本）</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    virtual_ipaddress &#123;</span><br><span class=\"line\">        192.168.1.150            # 定义虚拟ip(VIP)，可多设，每行一个</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改机器-2（192-168-1-141）配置文件\"><a href=\"#修改机器-2（192-168-1-141）配置文件\" class=\"headerlink\" title=\"修改机器 2（192.168.1.141）配置文件\"></a>修改机器 2（192.168.1.141）配置文件</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /etc/keepalived/keepalived.conf</span><br></pre></td></tr></table></figure>\n\n<p><code>keepalived.conf</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#检测脚本</span><br><span class=\"line\">vrrp_script chk_http_port &#123;</span><br><span class=\"line\">    script &quot;/usr/local/src/check_nginx_pid.sh&quot; #心跳执行的脚本，检测nginx是否启动</span><br><span class=\"line\">    interval 2                          #（检测脚本执行的间隔）</span><br><span class=\"line\">    weight 2                            #权重</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#vrrp 实例定义部分</span><br><span class=\"line\">vrrp_instance VI_1 &#123;</span><br><span class=\"line\">    state BACKUP                        # 指定keepalived的角色，MASTER为主，BACKUP为备</span><br><span class=\"line\">    interface ens33                      # 当前进行vrrp通讯的网络接口卡(当前centos的网卡) 用ifconfig查看你具体的网卡</span><br><span class=\"line\">    virtual_router_id 66                # 虚拟路由编号，主从要一直</span><br><span class=\"line\">    priority 99                         # 优先级，数值越大，获取处理请求的优先级越高</span><br><span class=\"line\">    advert_int 1                        # 检查间隔，默认为1s(vrrp组播周期秒数)</span><br><span class=\"line\">    #授权访问</span><br><span class=\"line\">    authentication &#123;</span><br><span class=\"line\">        auth_type PASS #设置验证类型和密码，MASTER和BACKUP必须使用相同的密码才能正常通信</span><br><span class=\"line\">        auth_pass 1111</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    track_script &#123;</span><br><span class=\"line\">        chk_http_port                   #（调用检测脚本）</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    virtual_ipaddress &#123;</span><br><span class=\"line\">        192.168.16.130                   # 定义虚拟ip(VIP)，可多设，每行一个</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"添加检测脚本\"><a href=\"#添加检测脚本\" class=\"headerlink\" title=\"添加检测脚本\"></a>添加检测脚本</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /usr/local/src/check_nginx_pid.sh</span><br></pre></td></tr></table></figure>\n\n<p><code>check_nginx_pid.sh</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">#检测nginx是否启动了</span><br><span class=\"line\">A=`ps -C nginx --no-header wc -l`        </span><br><span class=\"line\">if [ $A -eq 0 ];then    #如果nginx没有启动就启动nginx                        </span><br><span class=\"line\">      systemctl start nginx                #重启nginx</span><br><span class=\"line\">      if [ `ps -C nginx --no-header wc -l` -eq 0 ];then    #nginx重启失败，则停掉keepalived服务，进行VIP转移</span><br><span class=\"line\">              killall keepalived                    </span><br><span class=\"line\">      fi</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"脚本授权\"><a href=\"#脚本授权\" class=\"headerlink\" title=\"脚本授权\"></a>脚本授权</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 赋予可执行权限</span><br><span class=\"line\">chmod +x /usr/local/src/check_nginx_pid.sh</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"模拟nginx故障：\"><a href=\"#模拟nginx故障：\" class=\"headerlink\" title=\"模拟nginx故障：\"></a>模拟nginx故障：</h4><p>修改两个服务器默认访问的Nginx的html页面作为区别。 首先访问192.168.1.150,通过vip进行访问，页面显示192.168.1.140；说明当前是主服务器提供的服务。 这个时候192.168.1.140主服务器执行命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl stop nginx; #停止nginx</span><br></pre></td></tr></table></figure>\n\n<p>再次访问vip(192.168.1.150)发现这个时候页面显示的还是：192.168.1.140，这是脚本里面自动重启。 现在直接将192.168.1.140服务器关闭，在此访问vip(192.168.1.150)现在发现页面显示192.168.1.141这个时候keepalived就自动故障转移了，一套企业级生产环境的高可用方案就搭建好了。</p>\n","categories":["skills"],"tags":["运维","nginx"]},{"title":"运维提升——Kubernetes（01）","url":"/2020/03/20/%E8%BF%90%E7%BB%B4%E6%8F%90%E5%8D%87-kubernetes%EF%BC%8801%EF%BC%89/","content":"<h1 id=\"前面说的话\"><a href=\"#前面说的话\" class=\"headerlink\" title=\"前面说的话\"></a>前面说的话</h1><p>工作中发现 k8s 在实际生产环境中使用越来越频繁了，所以准备开始学习 k8s，坚持一周写一篇博客 学习途径： 1. 书籍：《Kubernetes权威指南-从 Docker 到 Kubernetes 实践全接触》 2. <a href=\"https://www.kubernetes.org.cn/k8s\" title=\"Kubernetes中文社区\">Kubernetes中文社区</a></p>\n<span id=\"more\"></span>\n<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p><code>Kubernetes</code>这个名字起源于古希腊，舵手的意思。谷歌采用这个名字一层深意就是：<code>Docker</code>自己定义为驮着集装箱在大海自在遨游的鲸鱼，那么谷歌就要以<code>Kubernetes</code>掌舵大航海时代的话语权。 <code>Kubernetes</code>诞生的时间并不早，第一个正式版本<code>Kubernetes 1.0</code>在 2015 年 7 月才发布，但是很快就吸引了IBM、微软、红帽、Vmware 等众多业界巨头纷纷加入。</p>\n<h1 id=\"Kubernetes-是什么\"><a href=\"#Kubernetes-是什么\" class=\"headerlink\" title=\"Kubernetes 是什么\"></a>Kubernetes 是什么</h1><p><code>Kubernetes</code>是一个全新的基于容器技术的分布式架构领先方案。<code>Kubernetes</code>吸取了谷歌一个久负盛名的内部使用的大规模集群管理系统<code>Borg</code>过去十年的经验与教训，所以<code>Kubernetes</code>一经开源就一鸣惊人，并迅速称霸了容器技术领域。</p>\n<h1 id=\"为什么要用-Kubernetes\"><a href=\"#为什么要用-Kubernetes\" class=\"headerlink\" title=\"为什么要用 Kubernetes\"></a>为什么要用 Kubernetes</h1><ol>\n<li>减少开发周期，Kubernetes已经做了多多事情</li>\n<li>使用 Kubernetes 就是全面拥抱微服务架构</li>\n<li>系统可以随时随地整体‘搬迁’到公有云上</li>\n<li>Kubernetes 具有超强的横向扩容能力</li>\n</ol>\n","categories":["skills"],"tags":["运维","教程","k8s"]},{"title":"MySQL 高可用方案","url":"/2020/03/21/mysql-%E9%AB%98%E5%8F%AF%E7%94%A8%E6%96%B9%E6%A1%88/","content":"<h1 id=\"MySQL-高可用方案\"><a href=\"#MySQL-高可用方案\" class=\"headerlink\" title=\"MySQL 高可用方案\"></a>MySQL 高可用方案</h1><h2 id=\"0-介绍\"><a href=\"#0-介绍\" class=\"headerlink\" title=\"0.介绍\"></a>0.介绍</h2><p>Keepalived+mysql双主来实现MySQL-HA，我们必须保证两台MySQL数据库的数据完全一样，基本思路是两台MySQL互为主从关系，通过Keepalived配置虚拟IP，实现当其中的一台MySQL数据库宕机后，应用能够自动切换到另外一台MySQL数据库，保证系统的高可用。</p>\n<h2 id=\"1-环境准备\"><a href=\"#1-环境准备\" class=\"headerlink\" title=\"1. 环境准备\"></a>1. 环境准备</h2><p>角色</p>\n<span id=\"more\"></span>\n<p>ip</p>\n<p>master1</p>\n<p>192.168.53.199</p>\n<p>master2</p>\n<p>192.168.53.191</p>\n<p>Vip（虚拟 ip）</p>\n<p>192.168.53.100</p>\n<p>关闭服务器防火墙或开启 3306 端口</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 关闭防火墙</span></span><br><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> firewalld</span><br><span class=\"line\"><span class=\"comment\"># 开启 3306 端口</span></span><br><span class=\"line\">firewalld-cmd --permanent -add-port=3306/tcp</span><br><span class=\"line\">firewall-cmd --reload</span><br></pre></td></tr></table></figure>\n\n<p>安装所需工具</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install wget vim kernel-devel openssl-devel poptdevel  -y</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-在两台机器上分别安装-mysql5-7\"><a href=\"#2-在两台机器上分别安装-mysql5-7\" class=\"headerlink\" title=\"2. 在两台机器上分别安装 mysql5.7\"></a>2. 在两台机器上分别安装 mysql5.7</h2><p><strong>两台机器都要执行以下操作</strong> 安装 mysql</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget http://dl.qiyuesuo.com/private/mysql/mysql57-community-release-el7-11.noarch.rpm</span><br><span class=\"line\">rpm -Uvh mysql57-community-release-el7-11.noarch.rpm</span><br><span class=\"line\">yum install mysql-community-server</span><br><span class=\"line\"><span class=\"comment\"># 启动服务</span></span><br><span class=\"line\">service mysqld start</span><br></pre></td></tr></table></figure>\n\n<p>查看初始密码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">grep <span class=\"string\">&#x27;temporary password&#x27;</span> /var/log/mysqld.log</span><br><span class=\"line\"><span class=\"comment\"># 2019-09-17T01:46:58.792184Z 1 [Note] A temporary password is generated for root@localhost: )ecv9hQMVpkO</span></span><br><span class=\"line\"><span class=\"comment\"># 该初始密码为 )ecv9hQMVpkO</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>修改初始密码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql -uroot -p</span><br><span class=\"line\"># 输入初始密码 )ecv9hQMVpkO</span><br><span class=\"line\"># 修改初始密码</span><br><span class=\"line\">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;Admin#1234&#x27;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-配置两台-mysql-主主同步\"><a href=\"#3-配置两台-mysql-主主同步\" class=\"headerlink\" title=\"3. 配置两台 mysql 主主同步\"></a>3. 配置两台 mysql 主主同步</h2><p>修改 master1 配置文件如下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat /etc/my.cnf</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">datadir=/var/lib/mysql</span><br><span class=\"line\">socket=/var/lib/mysql/mysql.sock</span><br><span class=\"line\">server_id=1</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Disabling symbolic-links is recommended to prevent assorted security risks</span></span><br><span class=\"line\">symbolic-links=0</span><br><span class=\"line\">log-bin=mysql-bin</span><br><span class=\"line\">binlog-format=mixed</span><br><span class=\"line\">relay-log=relay-bin</span><br><span class=\"line\">relay-log-index=slave-relay-bin.index</span><br><span class=\"line\">auto-increment-increment=2</span><br><span class=\"line\">auto-increment-offset=1</span><br><span class=\"line\">log-error=/var/log/mysqld.log</span><br><span class=\"line\">pid-file=/var/run/mysqld/mysqld.pid</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">重启</span></span><br><span class=\"line\">service mysqld restart</span><br></pre></td></tr></table></figure>\n\n<p>修改 master2 配置文件如下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat /etc/my.cnf</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">datadir=/var/lib/mysql</span><br><span class=\"line\">socket=/var/lib/mysql/mysql.sock</span><br><span class=\"line\">server_id=2</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Disabling symbolic-links is recommended to prevent assorted security risks</span></span><br><span class=\"line\">symbolic-links=0</span><br><span class=\"line\">log-bin=mysql-bin</span><br><span class=\"line\">binlog-format=mixed</span><br><span class=\"line\">relay-log=relay-bin</span><br><span class=\"line\">relay-log-index=slave-relay-bin.index</span><br><span class=\"line\">auto-increment-increment=2</span><br><span class=\"line\">auto-increment-offset=2</span><br><span class=\"line\">log-error=/var/log/mysqld.log</span><br><span class=\"line\">pid-file=/var/run/mysqld/mysqld.pid</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">重启</span></span><br><span class=\"line\">service mysqld restart</span><br></pre></td></tr></table></figure>\n\n<p>部分解释</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">binlog_format= mixed：指定mysql的binlog日志的格式，mixed是混合模式。</span><br><span class=\"line\"></span><br><span class=\"line\">relay-log：开启中继日志功能</span><br><span class=\"line\"></span><br><span class=\"line\">relay-log-index：中继日志清单</span><br><span class=\"line\"></span><br><span class=\"line\">auto-increment-increment= 2：表示自增长字段每次递增的量，其默认值是1。它的值应设为整个结构中服务器的总数，本案例用到两台服务器，所以值设为2。</span><br><span class=\"line\"></span><br><span class=\"line\">auto-increment-offset= 2：用来设定数据库中自动增长的起点(即初始值)，因为这两能服务器都设定了一次自动增长值2，所以它们的起点必须得不同，这样才能避免两台服务器数据同步时出现主键冲突。</span><br><span class=\"line\"></span><br><span class=\"line\">注：另外还可以在my.cnf配置文件中，添加“binlog_do_db=数据库名”配置项（可以添加多个）来指定要同步的数据库。如果配置了这个配置项，如果没添加在该配置项后面的数据库，则binlog不记录它的事件。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-1-将-master1-设为-master2-的主服务器\"><a href=\"#3-1-将-master1-设为-master2-的主服务器\" class=\"headerlink\" title=\"3.1 将 master1 设为 master2 的主服务器\"></a>3.1 将 master1 设为 master2 的主服务器</h4><p>在 master1 上创建授权账户，允许 master2 主机上连接</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 登陆 mysql</span></span><br><span class=\"line\">mysql -uroot -pAdmin<span class=\"comment\">#1234</span></span><br><span class=\"line\"><span class=\"comment\"># 创建用户</span></span><br><span class=\"line\">mysql&gt; grant replication slave on *.* to <span class=\"string\">&#x27;qiyuesuo_bak&#x27;</span>@<span class=\"string\">&#x27;192.168.53.191&#x27;</span> identified by <span class=\"string\">&quot;Qiyuesuo@2019&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\"># 查看当前 binlog 状态</span></span><br><span class=\"line\">mysql&gt; show master status</span><br><span class=\"line\">    -&gt; ;</span><br><span class=\"line\">+------------------+----------+--------------+------------------+-------------------+</span><br><span class=\"line\"> File              Position  Binlog_Do_DB  Binlog_Ignore_DB  Executed_Gtid_Set </span><br><span class=\"line\">+------------------+----------+--------------+------------------+-------------------+</span><br><span class=\"line\"> mysql-bin.000001       459                                                    </span><br><span class=\"line\">+------------------+----------+--------------+------------------+-------------------+</span><br><span class=\"line\">1 row <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>在 master2 上将 master1 设置为自己的主服务器并开启 slave 功能</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 登陆 mysql</span></span><br><span class=\"line\">mysql -uroot -pAdmin<span class=\"comment\">#1234</span></span><br><span class=\"line\"><span class=\"comment\"># 设置</span></span><br><span class=\"line\">mysql&gt; change master to master_host=<span class=\"string\">&#x27;192.168.53.199&#x27;</span>,master_user=<span class=\"string\">&#x27;qiyuesuo_bak&#x27;</span>,master_password=<span class=\"string\">&#x27;Qiyuesuo@2019&#x27;</span>,master_log_file=<span class=\"string\">&#x27;mysql-bin.000001&#x27;</span>,master_log_pos=459;</span><br><span class=\"line\"><span class=\"comment\"># 开启</span></span><br><span class=\"line\">mysql&gt;start slave;</span><br><span class=\"line\"><span class=\"comment\"># 查看状态</span></span><br><span class=\"line\">mysql&gt; Show slave status\\G</span><br><span class=\"line\">*************************** 1. row ***************************</span><br><span class=\"line\">               Slave_IO_State: Waiting <span class=\"keyword\">for</span> master to send event</span><br><span class=\"line\">                  Master_Host: 192.168.53.199</span><br><span class=\"line\">                  Master_User: qiyuesuo_bak</span><br><span class=\"line\">                  Master_Port: 3306</span><br><span class=\"line\">                Connect_Retry: 60</span><br><span class=\"line\">              Master_Log_File: mysql-bin.000001</span><br><span class=\"line\">          Read_Master_Log_Pos: 459</span><br><span class=\"line\">               Relay_Log_File: relay-bin.000002</span><br><span class=\"line\">                Relay_Log_Pos: 672</span><br><span class=\"line\">        Relay_Master_Log_File: mysql-bin.000001</span><br><span class=\"line\">             Slave_IO_Running: Yes</span><br><span class=\"line\">            Slave_SQL_Running: Yes</span><br><span class=\"line\">              Replicate_Do_DB: </span><br><span class=\"line\">          Replicate_Ignore_DB: </span><br><span class=\"line\">           Replicate_Do_Table: </span><br><span class=\"line\">       Replicate_Ignore_Table: </span><br><span class=\"line\">      Replicate_Wild_Do_Table: </span><br><span class=\"line\">  Replicate_Wild_Ignore_Table: </span><br><span class=\"line\">                   Last_Errno: 0</span><br><span class=\"line\">                   Last_Error: </span><br><span class=\"line\">                 Skip_Counter: 0</span><br><span class=\"line\">          Exec_Master_Log_Pos: 459</span><br><span class=\"line\">              Relay_Log_Space: 873</span><br><span class=\"line\">              Until_Condition: None</span><br><span class=\"line\">               Until_Log_File: </span><br><span class=\"line\">                Until_Log_Pos: 0</span><br><span class=\"line\">           Master_SSL_Allowed: No</span><br><span class=\"line\">           Master_SSL_CA_File: </span><br><span class=\"line\">           Master_SSL_CA_Path: </span><br><span class=\"line\">              Master_SSL_Cert: </span><br><span class=\"line\">            Master_SSL_Cipher: </span><br><span class=\"line\">               Master_SSL_Key: </span><br><span class=\"line\">        Seconds_Behind_Master: 0</span><br><span class=\"line\">Master_SSL_Verify_Server_Cert: No</span><br><span class=\"line\">                Last_IO_Errno: 0</span><br><span class=\"line\">                Last_IO_Error: </span><br><span class=\"line\">               Last_SQL_Errno: 0</span><br><span class=\"line\">               Last_SQL_Error: </span><br><span class=\"line\">  Replicate_Ignore_Server_Ids: </span><br><span class=\"line\">             Master_Server_Id: 1</span><br><span class=\"line\">                  Master_UUID: 0963db0f-d8ed-11e9-85fd-001c427d374f</span><br><span class=\"line\">             Master_Info_File: /var/lib/mysql/master.info</span><br><span class=\"line\">                    SQL_Delay: 0</span><br><span class=\"line\">          SQL_Remaining_Delay: NULL</span><br><span class=\"line\">      Slave_SQL_Running_State: Slave has <span class=\"built_in\">read</span> all relay <span class=\"built_in\">log</span>; waiting <span class=\"keyword\">for</span> more updates</span><br><span class=\"line\">           Master_Retry_Count: 86400</span><br><span class=\"line\">                  Master_Bind: </span><br><span class=\"line\">      Last_IO_Error_Timestamp: </span><br><span class=\"line\">     Last_SQL_Error_Timestamp: </span><br><span class=\"line\">               Master_SSL_Crl: </span><br><span class=\"line\">           Master_SSL_Crlpath: </span><br><span class=\"line\">           Retrieved_Gtid_Set: </span><br><span class=\"line\">            Executed_Gtid_Set: </span><br><span class=\"line\">                Auto_Position: 0</span><br><span class=\"line\">         Replicate_Rewrite_DB: </span><br><span class=\"line\">                 Channel_Name: </span><br><span class=\"line\">           Master_TLS_Version: </span><br><span class=\"line\">1 row <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-2-将-master2-设为-master1-的主服务器\"><a href=\"#3-2-将-master2-设为-master1-的主服务器\" class=\"headerlink\" title=\"3.2 将 master2 设为 master1 的主服务器\"></a>3.2 将 master2 设为 master1 的主服务器</h4><p>在 master2 上创建授权账户，允许 master1 主机上连接</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 登陆 mysql</span></span><br><span class=\"line\">mysql -uroot -pAdmin<span class=\"comment\">#1234</span></span><br><span class=\"line\"><span class=\"comment\"># 创建用户</span></span><br><span class=\"line\">mysql&gt; grant replication slave on *.* to <span class=\"string\">&#x27;qiyuesuo_bak&#x27;</span>@<span class=\"string\">&#x27;192.168.53.199&#x27;</span> identified by <span class=\"string\">&quot;Qiyuesuo@2019&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\"># 查看当前 binlog 状态</span></span><br><span class=\"line\">mysql&gt; show master status;</span><br><span class=\"line\">+------------------+----------+--------------+------------------+-------------------+</span><br><span class=\"line\"> File              Position  Binlog_Do_DB  Binlog_Ignore_DB  Executed_Gtid_Set </span><br><span class=\"line\">+------------------+----------+--------------+------------------+-------------------+</span><br><span class=\"line\"> mysql-bin.000001       459                                                    </span><br><span class=\"line\">+------------------+----------+--------------+------------------+-------------------+</span><br><span class=\"line\">1 row <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>在 master1 上将 master2 设置为自己的主服务器并开启 slave 功能</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 登陆 mysql</span></span><br><span class=\"line\">mysql -uroot -pAdmin<span class=\"comment\">#1234</span></span><br><span class=\"line\"><span class=\"comment\"># 设置</span></span><br><span class=\"line\">mysql&gt; change master to master_host=<span class=\"string\">&#x27;192.168.53.191&#x27;</span>,master_user=<span class=\"string\">&#x27;qiyuesuo_bak&#x27;</span>,master_password=<span class=\"string\">&#x27;Qiyuesuo@2019&#x27;</span>,master_log_file=<span class=\"string\">&#x27;mysql-bin.000001&#x27;</span>,master_log_pos=459;</span><br><span class=\"line\"><span class=\"comment\"># 开启</span></span><br><span class=\"line\">mysql&gt; start slave;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"><span class=\"comment\"># 查看状态</span></span><br><span class=\"line\">mysql&gt; show slave status \\G</span><br><span class=\"line\">*************************** 1. row ***************************</span><br><span class=\"line\">               Slave_IO_State: Waiting <span class=\"keyword\">for</span> master to send event</span><br><span class=\"line\">                  Master_Host: 192.168.53.191</span><br><span class=\"line\">                  Master_User: qiyuesuo_bak</span><br><span class=\"line\">                  Master_Port: 3306</span><br><span class=\"line\">                Connect_Retry: 60</span><br><span class=\"line\">              Master_Log_File: mysql-bin.000001</span><br><span class=\"line\">          Read_Master_Log_Pos: 459</span><br><span class=\"line\">               Relay_Log_File: relay-bin.000002</span><br><span class=\"line\">                Relay_Log_Pos: 320</span><br><span class=\"line\">        Relay_Master_Log_File: mysql-bin.000001</span><br><span class=\"line\">             Slave_IO_Running: Yes</span><br><span class=\"line\">            Slave_SQL_Running: Yes</span><br><span class=\"line\">              Replicate_Do_DB: </span><br><span class=\"line\">          Replicate_Ignore_DB: </span><br><span class=\"line\">           Replicate_Do_Table: </span><br><span class=\"line\">       Replicate_Ignore_Table: </span><br><span class=\"line\">      Replicate_Wild_Do_Table: </span><br><span class=\"line\">  Replicate_Wild_Ignore_Table: </span><br><span class=\"line\">                   Last_Errno: 0</span><br><span class=\"line\">                   Last_Error: </span><br><span class=\"line\">                 Skip_Counter: 0</span><br><span class=\"line\">          Exec_Master_Log_Pos: 459</span><br><span class=\"line\">              Relay_Log_Space: 521</span><br><span class=\"line\">              Until_Condition: None</span><br><span class=\"line\">               Until_Log_File: </span><br><span class=\"line\">                Until_Log_Pos: 0</span><br><span class=\"line\">           Master_SSL_Allowed: No</span><br><span class=\"line\">           Master_SSL_CA_File: </span><br><span class=\"line\">           Master_SSL_CA_Path: </span><br><span class=\"line\">              Master_SSL_Cert: </span><br><span class=\"line\">            Master_SSL_Cipher: </span><br><span class=\"line\">               Master_SSL_Key: </span><br><span class=\"line\">        Seconds_Behind_Master: 0</span><br><span class=\"line\">Master_SSL_Verify_Server_Cert: No</span><br><span class=\"line\">                Last_IO_Errno: 0</span><br><span class=\"line\">                Last_IO_Error: </span><br><span class=\"line\">               Last_SQL_Errno: 0</span><br><span class=\"line\">               Last_SQL_Error: </span><br><span class=\"line\">  Replicate_Ignore_Server_Ids: </span><br><span class=\"line\">             Master_Server_Id: 2</span><br><span class=\"line\">                  Master_UUID: 0524b2b4-d8ed-11e9-8681-001c42223706</span><br><span class=\"line\">             Master_Info_File: /var/lib/mysql/master.info</span><br><span class=\"line\">                    SQL_Delay: 0</span><br><span class=\"line\">          SQL_Remaining_Delay: NULL</span><br><span class=\"line\">      Slave_SQL_Running_State: Slave has <span class=\"built_in\">read</span> all relay <span class=\"built_in\">log</span>; waiting <span class=\"keyword\">for</span> more updates</span><br><span class=\"line\">           Master_Retry_Count: 86400</span><br><span class=\"line\">                  Master_Bind: </span><br><span class=\"line\">      Last_IO_Error_Timestamp: </span><br><span class=\"line\">     Last_SQL_Error_Timestamp: </span><br><span class=\"line\">               Master_SSL_Crl: </span><br><span class=\"line\">           Master_SSL_Crlpath: </span><br><span class=\"line\">           Retrieved_Gtid_Set: </span><br><span class=\"line\">            Executed_Gtid_Set: </span><br><span class=\"line\">                Auto_Position: 0</span><br><span class=\"line\">         Replicate_Rewrite_DB: </span><br><span class=\"line\">                 Channel_Name: </span><br><span class=\"line\">           Master_TLS_Version: </span><br><span class=\"line\">1 row <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-测试主主同步\"><a href=\"#3-3-测试主主同步\" class=\"headerlink\" title=\"3.3 测试主主同步\"></a>3.3 测试主主同步</h4><p>在 master1 上创建要同步的数据库，并在数据库中创建一张测试表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; create database  qiyuesuo_test;</span><br><span class=\"line\">Query OK, 1 row affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; use qiyuesuo_test;</span><br><span class=\"line\">Database changed</span><br><span class=\"line\">mysql&gt; create table test(id int primary key  auto_increment,name varchar(20) );</span><br><span class=\"line\">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure>\n\n<p>在 master2 上面查看是否同步过来</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; show databases;</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\"> Database           </span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\"> information_schema </span><br><span class=\"line\"> mysql              </span><br><span class=\"line\"> performance_schema </span><br><span class=\"line\"> qiyuesuo_test      </span><br><span class=\"line\"> sys                </span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">5 rows in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; use qiyuesuo_test;</span><br><span class=\"line\">Reading table information for completion of table and column names</span><br><span class=\"line\">You can turn off this feature to get a quicker startup with -A</span><br><span class=\"line\"></span><br><span class=\"line\">Database changed</span><br><span class=\"line\">mysql&gt; show tables;</span><br><span class=\"line\">+-------------------------+</span><br><span class=\"line\"> Tables_in_qiyuesuo_test </span><br><span class=\"line\">+-------------------------+</span><br><span class=\"line\"> test                    </span><br><span class=\"line\">+-------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>说明 mater2 同步了 msater1 的数据 现在测试 master1 同步 master2，在 master2 中向 test 表插入一条数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt;insert into test(name) values(&#x27;zhangsan&#x27;);</span><br></pre></td></tr></table></figure>\n\n<p>在 master1 上查看</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from test;</span><br><span class=\"line\">+----+----------+</span><br><span class=\"line\"> id  name     </span><br><span class=\"line\">+----+----------+</span><br><span class=\"line\">  2  zhangsan </span><br><span class=\"line\">+----+----------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>以上就完成了 mysql 双主的安装配置，下面进行配置keepalived</p>\n<h2 id=\"4-keepalived-安装配置\"><a href=\"#4-keepalived-安装配置\" class=\"headerlink\" title=\"4. keepalived 安装配置\"></a>4. keepalived 安装配置</h2><h4 id=\"4-1-介绍\"><a href=\"#4-1-介绍\" class=\"headerlink\" title=\"4.1 介绍\"></a>4.1 介绍</h4><blockquote>\n<p>keepalived是集群管理中保证集群高可用的一个软件解决方案，其功能类似于heartbeat，用来防止单点故障 keepalived是以VRRP协议为实现基础的，VRRP全称VirtualRouter Redundancy Protocol，即虚拟路由冗余协议。 虚拟路由冗余协议，可以认为是实现路由器高可用的协议，即将N台提供相同功能的路由器组成一个路由器组，这个组里面有一个master和多个backup，master上面有一个对外提供服务的vip，master会发组播（组播地址为224.0.0.18），当backup收不到vrrp包时就认为master宕掉了，这时就需要根据VRRP的优先级来选举一个backup当master，这样的话就可以保证路由器的高可用了。 keepalived主要有三个模块，分别是core 、check和vrrp。core模块为keepalived的核心，负责主进程的启动、维护以及全局配置文件的加载和解析。check负责健康检查，包括常见的各种检查方式。vrrp模块是来实现VRRP协议的。</p>\n</blockquote>\n<h4 id=\"4-2-keepalived-安装\"><a href=\"#4-2-keepalived-安装\" class=\"headerlink\" title=\"4.2 keepalived 安装\"></a>4.2 keepalived 安装</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install -y keepalived</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-3-keepalived-配置\"><a href=\"#4-3-keepalived-配置\" class=\"headerlink\" title=\"4.3 keepalived 配置\"></a>4.3 keepalived 配置</h4><p>在 master1 中配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> /etc/keepalived/keepalived.conf</span><br><span class=\"line\"></span><br><span class=\"line\">! Configuration File <span class=\"keyword\">for</span> keepalived</span><br><span class=\"line\"></span><br><span class=\"line\">global_defs &#123;</span><br><span class=\"line\">  router_id mysql-1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">vrrp_instance VI_1 &#123;</span><br><span class=\"line\">   state BACKUP</span><br><span class=\"line\">   interface eth0</span><br><span class=\"line\">   virtual_router_id 51</span><br><span class=\"line\">   priority 100</span><br><span class=\"line\">   advert_int 1</span><br><span class=\"line\">   nopreempt</span><br><span class=\"line\">   authentication &#123;</span><br><span class=\"line\">       auth_type PASS</span><br><span class=\"line\">       auth_pass 1111</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   virtual_ipaddress &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       192.168.53.100</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">virtual_server 192.168.53.100 3306 &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   delay_loop 2</span><br><span class=\"line\">   lb_algo rr</span><br><span class=\"line\">   lb_kind DR</span><br><span class=\"line\">   persistence_timeout 60</span><br><span class=\"line\">   protocol TCP</span><br><span class=\"line\"></span><br><span class=\"line\">   real_server 192.168.53.199 3306 &#123;</span><br><span class=\"line\">       weight 3</span><br><span class=\"line\">       notify_down    /etc/keepalived/bin/mysql.sh</span><br><span class=\"line\">       TCP_CHECK &#123;</span><br><span class=\"line\">            connect_timeout 3</span><br><span class=\"line\">            nb_get_retry 3</span><br><span class=\"line\">            delay_before_retry 3</span><br><span class=\"line\">            connect_port 3306</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 master2 中配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat /etc/keepalived/keepalived.conf</span><br><span class=\"line\">! Configuration File for keepalived</span><br><span class=\"line\"></span><br><span class=\"line\">global_defs &#123;</span><br><span class=\"line\">  router_id mysql-2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">vrrp_instance VI_1 &#123;</span><br><span class=\"line\">   state BACKUP</span><br><span class=\"line\">   interface eth0</span><br><span class=\"line\">   virtual_router_id 51</span><br><span class=\"line\">   priority 50</span><br><span class=\"line\">   advert_int 1</span><br><span class=\"line\">   authentication &#123;</span><br><span class=\"line\">       auth_type PASS</span><br><span class=\"line\">       auth_pass 1111</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   virtual_ipaddress &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       192.168.53.100</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">virtual_server 192.168.53.100 3306 &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   delay_loop 2</span><br><span class=\"line\">   lb_algo rr</span><br><span class=\"line\">   lb_kind DR</span><br><span class=\"line\">   persistence_timeout 60</span><br><span class=\"line\">   protocol TCP</span><br><span class=\"line\"></span><br><span class=\"line\">   real_server 192.168.53.191 3306 &#123;</span><br><span class=\"line\">       weight 3</span><br><span class=\"line\">       notify_down    /etc/keepalived/bin/mysql.sh</span><br><span class=\"line\">       TCP_CHECK &#123;</span><br><span class=\"line\">            connect_timeout 3</span><br><span class=\"line\">            nb_get_retry 3</span><br><span class=\"line\">            delay_before_retry 3</span><br><span class=\"line\">            connect_port 3306</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>解释说明</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">! Configuration File <span class=\"keyword\">for</span> keepalived  //注释</span><br><span class=\"line\"></span><br><span class=\"line\">global_defs &#123;</span><br><span class=\"line\">  router_id mysql-1   //表示运行 keepalived 服务器的一个标识</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">vrrp_instance VI_1 &#123;</span><br><span class=\"line\">   state BACKUP       // 指定角色，两台配置均为 BACKUP，设为 BACKUP 将根据优先级决定主从</span><br><span class=\"line\">   interface eth0     // 指定 HA 检测网络的接口，可使用 ip addr 命令查找</span><br><span class=\"line\">   virtual_router_id 51  // 虚拟路由标识，同一个 vrrp 实例要使用唯一的标识，确保和 master2 相同</span><br><span class=\"line\">   priority 100   //用来选举 master，取值 1-255，此处 master2 设置为 50</span><br><span class=\"line\">   advert_int 1   // 发 vrrp 间隔，即多久进行一次 master 选举</span><br><span class=\"line\">   nopreempt      // 不抢占，即允许一个 priority 比较低的节点作为 master</span><br><span class=\"line\">   authentication &#123;</span><br><span class=\"line\">       auth_type PASS   //认证区域</span><br><span class=\"line\">       auth_pass 1111</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   virtual_ipaddress &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       192.168.53.100 //vip ,指定 vip 地址</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">virtual_server 192.168.53.100 3306 &#123; // 设置虚拟服务器，需要指定虚拟 IP地址和端口，ip 与端口之间用空格隔开</span><br><span class=\"line\"></span><br><span class=\"line\">   delay_loop 2 // 设置允许情况检查时间，单位秒</span><br><span class=\"line\">   lb_algo rr //设置后端调度算法，这里设置 rr，即轮询算法</span><br><span class=\"line\">   lb_kind DR  // 设置 LVS 实现负载均衡的机制，</span><br><span class=\"line\">   persistence_timeout 60 //会话保持时间</span><br><span class=\"line\">   protocol TCP  // 指定转发协议，有 tcp 和 udp</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">   real_server 192.168.53.199 3306 &#123;  //配置服务节点</span><br><span class=\"line\">       weight 3     //权值</span><br><span class=\"line\">       notify_down    /etc/keepalived/bin/mysql.sh  // 检测到 realserver 的 mysql 服务 down 后执行的脚本</span><br><span class=\"line\">       TCP_CHECK &#123;</span><br><span class=\"line\">            connect_timeout 3  // 连接超时时间</span><br><span class=\"line\">            nb_get_retry 3    // 重连次数</span><br><span class=\"line\">            delay_before_retry 3 // 重连间隔时间</span><br><span class=\"line\">            connect_port 3306  //健康检查端口</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>启动 keepalived</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">service keepalived start</span><br><span class=\"line\"><span class=\"comment\"># 设置开机自启</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> keepalived</span><br></pre></td></tr></table></figure>\n\n<p>在 master1 上查看</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ip addr</span></span><br><span class=\"line\">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class=\"line\">    <span class=\"built_in\">link</span>/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class=\"line\">    inet 127.0.0.1/8 scope host lo</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 ::1/128 scope host </span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class=\"line\">    <span class=\"built_in\">link</span>/ether 00:1c:42:22:37:06 brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 192.168.53.191/22 brd 192.168.55.255 scope global noprefixroute dynamic eth0</span><br><span class=\"line\">       valid_lft 69601sec preferred_lft 69601sec</span><br><span class=\"line\">    inet 192.168.53.100/32 scope global eth0</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 fe80::21c:42ff:fe22:3706/64 scope <span class=\"built_in\">link</span> noprefixroute </span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure>\n\n<p>在 master2 上查看</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost keepalived]<span class=\"comment\"># ip addr</span></span><br><span class=\"line\">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class=\"line\">    <span class=\"built_in\">link</span>/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class=\"line\">    inet 127.0.0.1/8 scope host lo</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 ::1/128 scope host </span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class=\"line\">    <span class=\"built_in\">link</span>/ether 00:1c:42:7d:37:4f brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 192.168.53.199/22 brd 192.168.55.255 scope global noprefixroute dynamic eth0</span><br><span class=\"line\">       valid_lft 69567sec preferred_lft 69567sec</span><br><span class=\"line\">    inet6 fe80::21c:42ff:fe7d:374f/64 scope <span class=\"built_in\">link</span> noprefixroute </span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-4-添加检测脚本\"><a href=\"#4-4-添加检测脚本\" class=\"headerlink\" title=\"4.4 添加检测脚本\"></a>4.4 添加检测脚本</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> /etc/keepalived/bin</span><br><span class=\"line\">vim /etc/keepalived/bin/mysql.sh</span><br><span class=\"line\"><span class=\"comment\"># 内容如下</span></span><br><span class=\"line\"><span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\">pkill keepalived</span><br><span class=\"line\">/sbin/ifdown eth0 &amp;&amp; /sbin/ifup eth0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 赋予可执行权限</span></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> +x /etc/keepalived/bin/mysql.sh</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>连接即可使用192.168.53.100创建数据库使用</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在 host1 上修改</span></span><br><span class=\"line\">! Configuration File for keepalived</span><br><span class=\"line\"></span><br><span class=\"line\">global_defs &#123;  #主要是配置故障发生时的通知对象以及机器标识。</span><br><span class=\"line\">   router_id HA_MySQL  #标识，双主相同</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">vrrp_instance VI_1 &#123;  #用来定义对外提供服务的VIP区域以及机器标识</span><br><span class=\"line\">    state BACKUP  #注意，主从两端都配置成了backup，因为使用了nopreempt,即非抢占模式</span><br><span class=\"line\">    interface eth0</span><br><span class=\"line\">    virtual_router_id 51  #分组，主备相同</span><br><span class=\"line\">    priority 100  #优先级，这个高一点则先把他当作为master</span><br><span class=\"line\">    advert_int 1</span><br><span class=\"line\">    nopreempt  #不主动抢占资源，设置非抢占模式</span><br><span class=\"line\">    authentication &#123;</span><br><span class=\"line\">        auth_type PASS</span><br><span class=\"line\">        auth_pass 1111</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    virtual_ipaddress &#123;</span><br><span class=\"line\">        192.168.1.10</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">virtual_server 192.168.1.10 3306 &#123;  #设置虚拟服务器，需要指定虚拟IP地址和服务端口，IP与端口直接用空格隔开</span><br><span class=\"line\">    delay_loop 2  #设置运行情况检查时间，单位是秒</span><br><span class=\"line\">    lb_algo wrr   #设置后端调度算法，rr为轮询算法，这里设置的wrr是带有权重的轮询算法</span><br><span class=\"line\">    lb_kind DR    #设置LVS实现负载均衡的机制。有NAR、TUN、DR三个模式可选</span><br><span class=\"line\">    persistence_timeout 60  #回话保持的时间，单位是秒。这个选项对动态网页是非常有用的，为了集群系统中的session</span><br><span class=\"line\">                            #共享提供了一个很好的解决方案。有了这个会话保持功能，用户的请求会被一直分发到某个服务节点，</span><br><span class=\"line\">                            #直到超过这个会话的保持时间。</span><br><span class=\"line\">   protocol TCP   #指定转发协议类型，有TCP和UDP两种</span><br><span class=\"line\"></span><br><span class=\"line\">    real_server 192.168.1.51 3306 &#123;  #配置服务节点1，需要制定real server的真实IP地址和端口号，IP与端口之间用空格隔开</span><br><span class=\"line\">        weight 3   #配置服务节点的权值，权值大小用数字表示，数字越大，权值越高，设置全职大小为分区不同性能的服务器</span><br><span class=\"line\">        notify_down /usr/local/keepalived/mysql.sh #检测到real server的mysql服务down后执行的脚本</span><br><span class=\"line\">        TCP_CHECK &#123;</span><br><span class=\"line\">            connect_timeout 3  #连接超时时间</span><br><span class=\"line\">            nb_get_retry 3     #重连次数</span><br><span class=\"line\">            delay_before_retry 3 #重连间隔时间</span><br><span class=\"line\">            connect_port 3306  #健康检查端口，设置车工自己mysql的服务端口</span><br><span class=\"line\"></span><br><span class=\"line\">     &#125; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在 hosts2 上修改</span></span><br><span class=\"line\">! Configuration File for keepalived</span><br><span class=\"line\"></span><br><span class=\"line\">global_defs &#123;  </span><br><span class=\"line\">   router_id HA_MySQL  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">vrrp_instance VI_1 &#123;  </span><br><span class=\"line\">    state BACKUP  </span><br><span class=\"line\">    interface eth0</span><br><span class=\"line\">    virtual_router_id 51  </span><br><span class=\"line\">    priority 90   #优先级，这个要低一点</span><br><span class=\"line\">    advert_int 1</span><br><span class=\"line\">    #nopreempt  #这里的nopreempt(即非抢占模式)去掉，因为该配置项一般只在优先级高的mysql上配置 </span><br><span class=\"line\">    authentication &#123;</span><br><span class=\"line\">        auth_type PASS</span><br><span class=\"line\">        auth_pass 1111</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    virtual_ipaddress &#123;</span><br><span class=\"line\">        192.168.1.10</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">virtual_server 192.168.1.52 3306 &#123;  </span><br><span class=\"line\">    delay_loop 2 </span><br><span class=\"line\">    lb_algo wrr   </span><br><span class=\"line\">    lb_kind DR   </span><br><span class=\"line\">    persistence_timeout 60                            </span><br><span class=\"line\">    protocol TCP   </span><br><span class=\"line\"></span><br><span class=\"line\">    real_server 192.168.1.9 3306 &#123;  </span><br><span class=\"line\">        weight 3   </span><br><span class=\"line\">        notify_down /usr/local/keepalived/mysql.sh </span><br><span class=\"line\">        TCP_CHECK &#123;</span><br><span class=\"line\">            connect_timeout 3  </span><br><span class=\"line\">            nb_get_retry 3    </span><br><span class=\"line\">            delay_before_retry 3 </span><br><span class=\"line\">            connect_port 3306  </span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>配置杀死 keepalived 的脚本 vi &#x2F;usr&#x2F;local&#x2F;keepalived&#x2F;mysql.sh</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#kill掉keepalived进程，以防止脑裂问题。</span></span><br><span class=\"line\">pkill keepalived</span><br></pre></td></tr></table></figure>\n\n<p>启动keepalived服务（两台都要启动）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> +x /usr/local/keepalived/mysql.sh</span><br><span class=\"line\">/etc/init.d/keepalived start</span><br></pre></td></tr></table></figure>\n\n<p>参考文档：<a href=\"https://blog.csdn.net/shiyu1157758655/article/details/78672110\">https://blog.csdn.net/shiyu1157758655/article/details/78672110</a></p>\n","categories":["skills"],"tags":["运维","软件安装","MySQL","Linux"]},{"title":"Python 自动化运维 （01）","url":"/2020/03/21/python-%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4-%EF%BC%8801%EF%BC%89/","content":"<h1 id=\"前面的话\"><a href=\"#前面的话\" class=\"headerlink\" title=\"前面的话\"></a>前面的话</h1><blockquote>\n<p>学习记录，记录中再次学习 所有代码基本上都是实际测试过 操作系统 macOS Catalina Python版本：3.7 所有代码可在 <a href=\"https://github.com/Swq1227/devops\" title=\"GitHub\">GitHub</a> 获取</p>\n</blockquote>\n<span id=\"more\"></span>\n<h1 id=\"系统性能监控模块-psutil\"><a href=\"#系统性能监控模块-psutil\" class=\"headerlink\" title=\"系统性能监控模块 psutil\"></a>系统性能监控模块 psutil</h1><h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p><code>psutil</code>是一个跨平台库，能实现获取系统运行的进程和系统利用率（包括 CPU、内存、磁盘、网络等）信息。主要应用于系统监控，分析和限制系统资源及进程的管理。 <code>psutil</code>是运维自动化中常用的一个模块。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>介绍两种比较简单的方法 方法一： 打开命令行，输入下面命令安装即可</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install psutil</span><br></pre></td></tr></table></figure>\n\n<p>方法二： 使用 <code>Pycharm</code> 开发的话，<code>file-&gt;settings -&gt;project interpreter</code>(mac系统的话选择<code>pychram-&gt;Preferences-&gt;setting-&gt;project interpreter</code>) <img src=\"https://i.loli.net/2020/03/21/jdZpi2DcIxMWvUq.png\" alt=\"image.png\"> 点击+搜索<code>psutil</code>点击 <code>install package</code> 即可 <img src=\"https://i.loli.net/2020/03/21/y9bg2odzqHBcawj.png\" alt=\"image.png\"></p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h3 id=\"CPU-信息\"><a href=\"#CPU-信息\" class=\"headerlink\" title=\"CPU 信息\"></a>CPU 信息</h3><p>运维中，一般 CPU 需要知道以下几个部分</p>\n<ul>\n<li>User Time，执行用户进程的时间百分比</li>\n<li>System Time，执行内核进程和中断的时间百分比</li>\n<li>Wait IO，由于 IO 等待而使 CPU 处于空闲状态的时间比</li>\n<li>Idle，CPU 处于空闲状态的时间比</li>\n</ul>\n<p>使用<code>psutil.cpu_times()</code>方法可以很容易获取到：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> psutil</span><br><span class=\"line\"><span class=\"comment\"># 获取 cpu 完整信息，需要显示所有逻辑 cpu 信息</span></span><br><span class=\"line\">cpu_time=psutil.cpu_times()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;cpu_time is:&quot;</span>,cpu_time)</span><br><span class=\"line\"><span class=\"comment\"># 获取单项数据信息，如用户的 CPU 时间比</span></span><br><span class=\"line\">cpu_user=psutil.cpu_times().user</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;cpu_user is:&quot;</span>,cpu_user)</span><br><span class=\"line\"><span class=\"comment\"># 获取 CPU 的逻辑个数,默认 logical=True</span></span><br><span class=\"line\">cpu_count=psutil.cpu_count()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;count is :&quot;</span>,cpu_count)</span><br><span class=\"line\"><span class=\"comment\"># 获取 CPU 的物理个数，logical=False</span></span><br><span class=\"line\">cpu_count2=psutil.cpu_count(logical=<span class=\"literal\">False</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;count2 is :&quot;</span>,cpu_count2)</span><br></pre></td></tr></table></figure>\n\n<p>运行结果 <img src=\"https://i.loli.net/2020/03/21/ZtUsnVqJRvhaB85.png\" alt=\"image.png\"></p>\n<h3 id=\"内存信息\"><a href=\"#内存信息\" class=\"headerlink\" title=\"内存信息\"></a>内存信息</h3><p>内存利用率信息设计 total（内存总数）、used（已使用的内存数）、free（空闲内存数）、buffers（缓冲使用数）、cache（缓存使用数）、swap（交换分区使用数）等，可分别使用<code>psutil.virtual_memory()</code>与<code>psutil.swap_memory()</code>方法获取这些信息</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> psutil</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用psutil.virtual_memory()获取内存完整信息</span></span><br><span class=\"line\">mem = psutil.virtual_memory()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;memory info is&quot;</span>, mem)</span><br><span class=\"line\"><span class=\"comment\"># 获取内存总数</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;mem total is :&quot;</span>, mem.total)</span><br><span class=\"line\"><span class=\"comment\"># 获取空闲内存数</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;mem free is :&quot;</span>, mem.free)</span><br><span class=\"line\"><span class=\"comment\"># 获取 swap 分区信息</span></span><br><span class=\"line\">swap = psutil.swap_memory()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;swap is :&quot;</span>, swap)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>运行结果 <img src=\"https://i.loli.net/2020/03/21/nwSDsphkHWCQTdy.png\" alt=\"image.png\"></p>\n<h3 id=\"磁盘信息\"><a href=\"#磁盘信息\" class=\"headerlink\" title=\"磁盘信息\"></a>磁盘信息</h3><p>在磁盘信息中，关注的比较多的是磁盘的利用率及 IO 信息，其中磁盘利用率使用<code>psutil.disk_usage</code>方法获取。IO 信息可以使用<code>psutil_disk_io_counters()</code>获取</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> psutil</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取磁盘完整信息</span></span><br><span class=\"line\">disk_info = psutil.disk_partitions()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;info:&quot;</span>, disk_info)</span><br><span class=\"line\"><span class=\"comment\"># 获取分区使用情况,需要传一个 path 参数，这里我们取/路径</span></span><br><span class=\"line\">disk_usage = psutil.disk_usage(<span class=\"string\">&#x27;/&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;usage info:&quot;</span>, disk_usage)</span><br><span class=\"line\"><span class=\"comment\"># 获取磁盘总的 IO 个数、读写信息</span></span><br><span class=\"line\">io_counts = psutil.disk_io_counters()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;io_counts:&#x27;</span>, io_counts)</span><br><span class=\"line\"><span class=\"comment\"># 获取单个分区的 IO 个数</span></span><br><span class=\"line\">io_counts2 = psutil.disk_io_counters(perdisk=<span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(io_counts2)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>运行结果 <img src=\"https://i.loli.net/2020/03/21/EmSM7bhaHunYOqr.png\" alt=\"image.png\"></p>\n<h3 id=\"网络信息\"><a href=\"#网络信息\" class=\"headerlink\" title=\"网络信息\"></a>网络信息</h3><p>网络信息与 IO 信息类似，涉及几个关键点，包括发送字节数、接收字节数、发送数据包数、接收数据包数。这些信息可以使用<code>psutil.net_io_counters()</code>方法获取</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> psutil</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取网络 IO 信息</span></span><br><span class=\"line\">net_io = psutil.net_io_counters()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;net io :&#x27;</span>, net_io)</span><br><span class=\"line\"><span class=\"comment\"># 获取每个网络接口的 io 信息</span></span><br><span class=\"line\">net_io2 = psutil.net_io_counters(pernic=<span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;every io:&#x27;</span>, net_io2)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>运行结果 <img src=\"https://i.loli.net/2020/03/21/4OkmrvhIfe5ysuD.png\" alt=\"image.png\"></p>\n<h3 id=\"其它系统信息\"><a href=\"#其它系统信息\" class=\"headerlink\" title=\"其它系统信息\"></a>其它系统信息</h3><p>除了上面 cpu、内存、网络、磁盘等信息的获取，<code>psutil</code>模块还可以获取一些运维工作中也需要用到的信息，如用户登录、开机时间等</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> psutil</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取当前用户信息</span></span><br><span class=\"line\">user = psutil.users()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;now logined user info :&#x27;</span>, user)</span><br><span class=\"line\"><span class=\"comment\"># 获取开机时间，并格式化</span></span><br><span class=\"line\">startTime = psutil.boot_time()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;boot time is :&#x27;</span>, startTime)</span><br><span class=\"line\">startTime = datetime.datetime.fromtimestamp(startTime).strftime(<span class=\"string\">&quot;%Y-%m-%d&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;format boot time is :&#x27;</span>, startTime)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>运行结果 <img src=\"https://i.loli.net/2020/03/21/hvG5inmCfgcTaOl.png\" alt=\"image.png\"></p>\n<h2 id=\"后面的话\"><a href=\"#后面的话\" class=\"headerlink\" title=\"后面的话\"></a>后面的话</h2><p>psutil 还有很多在运维中经常用到的模块，可以查看该模块有哪些方法可使用到工作中</p>\n","categories":["skills"],"tags":["运维","Python","自动化"]},{"title":"运维提升——Kubernetes（02）","url":"/2020/03/23/%E8%BF%90%E7%BB%B4%E6%8F%90%E5%8D%87-kubernetes%EF%BC%8802%EF%BC%89/","content":"<h1 id=\"Kubernetes-基本概念和术语\"><a href=\"#Kubernetes-基本概念和术语\" class=\"headerlink\" title=\"Kubernetes 基本概念和术语\"></a>Kubernetes 基本概念和术语</h1><blockquote>\n<p>晚上刚下班，学习下 Kubernetes 的基本概念和术语，先了解基本概念，后面不至于学的时候一脸懵逼</p>\n</blockquote>\n<h2 id=\"Master\"><a href=\"#Master\" class=\"headerlink\" title=\"Master\"></a>Master</h2><p><code>Kubernetes</code>里面 Master指的是集群控制节点，每个 Kubernetes 集群里面都需要有一个Master节点负责整个集群的管理和控制，基本上 Kubernetes 的所有控制指令都发送给它，它负责具体的执行过程。Master节点一般占据一个独立的服务器（高可用部署建议使用 3 台服务器），如果 Master节点宕机或者不可以，那么集群内容器应用的管理都将失效（不像 zookeeper 一样可以推选出一个新的 master 节点） Master节点上运行着一组关键进程：</p>\n<span id=\"more\"></span>\n<ul>\n<li>Kubernetes API Servre (kube-apiserver): 提供了 HTTP Rest 接口的关键服务进程， Kubernetes 里所有资源的增删改查等操作的唯一入口，也是集群控制的入口进程。</li>\n<li>Kubernetes Controller Manager（kube-controller-manager）: Kubernetes 里面所有资源对象的自动化控制中心，可以理解为资源对象的‘大总管’。</li>\n<li>Kuberneter Scheduler (kube-scheduler): 负责资源调度（Pod 调度）的进程，相当于公司的‘调度室’。</li>\n</ul>\n<p>另外，<code>Matser</code> 节点上还需要启动一个<code>etcd</code>服务，因为<code>Kubernetes</code>里面所有资源对象的数据都是保存在<code>etcd</code>中的。</p>\n<h2 id=\"Node\"><a href=\"#Node\" class=\"headerlink\" title=\"Node\"></a>Node</h2><p>和其它高可用集群类似， Kubernetes 集群中其他机器被称为 Node 节点。和 Master 一样，Node 节点可以是一台物理主机也可以是一台虚拟机。Node 节点是 Kubernetes 集群中的工作负载节点，每个 Node 都会被 Master 分配一些工作负载（Docker 容器），当某个 Node 宕机时，其上的工作负载就会被 Master 节点自动转移到其它节点上去。 每个 Node 节点上都运行着一组关键进程：</p>\n<ul>\n<li>kubelet: 负载 Pod 对应容器的创建、启停等任务，同事与 Master 节点密切协作，实现集群管理的基本功能。</li>\n<li>kube-proxy：实现 Kubernetes Serveice 的通信和负载均衡机制的重要组件</li>\n<li>Docker Engine（Docker）：Docker 引擎，负责本机的容器创建和管理工作</li>\n</ul>\n<p>在默认情况下，安装配置启动好上述关键进程的 Node 节点会自动想 Master 节点上注册自己，Node 节点可以在运行期间动态增加到 Kubernetes 集群中。kubelet 进程会定时想 Master 节点汇报自身的情报，如操作系统、Docker 版本、机器的 CPU 和内存情况，当某个 Node 节点超过指定时间不上报信息时，Master 会判定该节点‘失联’，Node 的状态会被标记为‘Not ready’，随后 Master 会触发‘工作负载大转移’的自动流程。</p>\n<h2 id=\"Pod\"><a href=\"#Pod\" class=\"headerlink\" title=\"Pod\"></a>Pod</h2><p>Pod 是 Kubernetes 的最重要也是最基本的概念。是最小部署单元，不是一个程序&#x2F;进程，而是一个环境(包括容器、存储、网络<code>ip:port</code>、容器配置)，其中可以运行1个或多个container（docker或其他容器），在一个pod内部的container共享所有资源，包括共享pod的ip:port和磁盘。 Kubernetes 为每个 Pod 分配了<strong>唯一的</strong> IP 地址，称之为 Pod IP，一个 Pod 容器中共享 Pod IP。 Kubernetes 集群中任意两个 Pod 之间支持 TCP&#x2F;IP 直接通信。</p>\n<h2 id=\"Label（标签）\"><a href=\"#Label（标签）\" class=\"headerlink\" title=\"Label（标签）\"></a>Label（标签）</h2><p>Label 是 Kubernetes 系统中另一个核心概念。一个 Label 是一个 key &#x3D; Value 的键值对，其中 key 和 value 由用户自己指定。Label 可以附加到各种资源对象上，例如 Node、Pod、Service、RC 等，一个资源可以定义任意数量的 Label，同一个 Label 也可以被添加到任意数量的资源对象上去。 Label 相当于我们熟悉的“标签”，给某个资源对象定义一个 Label，就相当于给它打了一个标签，随后可以通过 Label Selector（标签选择器）查询和筛选拥有某些 Label 的资源对象， Kubernetes 通过这种方式实现了类似 SQL 的简单又通用的对象查询机制。相当于本篇博文的标签为 <a href=\"https://www.52ynn.top/index.php/tag/k8s/\" title=\"k8s\">k8s</a> 一样，可以直接筛选同类的文章 ## Replication Controller RC 是 Kubernetes 系统中的核心概念之奕，简单的说，他其实是定义了一个期望的场景，即声明某种 Pod 的副本数量在任意时刻都符合某个预期值，所以 RC 的定义包括如下几个部分</p>\n<ul>\n<li>Pod 期待的副本数（replicas）</li>\n<li>用于筛选目标的 Pod 的 Label Selector</li>\n<li>当 Pod 的数量小于预期数量时，用于创建新 Pod 的 Pod 模板（template）</li>\n</ul>\n<p>这个就有点像阿里云的弹性伸缩</p>\n<h2 id=\"Deployment\"><a href=\"#Deployment\" class=\"headerlink\" title=\"Deployment\"></a>Deployment</h2><p>Deployment 是 Kubernetes v1.2 引入的新概念，引入的目的是为例更好的解决 Pod 的编排问题。 Deployment 相对于 RC 的一个最大的升级是我们可以随时知道当前 Pod 的‘部署’进度。</p>\n<h2 id=\"Horizontal-Pod-Autoscaler\"><a href=\"#Horizontal-Pod-Autoscaler\" class=\"headerlink\" title=\"Horizontal Pod Autoscaler\"></a>Horizontal Pod Autoscaler</h2><p>HPA 与 RC、Deployment 一样，也属于一种 Kubernetes 资源对象。通过追踪分析 RC 控制所有目标 Pod 的负载变化情况，来确定是否需要针对性的调整目标 Pod 的副本数，这是 HPA 的实现原理。</p>\n<h2 id=\"StatefulSet\"><a href=\"#StatefulSet\" class=\"headerlink\" title=\"StatefulSet\"></a>StatefulSet</h2><p>Kubernetes 中，Pod 的管理对象 RC、Deployment、DaemonSet 和 Job 都是面向无状态的服务。但显示中有很多服务是有状态的。为了能够在其它节点史昂恢复某个失败的节点，这种集群中的 Pod 需要挂接某种共享存储，为了解决这个问题，在 v1.4 版本中引入这个新的额资源对象。</p>\n<h2 id=\"Service（服务）\"><a href=\"#Service（服务）\" class=\"headerlink\" title=\"Service（服务）\"></a>Service（服务）</h2><p>Service 也是 Kubernetes 里面最核心的资源对象之奕， Kubernetes 里的每个 Service 其实就是我们经常提起的微服务结构中的一个‘微服务’。 这个概念比较重要，后续实践中慢慢学习。</p>\n<h2 id=\"Volume（存储卷）\"><a href=\"#Volume（存储卷）\" class=\"headerlink\" title=\"Volume（存储卷）\"></a>Volume（存储卷）</h2><p>Volume 是 Pod 中能够被多个容器访问的共享目录。Kubernetes 中的 Volume 的概念、用途和目的与 Docker 中的 Volume 比较类似，但不相同。</p>\n<h2 id=\"Persistent-Volume\"><a href=\"#Persistent-Volume\" class=\"headerlink\" title=\"Persistent Volume\"></a>Persistent Volume</h2><p>PV 可以理解成 Kubernetes 集群中的某个网络存储对应的一块存储，与 Volume 类似，但有一些区别：</p>\n<ul>\n<li>PV 只能是网络存储，不属于任何 Node，但可以在每个 Node 上访问</li>\n<li>PV 并不是定义在 Pod 上的，而是独立于 Pod 职位的定义。</li>\n<li>PV 目前支持的类型包括： gcePersistentDisk、AWSElasticBlockStore、AzureFile、NFS、iSCSI、RBD（Rados BlockDevice）等</li>\n</ul>\n<h2 id=\"Namespace（命名空间）\"><a href=\"#Namespace（命名空间）\" class=\"headerlink\" title=\"Namespace（命名空间）\"></a>Namespace（命名空间）</h2><p>Namespace（命名空间）是 Kubernetes 中用于实现多租户的资源隔离。Namespace 通过将集群内部的资源对象‘分配’到不同的 Namespace 中，形成逻辑上分组的不同项目、小组或用户组，便于不同分组在共享使用整个集群的资源的同时还能被分别管理。 Kubernetes 集群在启动后，会创建一个名为‘default’的 Namespace。</p>\n<h2 id=\"Annotation（注解）\"><a href=\"#Annotation（注解）\" class=\"headerlink\" title=\"Annotation（注解）\"></a>Annotation（注解）</h2><p>Annotation 与 Label 类似，也使用 key&#x2F;value 键值对的形式进行定义。不同的是 Label 具有严格的命名规则，它定义的是 Kubernetes 对象的元数据（Metadata），并且用户 Label Selector。而 Annotation 则是用户任意定义的“附加”信息，以便于外部工具进行查找，很多时候，Kubernetes 的模块自身会通过 Annotation 的方式标记资源对象的一些特殊信息</p>\n<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><p>Kubernetes 中的概念术语相对于 Docker 而言还是比较多的，而且也比较复杂，今天只是简单的过了一遍，让自己的脑子中有一个基本的印象，等后续学习中遇到相关的概念再进行一个加深的理解。</p>\n","categories":["skills"],"tags":["运维","教程","k8s"]},{"title":"Nginx 配置正向代理","url":"/2020/03/24/nginx-%E9%85%8D%E7%BD%AE%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86/","content":"<h1 id=\"Nginx-配置正向代理\"><a href=\"#Nginx-配置正向代理\" class=\"headerlink\" title=\"Nginx 配置正向代理\"></a>Nginx 配置正向代理</h1><p>之前一直使用 squid 进行正向代理配置，今天尝试采用 nginx 进行正向代理配置。 nginx本身是不支持https协议请求转发，为了让nginx能达到这一效果需要借助第三方模块<a href=\"https://github.com/chobits/ngx_http_proxy_connect_module.git\" title=\"ngx_http_proxy_connect_module\">ngx_http_proxy_connect_module</a>。</p>\n<h1 id=\"安装基础依赖\"><a href=\"#安装基础依赖\" class=\"headerlink\" title=\"安装基础依赖\"></a>安装基础依赖</h1><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum -y install pcre-devel zlib-devel gcc gcc+c++ make openssl-devel pcre-devel  zlib-devel patch   git </span><br></pre></td></tr></table></figure>\n\n<h1 id=\"下载-nginx-安装包\"><a href=\"#下载-nginx-安装包\" class=\"headerlink\" title=\"下载 nginx 安装包\"></a>下载 nginx 安装包</h1><p>这里下载最新的稳定版本 <a href=\"http://nginx.org/download/nginx-1.16.1.tar.gz\" title=\"1.16.1\">1.16.1</a></p>\n<span id=\"more\"></span>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget http://nginx.org/download/nginx-1.16.1.tar.gz</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"下载-ngx-http-proxy-connect-module\"><a href=\"#下载-ngx-http-proxy-connect-module\" class=\"headerlink\" title=\"下载 ngx_http_proxy_connect_module\"></a>下载 ngx_http_proxy_connect_module</h1><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/chobits/ngx_http_proxy_connect_module.git</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p>我这里下载好的包都在&#x2F;root目录下</p>\n<h4 id=\"编译安装\"><a href=\"#编译安装\" class=\"headerlink\" title=\"编译安装\"></a>编译安装</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd /root</span><br><span class=\"line\">tar -zxvf nginx-1.16.1.tar.gz </span><br><span class=\"line\">cd nginx-1.16.1</span><br><span class=\"line\">patch -p1 &lt;  ../ngx_http_proxy_connect_module/patch/proxy_connect_rewrite_101504.patch </span><br><span class=\"line\">./configure --add-module=../ngx_http_proxy_connect_module</span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n\n<p>默认是安装在<code>/usr/local/nginx</code>目录下</p>\n<h4 id=\"配置代理\"><a href=\"#配置代理\" class=\"headerlink\" title=\"配置代理\"></a>配置代理</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">vi /usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure>\n\n<p>http 段中添加如下内容</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">       <span class=\"attribute\">resolver</span> <span class=\"number\">8.8.8.8</span>;   <span class=\"comment\">#dns解析地址</span></span><br><span class=\"line\">       <span class=\"attribute\">listen</span> <span class=\"number\">8080</span>;          <span class=\"comment\">#代理监听端口</span></span><br><span class=\"line\">       proxy_connect;</span><br><span class=\"line\">       <span class=\"attribute\">proxy_connect_allow</span>          <span class=\"number\">80</span> <span class=\"number\">443</span> <span class=\"number\">563</span>;</span><br><span class=\"line\">       <span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">             <span class=\"attribute\">proxy_pass</span> <span class=\"variable\">$scheme</span>://<span class=\"variable\">$http_host</span><span class=\"variable\">$request_uri</span>;     <span class=\"comment\">#设定https代理服务器的协议和地址</span></span><br><span class=\"line\">             <span class=\"attribute\">proxy_set_header</span> HOST <span class=\"variable\">$host</span>;</span><br><span class=\"line\">             <span class=\"attribute\">proxy_buffers</span> <span class=\"number\">256</span> <span class=\"number\">4k</span>;</span><br><span class=\"line\">             <span class=\"attribute\">proxy_max_temp_file_size</span> <span class=\"number\">0k</span>;</span><br><span class=\"line\">             <span class=\"attribute\">proxy_connect_timeout</span> <span class=\"number\">30</span>;</span><br><span class=\"line\">             <span class=\"attribute\">proxy_send_timeout</span> <span class=\"number\">60</span>;</span><br><span class=\"line\">             <span class=\"attribute\">proxy_read_timeout</span> <span class=\"number\">60</span>;</span><br><span class=\"line\">             <span class=\"attribute\">proxy_next_upstream</span> <span class=\"literal\">error</span> timeout invalid_header http_502;</span><br><span class=\"line\"></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">        <span class=\"attribute\">error_page</span>   <span class=\"number\">500</span> <span class=\"number\">502</span> <span class=\"number\">503</span> <span class=\"number\">504</span>  /50x.html;</span><br><span class=\"line\">        <span class=\"section\">location</span> = /50x.html &#123;</span><br><span class=\"line\">            <span class=\"attribute\">root</span>   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"启动-nginx\"><a href=\"#启动-nginx\" class=\"headerlink\" title=\"启动 nginx\"></a>启动 nginx</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">/usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"检测\"><a href=\"#检测\" class=\"headerlink\" title=\"检测\"></a>检测</h1><p>添加本地代理（如要永久添加需要将代理配置添加到环境变量）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 添加 http 代理</span><br><span class=\"line\">export http_proxy=http://127.0.0.1:8080</span><br><span class=\"line\"># 添加 https 代理</span><br><span class=\"line\">export http_proxy=https://127.0.0.1:8080</span><br></pre></td></tr></table></figure>\n\n<p>检测 http 代理是否成功</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@centos-linux nginx]# wget http://baidu.com</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>出现</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">--2020-03-24 10:00:55--  http://baidu.com/</span><br><span class=\"line\">Connecting to 127.0.0.1:8080... connected.</span><br><span class=\"line\">Proxy request sent, awaiting response... 200 OK</span><br><span class=\"line\">Length: 81 [text/html]</span><br><span class=\"line\">Saving to: &#x27;index.html&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">100%[==================================================================================================================================================================&gt;] 81          --.-K/s   in 0s      </span><br><span class=\"line\"></span><br><span class=\"line\">2020-03-24 10:00:55 (5.14 MB/s) - &#x27;index.html&#x27; saved [81/81]</span><br></pre></td></tr></table></figure>\n\n<p>检测 https 代理是否成功</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget https://baidu.com</span><br></pre></td></tr></table></figure>\n\n<p>出现</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">--2020-03-24 10:02:49--  https://baidu.com/</span><br><span class=\"line\">Connecting to 127.0.0.1:8080... connected.</span><br><span class=\"line\">Proxy request sent, awaiting response... 302 Moved Temporarily</span><br><span class=\"line\">Location: http://www.baidu.com/ [following]</span><br><span class=\"line\">--2020-03-24 10:02:49--  http://www.baidu.com/</span><br><span class=\"line\">Connecting to 127.0.0.1:8080... connected.</span><br><span class=\"line\">Proxy request sent, awaiting response... 200 OK</span><br><span class=\"line\">Length: 2381 (2.3K) [text/html]</span><br><span class=\"line\">Saving to: &#x27;index.html.1&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">100%[==================================================================================================================================================================&gt;] 2,381       --.-K/s   in 0s      </span><br><span class=\"line\"></span><br><span class=\"line\">2020-03-24 10:02:51 (154 MB/s) - &#x27;index.html.1&#x27; saved [2381/2381]</span><br></pre></td></tr></table></figure>","categories":["skills"],"tags":["运维","正向代理","nginx"]},{"title":"Python 自动化运维（02）","url":"/2020/03/24/python-%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4%EF%BC%8802%EF%BC%89/","content":"<blockquote>\n<p>操作系统 macOS Catalina Python版本：3.7 所有代码可在 <a href=\"https://github.com/Swq1227/devops\" title=\"GitHub\">GitHub</a> 获取</p>\n</blockquote>\n<span id=\"more\"></span>\n<h1 id=\"IP-地址处理模块-IPy\"><a href=\"#IP-地址处理模块-IPy\" class=\"headerlink\" title=\"IP 地址处理模块 IPy\"></a>IP 地址处理模块 IPy</h1><p>IP 地址规划是网络设计中的一个重要环节，IPy 模块可以很好的辅助我们高效的完成 IP 的规划工作。 安装过程就不再赘述了，和安装 psutil 一样的方式即可。</p>\n<h3 id=\"IP-地址、网段的基本处理\"><a href=\"#IP-地址、网段的基本处理\" class=\"headerlink\" title=\"IP 地址、网段的基本处理\"></a>IP 地址、网段的基本处理</h3><p>IPy 模块包含 IP 类,可以输出指定的网段的 IP 个数及所有的 IP 地址清单。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> IPy <span class=\"keyword\">import</span> IP</span><br><span class=\"line\"></span><br><span class=\"line\">ip = IP(<span class=\"string\">&#x27;192.168.0.0/16&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 输出个数</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(ip.<span class=\"built_in\">len</span>())</span><br><span class=\"line\"><span class=\"comment\"># 打印所有 ip 地址清单</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> ip:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(x)</span><br></pre></td></tr></table></figure>\n\n<p>运行结果： <img src=\"https://i.loli.net/2020/03/24/y4smxnTJjouh7B3.png\" alt=\"image.png\"> IP 方法也支持网络地址的转换，例如根据 IP 地址与掩码生产网段格式</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> IPy <span class=\"keyword\">import</span> IP</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(IP(<span class=\"string\">&#x27;192.168.1.0&#x27;</span>).make_net(<span class=\"string\">&#x27;255.255.255.0&#x27;</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(IP(<span class=\"string\">&#x27;192.168.1.0/255.255.255.0&#x27;</span>, make_net=<span class=\"literal\">True</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(IP(<span class=\"string\">&#x27;192.168.1.0-192.168.1.255&#x27;</span>, make_net=<span class=\"literal\">True</span>))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>运行结果 <img src=\"https://i.loli.net/2020/03/24/fcZxjQC3hWRua65.png\" alt=\"image.png\"></p>\n<h3 id=\"多网络计算方法\"><a href=\"#多网络计算方法\" class=\"headerlink\" title=\"多网络计算方法\"></a>多网络计算方法</h3><p>有时候我么想比较两个网段是否存在包含、重叠关系。IPy 支持类似于述职型数据的比较，以帮助 IP 对象进行比较</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>IP(<span class=\"string\">&#x27;192.168.0.0/23&#x27;</span>).overlaps(<span class=\"string\">&#x27;192.168.0.0/24&#x27;</span>)</span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"comment\">#返回 1 代表存在重叠</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span> IP(<span class=\"string\">&#x27;192.168.0.0/24&#x27;</span>).overlaps(<span class=\"string\">&#x27;192.168.2.0&#x27;</span>)</span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"comment\"># 返回 0 代表不存在重叠</span></span><br></pre></td></tr></table></figure>\n\n<p>下面写个例子，根据输入的 IP 或子网返回网络、掩码、广播、反向解析、子网数、IP 类型等信息</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> IPy <span class=\"keyword\">import</span> IP</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 接受用户输入的 IP 地址或网段地址</span></span><br><span class=\"line\">ip_s = <span class=\"built_in\">input</span>(<span class=\"string\">&#x27;Please input an IP or net-range:&#x27;</span>)</span><br><span class=\"line\">ips = IP(ip_s)</span><br><span class=\"line\"><span class=\"comment\"># 如果长度大于 1 那就是一个网段地址</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(ips) &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;net:&#x27;</span>, ips.net())  <span class=\"comment\"># 输出网络地址</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;netmask:&#x27;</span>, ips.netmask())  <span class=\"comment\"># 输出网络掩码地址</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;broadcast:&#x27;</span>, ips.broadcast())  <span class=\"comment\"># 输出网络广播地址</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;reverse address:&#x27;</span>, ips.reverseName()[<span class=\"number\">0</span>])  <span class=\"comment\"># 输出地址反向解析</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;subnet:&#x27;</span>, <span class=\"built_in\">len</span>(ips))  <span class=\"comment\"># 输出网络子网数</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;reverse address:&#x27;</span>, ips.reverseName()[<span class=\"number\">0</span>])  <span class=\"comment\"># 输出地址反向解析</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;hexadecimal:&#x27;</span>, ips.strHex())  <span class=\"comment\"># 输出十六进制地址</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;binary ip&#x27;</span>, ips.strBin())  <span class=\"comment\"># 输出二进制地址</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;ipType:&#x27;</span>, ips.iptype())  <span class=\"comment\"># 输出地址类型</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>先尝试输入网段，运行结果如下 <img src=\"https://i.loli.net/2020/03/24/TaYiIyFgzWGDtZM.png\" alt=\"image.png\"> 输入 ip 地址，运行结果如下 <img src=\"https://i.loli.net/2020/03/24/AfkJTG2OWbKUp9q.png\" alt=\"image.png\"></p>\n","categories":["skills"],"tags":["运维","Python","自动化"]},{"title":"Python 自动化运维（03）","url":"/2020/03/24/python-%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4%EF%BC%8803%EF%BC%89/","content":"<blockquote>\n<p>操作系统 macOS Catalina Python版本：3.7 所有代码可在 <a href=\"https://github.com/Swq1227/devops\" title=\"GitHub\">GitHub</a> 获取</p>\n</blockquote>\n<span id=\"more\"></span>\n<h1 id=\"DNS-处理模块-dnspython\"><a href=\"#DNS-处理模块-dnspython\" class=\"headerlink\" title=\"DNS 处理模块 dnspython\"></a>DNS 处理模块 dnspython</h1><p><code>dnspython</code>是 Python 实现的一个 DNS 工具包，它几乎支持所有的记录类型，可以用于查询。传输并动态更新 ZONE 信息，同时支持 TSIG（事务签名）验证消息和 EDNS0（扩展 DNS）。</p>\n<h3 id=\"常见解析类型实例说明\"><a href=\"#常见解析类型实例说明\" class=\"headerlink\" title=\"常见解析类型实例说明\"></a>常见解析类型实例说明</h3><p>常见的 DNS 解析类型包括 A、MX、NS、CNAME 等，利用 dnspython 的 <code>dns.resolver.query</code>方法可以简单实现这些 DNS 类型的查询。</p>\n<h4 id=\"A-记录查询\"><a href=\"#A-记录查询\" class=\"headerlink\" title=\"A 记录查询\"></a>A 记录查询</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> dns.resolver</span><br><span class=\"line\"></span><br><span class=\"line\">domain = <span class=\"built_in\">input</span>(<span class=\"string\">&#x27;Please input an domain: &#x27;</span>)  <span class=\"comment\"># 输入域名地址</span></span><br><span class=\"line\">A = dns.resolver.query(domain, <span class=\"string\">&#x27;A&#x27;</span>)  <span class=\"comment\"># 指定查询类型为 A 记录</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> A.response.answer:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> i.items:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(j.address)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>运行结果 <img src=\"https://i.loli.net/2020/03/24/qFmW9xjbLRCo5Si.png\" alt=\"image.png\"></p>\n<h4 id=\"MX-记录查询\"><a href=\"#MX-记录查询\" class=\"headerlink\" title=\"MX 记录查询\"></a>MX 记录查询</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> dns.resolver</span><br><span class=\"line\"></span><br><span class=\"line\">domain = <span class=\"built_in\">input</span>(<span class=\"string\">&#x27;Please input an domain: &#x27;</span>)  <span class=\"comment\"># 输入域名地址</span></span><br><span class=\"line\">MX = dns.resolver.query(domain, <span class=\"string\">&#x27;MX&#x27;</span>)  <span class=\"comment\"># 指定查询类型为 MX# 记录</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> MX:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;MX preference =&#x27;</span>,i.preference,<span class=\"string\">&#x27;mail exchanger=&#x27;</span>,i.exchange)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.loli.net/2020/03/24/rWEgtG2On4H7UKM.png\" alt=\"image.png\"></p>\n<h4 id=\"NS-记录查询\"><a href=\"#NS-记录查询\" class=\"headerlink\" title=\"NS 记录查询\"></a>NS 记录查询</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> dns.resolver</span><br><span class=\"line\"></span><br><span class=\"line\">domain = <span class=\"built_in\">input</span>(<span class=\"string\">&#x27;Please input an domain: &#x27;</span>)  <span class=\"comment\"># 输入域名地址</span></span><br><span class=\"line\">NS = dns.resolver.query(domain, <span class=\"string\">&#x27;NS&#x27;</span>)  <span class=\"comment\"># 指定查询类型为 NS 记录</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> NS.response.answer:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> i.items:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(j.to_text)</span><br></pre></td></tr></table></figure>\n\n<p>只限输入一级域名，运行结果 <img src=\"https://i.loli.net/2020/03/24/rWEgtG2On4H7UKM.png\" alt=\"image.png\"></p>\n<h4 id=\"CNAME-记录查询\"><a href=\"#CNAME-记录查询\" class=\"headerlink\" title=\"CNAME 记录查询\"></a>CNAME 记录查询</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> dns.resolver</span><br><span class=\"line\"></span><br><span class=\"line\">domain = <span class=\"built_in\">input</span>(<span class=\"string\">&#x27;Please input an domain: &#x27;</span>)  <span class=\"comment\"># 输入域名地址</span></span><br><span class=\"line\">CNAME = dns.resolver.query(domain, <span class=\"string\">&#x27;CNAME&#x27;</span>)  <span class=\"comment\"># 指定查询类型为 CNAME 记录</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> CNAME.response.answer:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> i.items:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(j.to_text)</span><br></pre></td></tr></table></figure>\n\n<p>运行结果 <img src=\"https://i.loli.net/2020/03/24/SjBQ1izRNrZkUlc.png\" alt=\"image.png\"></p>\n<h3 id=\"DNS-域名轮循业务监控\"><a href=\"#DNS-域名轮循业务监控\" class=\"headerlink\" title=\"DNS 域名轮循业务监控\"></a>DNS 域名轮循业务监控</h3><p>查询业务域名 A 记录信息，查询出所有 IP 地址列表，再使用 httplib 模块的 request 方法以 GET 方式请求监控页面，监控业务所有的 IP 是否服务正常</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> dns.resolver</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> httplib2</span><br><span class=\"line\"></span><br><span class=\"line\">iplist = []  <span class=\"comment\"># 定义域名 IP 列表变量</span></span><br><span class=\"line\">appdomain = <span class=\"string\">&#x27;www.baidu.com&#x27;</span>  <span class=\"comment\"># 定义业务域名</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_iplist</span>(<span class=\"params\">domain=<span class=\"string\">&quot;&quot;</span></span>):  <span class=\"comment\"># 域名解析行数，解析成功的 ip 将被追加到 iplist</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        A = dns.resolver.query(domain, <span class=\"string\">&#x27;A&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;dns resolver error:&quot;</span>, <span class=\"built_in\">str</span>(e))</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> A.response.answer:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> i.items:</span><br><span class=\"line\">            iplist.append(j.address)  <span class=\"comment\"># 将 ip 追加到 iplist</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">checkip</span>(<span class=\"params\">ip</span>):</span><br><span class=\"line\">    checkurl = ip + <span class=\"string\">&quot;:80&quot;</span></span><br><span class=\"line\">    getcontent = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    httplib2.socket.setdefaulttimeout(<span class=\"number\">5</span>)  <span class=\"comment\"># 定义 http 连接超时时间，单位秒</span></span><br><span class=\"line\">    conn = httplib2.HTTPConnectionWithTimeout(checkurl)  <span class=\"comment\"># 创建连接对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        conn.request(<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;/&quot;</span>, headers=&#123;<span class=\"string\">&quot;Host&quot;</span>: appdomain&#125;)  <span class=\"comment\"># 发起 URL 请求，添加 host 主机头</span></span><br><span class=\"line\">        r = conn.getresponse()</span><br><span class=\"line\">        getcontent = r.read(<span class=\"number\">15</span>)  <span class=\"comment\"># 获取 URL 页面前 15 个字符</span></span><br><span class=\"line\">    <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">&quot;html&quot;</span> <span class=\"keyword\">in</span> <span class=\"built_in\">str</span>(getcontent):  <span class=\"comment\"># 判断是否包含 html 字符，包含说明请求成功</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(ip + <span class=\"string\">&quot;[OK]&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(ip + <span class=\"string\">&quot;[ERROR]&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> get_iplist(appdomain) <span class=\"keyword\">and</span> <span class=\"built_in\">len</span>(iplist) &gt; <span class=\"number\">0</span>:  <span class=\"comment\"># 条件：域名解析正确且至少返回一个 IP</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> ip <span class=\"keyword\">in</span> iplist:</span><br><span class=\"line\">            checkip(ip)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;dns reslover error&quot;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>运行结果 <img src=\"https://i.loli.net/2020/03/24/HtLNymF8Xo5alEQ.png\" alt=\"image.png\"> 将此脚本放到 crontab 中定时运行，再结合告警程序，这样一个基于域名轮循的业务监控就已经完成。</p>\n","categories":["skills"],"tags":["运维","Python","自动化"]},{"title":"DNS负载均衡","url":"/2020/03/26/dns%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/","content":"<h1 id=\"DNS-负载均衡\"><a href=\"#DNS-负载均衡\" class=\"headerlink\" title=\"DNS 负载均衡\"></a>DNS 负载均衡</h1><p>前两天学习 <code>python</code> 模块 <code>dnspython</code> 时发现<code>baidu.com</code>的 dns A 记录有两个地址，顺便记录下<code>DNS</code>负载。</p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>DNS（Domain Name System）是因特网的一项服务，它作为域名和IP地址相互映射的一个分布式数据库，能够使人更方便的访问互联网。人们在通过浏览器访问网站时只需要记住网站的域名即可，而不需要记住那些不太容易理解的IP地址。在DNS系统中有一个比较重要的的资源类型叫做主机记录也称为A记录，A记录是用于名称解析的重要记录，它将特定的主机名映射到对应主机的IP地址上。如果你有一个自己的域名，那么要想别人能访问到你的网站，你需要到特定的DNS解析服务商的服务器上填写A记录，过一段时间后，别人就能通过你的域名访问你的网站了。DNS除了能解析域名之外还具有负载均衡的功能，<span id=\"more\"></span> 原理图： <img src=\"https://i.loli.net/2020/03/26/LJTnrHxjYgchG6X.png\" alt=\"image.png\"> 由上图可以看出，在DNS服务器中应该配置了多个A记录，如： <code>www.apusapp.com IN A 114.100.20.201;</code> <code>www.apusapp.com IN A 114.100.20.202;</code> <code>www.apusapp.com IN A 114.100.20.203;</code> 因此，每次域名解析请求都会根据对应的负载均衡算法计算出一个不同的IP地址并返回，这样A记录中配置多个服务器就可以构成一个集群，并可以实现负载均衡。上图中，用户请求<code>www.apusapp.com</code>，DNS根据A记录和负载均衡算法计算得到一个IP地址<code>114.100.20.203</code>，并返回给浏览器，浏览器根据该IP地址，访问真实的物理服务器<code>114.100.20.203</code>。所有这些操作对用户来说都是透明的，用户可能只知道<code>www.apusapp.com</code>这个域名。</p>\n<h2 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h2><h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ul>\n<li>将负载均衡的工作交给DNS，省去了网站管理维护负载均衡服务器的麻烦。</li>\n<li>技术实现比较灵活、方便，简单易行，成本低，使用于大多数TCP&#x2F;IP应用。</li>\n<li>对于部署在服务器上的应用来说不需要进行任何的代码修改即可实现不同机器上的应用访问。</li>\n<li>服务器可以位于互联网的任意位置。</li>\n<li>同时许多DNS还支持基于地理位置的域名解析，即会将域名解析成距离用户地理最近的一个服务器地址，这样就可以加速用户访问，改善性能。</li>\n</ul>\n<h4 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><ul>\n<li>目前的DNS是多级解析的，每一级DNS都可能缓存A记录，当某台服务器下线之后，即使修改了A记录，要使其生效也需要较长的时间，这段时间，DNS任然会将域名解析到已下线的服务器上，最终导致用户访问失败。</li>\n<li>不能够按服务器的处理能力来分配负载。DNS负载均衡采用的是简单的轮询算法，不能区分服务器之间的差异，不能反映服务器当前运行状态，所以其的负载均衡效果并不是太好。</li>\n<li>可能会造成额外的网络问题。为了使本DNS服务器和其他DNS服务器及时交互，保证DNS数据及时更新，使地址能随机分配，一般都要将DNS的刷新时间设置的较小，但太小将会使DNS流量大增造成额外的网络问题。</li>\n</ul>\n<h2 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h2><p>下面进行实际操作实现 DNS 负载，我将 <code>dns.52ynn.top</code>先添加一条 A 记录解析： <img src=\"https://i.loli.net/2020/03/26/wKhDOxCb8V6Fmko.png\" alt=\"image.png\"> 通过解析查询得出一条结果： <img src=\"https://i.loli.net/2020/03/26/FNaXeLZRAvgc3ni.png\" alt=\"image.png\"> 现在我们再加一条 A 记录解析，现在有两条记录 <img src=\"https://i.loli.net/2020/03/26/XvCNMUBnW4eJwVk.png\" alt=\"image.png\"> 再查询下 A 记录结果： <img src=\"https://i.loli.net/2020/03/26/lxFb6LINgOPD4tm.png\" alt=\"image.png\"> 这就实现了 DNS 的负载，会将客户端访问解析到两台后端服务器上。 附上A记录查询代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> dns.resolver</span><br><span class=\"line\"></span><br><span class=\"line\">domain = <span class=\"built_in\">input</span>(<span class=\"string\">&#x27;Please input an domain: &#x27;</span>)  <span class=\"comment\"># 输入域名地址</span></span><br><span class=\"line\">A = dns.resolver.query(domain, <span class=\"string\">&#x27;A&#x27;</span>)  <span class=\"comment\"># 指定查询类型为 A 记录</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> A.response.answer:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> i.items:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(j.address)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","categories":["skills"],"tags":["运维","DNS"]},{"title":"运维提升——Kubernetes（03）","url":"/2020/03/31/%E8%BF%90%E7%BB%B4%E6%8F%90%E5%8D%87-kubernetes%EF%BC%8803%EF%BC%89/","content":"<h1 id=\"Kubernetes-安装与配置\"><a href=\"#Kubernetes-安装与配置\" class=\"headerlink\" title=\"Kubernetes 安装与配置\"></a>Kubernetes 安装与配置</h1><h2 id=\"系统要求\"><a href=\"#系统要求\" class=\"headerlink\" title=\"系统要求\"></a>系统要求</h2><p>软硬件</p>\n<p>最低配置</p>\n<p>推荐配置</p>\n<span id=\"more\"></span>\n<p>CPU 和内存</p>\n<p>Master：至少 2core 和 4GB 内存<br>Node:至少 4core 和 16GB</p>\n<p>Master：4core 和 16GB。<br>Node：应根据需要运行的容器数量进行配置</p>\n<p>Linux 操作系统</p>\n<p>基于 x86_64 架构的各种 Linux 发行版本</p>\n<p>Centos 7<br>Red Hat Linux 7</p>\n<p>Docker</p>\n<p>1.9 版本以上</p>\n<p>1.12 版本</p>\n<p>etcd</p>\n<p>2.0 版本及以上</p>\n<p>3.0 版本</p>\n<p><strong>这里因为没有那么多机器，所以准备采购阿里云较低配置 ECS 进行配置。</strong> 机器信息如下： <img src=\"https://i.loli.net/2020/03/31/24mRXLSVMTjczHp.png\" alt=\"image.png\"></p>\n<p>角色</p>\n<p>IP</p>\n<p>Master</p>\n<p>172.26.182.146</p>\n<p>Node</p>\n<p>172.26.170.206</p>\n<p>Node</p>\n<p>172.26.170.205</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>本文采用 kubernetes.io 官方推荐的 kubeadm 工具安装 kubernetes 集群。</p>\n<h4 id=\"检查-centos-x2F-hostname\"><a href=\"#检查-centos-x2F-hostname\" class=\"headerlink\" title=\"检查 centos &#x2F; hostname\"></a>检查 centos &#x2F; hostname</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 在 Master 节点和 Node 节点都要执行</span><br><span class=\"line\"></span><br><span class=\"line\"># 此处 hostname 的输出将会是该机器在 Kubernetes 集群中的节点名字</span><br><span class=\"line\"># 不能使用 localhost 作为节点的名字</span><br><span class=\"line\">hostname</span><br><span class=\"line\"></span><br><span class=\"line\"># 请使用 lscpu 命令，核对 CPU 信息</span><br><span class=\"line\"># Architecture: x86_64    本安装文档不支持 arm 架构</span><br><span class=\"line\"># CPU(s):       2         CPU 内核数量不能低于 2</span><br><span class=\"line\">lscpu</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装-Docker-x2F-kubelet\"><a href=\"#安装-Docker-x2F-kubelet\" class=\"headerlink\" title=\"安装 Docker &#x2F; kubelet\"></a>安装 Docker &#x2F; kubelet</h4><p>使用 root 身份在所有节点执行如下代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 在 master 节点和 Node 节点都要执行</span><br><span class=\"line\"></span><br><span class=\"line\">curl -sSL https://kuboard.cn/install-script/v1.16.0/install-kubelet.sh  sh</span><br></pre></td></tr></table></figure>\n\n<p>安装结果 <img src=\"https://i.loli.net/2020/03/31/bISAl3szVXfpmwZ.png\" alt=\"image.png\"></p>\n<h4 id=\"初始化-Master-节点\"><a href=\"#初始化-Master-节点\" class=\"headerlink\" title=\"初始化 Master 节点\"></a>初始化 Master 节点</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 只在 master 节点执行</span></span><br><span class=\"line\"><span class=\"comment\"># 替换 172.26.182.146 为 master 节点实际 IP（请使用内网 IP）</span></span><br><span class=\"line\"><span class=\"comment\"># export 命令只在当前 shell 会话中有效，开启新的 shell 窗口后，如果要继续安装过程，请重新执行此处的 export 命令</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> MASTER_IP=172.26.182.146</span><br><span class=\"line\"><span class=\"comment\"># 替换 apiserver.demo 为 您想要的 dnsName (不建议使用 master 的 hostname 作为 APISERVER_NAME)</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> APISERVER_NAME=apiserver.demo</span><br><span class=\"line\"><span class=\"comment\"># Kubernetes 容器组所在的网段，该网段安装完成后，由 kubernetes 创建，事先并不存在于您的物理网络中</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> POD_SUBNET=10.100.0.1/20</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$&#123;MASTER_IP&#125;</span>    <span class=\"variable\">$&#123;APISERVER_NAME&#125;</span>&quot;</span> &gt;&gt; /etc/hosts</span><br><span class=\"line\">curl -sSL https://kuboard.cn/install-script/v1.16.0/init-master.sh  sh</span><br></pre></td></tr></table></figure>\n\n<p>检查 Master 初始化结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 只在 master 节点执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 执行如下命令，等待 3-10 分钟，直到所有的容器组处于 Running 状态</span></span><br><span class=\"line\">watch kubectl get pod -n kube-system -o wide</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>执行结果 <img src=\"https://i.loli.net/2020/04/01/nhRvUIE9yeDBzFH.png\" alt=\"image.png\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看 master 节点初始化结果</span></span><br><span class=\"line\">kubectl get nodes -o wide</span><br></pre></td></tr></table></figure>\n\n<p>执行结果 <img src=\"https://i.loli.net/2020/04/01/JI34QPLemANaTwM.png\" alt=\"image.png\"></p>\n<h4 id=\"初始化-Node\"><a href=\"#初始化-Node\" class=\"headerlink\" title=\"初始化 Node\"></a>初始化 Node</h4><p>在 master 上执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 只在 master 节点执行</span></span><br><span class=\"line\">kubeadm token create --print-join-command</span><br></pre></td></tr></table></figure>\n\n<p>执行结果</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 上条命令输出</span><br><span class=\"line\">kubeadm join apiserver.demo:6443 --token em5532.75zpnql598hyysgv     --discovery-token-ca-cert-hash sha256:db74610b703df55095ae326845f0e4add727fa4e554cab980119d9d1b3ca464f </span><br></pre></td></tr></table></figure>\n\n<p>在所有 node 上执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 只在 worker 节点执行</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> MASTER_IP=172.26.182.146</span><br><span class=\"line\"><span class=\"comment\"># 替换 apiserver.demo 为 您想要的 dnsName (不建议使用 master 的 hostname 作为 APISERVER_NAME)</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> APISERVER_NAME=apiserver.demo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$&#123;MASTER_IP&#125;</span>    <span class=\"variable\">$&#123;APISERVER_NAME&#125;</span>&quot;</span> &gt;&gt; /etc/hosts</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 替换为 master 节点上 kubeadm token create 命令的输出</span></span><br><span class=\"line\">kubeadm <span class=\"built_in\">join</span> apiserver.demo:6443 --token em5532.75zpnql598hyysgv     --discovery-token-ca-cert-hash sha256:db74610b703df55095ae326845f0e4add727fa4e554cab980119d9d1b3ca464f </span><br></pre></td></tr></table></figure>\n\n<h5 id=\"检查初始化结果\"><a href=\"#检查初始化结果\" class=\"headerlink\" title=\"检查初始化结果\"></a>检查初始化结果</h5><p>在 master 上执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 只在 master 节点执行</span></span><br><span class=\"line\">kubectl get nodes -o wide</span><br></pre></td></tr></table></figure>\n\n<p>结果 <img src=\"https://i.loli.net/2020/04/01/6SCK8lsu4nDkjUq.png\" alt=\"image.png\"> 至此，完成集群配置</p>\n","categories":["skills"],"tags":["运维","k8s"]},{"title":"Python 自动化运维（04）","url":"/2020/04/01/python-%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4%EF%BC%8804%EF%BC%89/","content":"<blockquote>\n<p>操作系统 macOS Catalina Python版本：3.7 所有代码可在 <a href=\"https://github.com/Swq1227/devops\" title=\"GitHub\">GitHub</a> 获取</p>\n</blockquote>\n<span id=\"more\"></span>\n<h1 id=\"文件与目录差异对比方法\"><a href=\"#文件与目录差异对比方法\" class=\"headerlink\" title=\"文件与目录差异对比方法\"></a>文件与目录差异对比方法</h1><h2 id=\"1-文件内容差异对比方法\"><a href=\"#1-文件内容差异对比方法\" class=\"headerlink\" title=\"1. 文件内容差异对比方法\"></a>1. 文件内容差异对比方法</h2><p>python中可以通过 difflib 模块实现文件文件内容差异对比。difflib 作为 python 的标准库模块，无需安装，作用是对比文本之间的差异，且支持输出可读性比较强的 HTML 文档，与 Linux 下的 diff 命令相似。</p>\n<h4 id=\"两个字符串的差异对比\"><a href=\"#两个字符串的差异对比\" class=\"headerlink\" title=\"两个字符串的差异对比\"></a>两个字符串的差异对比</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> difflib</span><br><span class=\"line\"></span><br><span class=\"line\">text1 = <span class=\"string\">&quot;&quot;&quot;text1:</span></span><br><span class=\"line\"><span class=\"string\">This module provides classes and functions for comparing sequences.</span></span><br><span class=\"line\"><span class=\"string\">including HTML and context and unified diffs.</span></span><br><span class=\"line\"><span class=\"string\">difflib document v7.4</span></span><br><span class=\"line\"><span class=\"string\">add string</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\">text1_lines = text1.splitlines()  <span class=\"comment\"># 以行进行分隔，以便进行对比</span></span><br><span class=\"line\">text2 = <span class=\"string\">&quot;&quot;&quot;text2&quot;</span></span><br><span class=\"line\"><span class=\"string\">This module provides classes and functions for comparing sequences.</span></span><br><span class=\"line\"><span class=\"string\">including HTML and context and unified diffs.</span></span><br><span class=\"line\"><span class=\"string\">difflib document v7.5</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\">text2_lines = text2.splitlines()</span><br><span class=\"line\">d = difflib.Differ()  <span class=\"comment\"># 创建 Differ（) 对象</span></span><br><span class=\"line\">diff = d.compare(text1_lines, text2_lines)  <span class=\"comment\"># 采用 compare 方法对字符串进行比较</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;\\n&#x27;</span>.join(<span class=\"built_in\">list</span>(diff)))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>执行结果 <img src=\"https://i.loli.net/2020/04/01/ad3cz5oVe78WXnS.png\" alt=\"image.png\"> <strong>结果中有一些符号，下面进行说明：</strong></p>\n<p>符号</p>\n<p>含义</p>\n<p>‘-‘</p>\n<p>包含在第一个序列中，但不包含在第二个序列中</p>\n<p>‘+’</p>\n<p>包含在第二个序列中，但不包含在第一个序列中</p>\n<p>‘ ‘</p>\n<p>两个序列行一致</p>\n<p>‘?’</p>\n<p>标志两个序列行存在增量差异</p>\n<p>‘^’</p>\n<p>标志处两个序列行存在差异字符</p>\n<h4 id=\"生成-HTML-格式文档\"><a href=\"#生成-HTML-格式文档\" class=\"headerlink\" title=\"生成 HTML 格式文档\"></a>生成 HTML 格式文档</h4><p>采用 HtmlDiff() 类的 make_file（）方法就可以生成 HTML 文档，对上述代码进行修改，将输出写入文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">import difflib</span><br><span class=\"line\"></span><br><span class=\"line\">text1 = &quot;&quot;&quot;text1:</span><br><span class=\"line\">This module provides classes and functions for comparing sequences.</span><br><span class=\"line\">including HTML and context and unified diffs.</span><br><span class=\"line\">difflib document v7.4</span><br><span class=\"line\">add string</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">text1_lines = text1.splitlines()  # 以行进行分隔，以便进行对比</span><br><span class=\"line\">text2 = &quot;&quot;&quot;text2:</span><br><span class=\"line\">This module provides classes and functions for comparing sequences.</span><br><span class=\"line\">including HTML and context and unified diffs.</span><br><span class=\"line\">difflib document v7.5</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">text2_lines = text2.splitlines()</span><br><span class=\"line\">d = difflib.HtmlDiff()  # 创建对象</span><br><span class=\"line\">html = open(&quot;./diff.html&quot;, mode=&#x27;w+&#x27;)  # 写入文件</span><br><span class=\"line\">html.write(d.make_file(text1_lines, text2_lines))</span><br><span class=\"line\">html.close()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>执行后在同级目录会生成一个 diff.html 文件，打开文件显示如下： <img src=\"https://i.loli.net/2020/04/01/fqySxAUlQ23nDi4.png\" alt=\"image.png\"></p>\n<h2 id=\"2-文件目录差异对比方法\"><a href=\"#2-文件目录差异对比方法\" class=\"headerlink\" title=\"2. 文件目录差异对比方法\"></a>2. 文件目录差异对比方法</h2><p>当我们进行代码审计或校验备份结果的时候，往往需要检查原始与目标目录的文件一致性，Python 的标准库 filecmp 可以满足此需求。filecmp 可以实现文件、目录、便利子目录的差异对比功能。</p>\n<h4 id=\"模块常用方法说明\"><a href=\"#模块常用方法说明\" class=\"headerlink\" title=\"模块常用方法说明\"></a>模块常用方法说明</h4><p>filecmp 提供了三个操作方法：</p>\n<ul>\n<li>单文件对比（cmp），采用 filecmp.cmp(f1,f2[,shallow])比较两个文件，相同返回 True，不相同返回 False，shallow 默认为 True，意思只根据 os.stat()返回的文件基本信息进行对比，不对内容进行比较</li>\n<li>多文件对比，采用 filecmp.cmpfiles(dir1,dir2,common[,shallow])方法，对比 dir1 与 dir2 目录给定的文件清单。该方法返回文件名的三个列表，分别为匹配、不匹配、错误。匹配为包含匹配的文件的列表，不匹配反之，错误列表包括了目录不存在文件，不具备读权限或其他原因导致不能比较的文件清单</li>\n<li>目录对比，通过 dircmp（a,b[,ignore[,hide]]）类创建一个目录比较对象，其中 a 和 b 是参加比较的目录名。ignore 代表文件名忽略的列表，并默认为[‘RCS’,’CVS’,’tags’];hide 代表隐藏的列表。</li>\n</ul>\n<p>下面写个例子实现目录差异对比功能，同时输出目录对比对象所有属性信息。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> filecmp</span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"string\">&quot;/Users/shenwenqiang/Desktop/dir1&quot;</span>  <span class=\"comment\"># 定义左目录，这里的目录路径需要写自己真实的路径</span></span><br><span class=\"line\">b = <span class=\"string\">&quot;/Users/shenwenqiang/Desktop/dir2&quot;</span>  <span class=\"comment\"># 定义右目录</span></span><br><span class=\"line\"></span><br><span class=\"line\">dirobj = filecmp.dircmp(a, b, [<span class=\"string\">&#x27;test.py&#x27;</span>])  <span class=\"comment\"># 目录比较，忽略 test.py 文件</span></span><br><span class=\"line\"><span class=\"comment\"># 输出对比结果数据报表</span></span><br><span class=\"line\">dirobj.report()</span><br><span class=\"line\">dirobj.report_partial_closure()</span><br><span class=\"line\">dirobj.report_full_closure()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;left_list:&quot;</span>+<span class=\"built_in\">str</span>(dirobj.left_list))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;right_list:&quot;</span>+<span class=\"built_in\">str</span>(dirobj.right_list))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;common:&quot;</span>+<span class=\"built_in\">str</span>(dirobj.common))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;left_only:&quot;</span>+<span class=\"built_in\">str</span>(dirobj.left_only))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;right_only:&quot;</span>+<span class=\"built_in\">str</span>(dirobj.right_only))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;common_dirs&quot;</span>+<span class=\"built_in\">str</span>(dirobj.common_dirs))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;common_files&quot;</span>+<span class=\"built_in\">str</span>(dirobj.common_files))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;common_funny&quot;</span>+<span class=\"built_in\">str</span>(dirobj.common_funny))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;same_file:&quot;</span>+<span class=\"built_in\">str</span>(dirobj.same_files))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;diff_files:&quot;</span>+<span class=\"built_in\">str</span>(dirobj.diff_files))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;funny_files:&quot;</span>+<span class=\"built_in\">str</span>(dirobj.funny_files))</span><br></pre></td></tr></table></figure>\n\n<p>两个文件夹目录结构为： <img src=\"https://i.loli.net/2020/04/01/ZsFSLMG7v6TKXql.png\" alt=\"image.png\"> 运行结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">diff /Users/shenwenqiang/Desktop/dir1 /Users/shenwenqiang/Desktop/dir2</span><br><span class=\"line\">Only in /Users/shenwenqiang/Desktop/dir1 : [&#x27;1.txt&#x27;, &#x27;111&#x27;]</span><br><span class=\"line\">Only in /Users/shenwenqiang/Desktop/dir2 : [&#x27;1111&#x27;, &#x27;123&#x27;, &#x27;2.txt&#x27;]</span><br><span class=\"line\">Differing files : [&#x27;.DS_Store&#x27;]</span><br><span class=\"line\">diff /Users/shenwenqiang/Desktop/dir1 /Users/shenwenqiang/Desktop/dir2</span><br><span class=\"line\">Only in /Users/shenwenqiang/Desktop/dir1 : [&#x27;1.txt&#x27;, &#x27;111&#x27;]</span><br><span class=\"line\">Only in /Users/shenwenqiang/Desktop/dir2 : [&#x27;1111&#x27;, &#x27;123&#x27;, &#x27;2.txt&#x27;]</span><br><span class=\"line\">Differing files : [&#x27;.DS_Store&#x27;]</span><br><span class=\"line\">diff /Users/shenwenqiang/Desktop/dir1 /Users/shenwenqiang/Desktop/dir2</span><br><span class=\"line\">Only in /Users/shenwenqiang/Desktop/dir1 : [&#x27;1.txt&#x27;, &#x27;111&#x27;]</span><br><span class=\"line\">Only in /Users/shenwenqiang/Desktop/dir2 : [&#x27;1111&#x27;, &#x27;123&#x27;, &#x27;2.txt&#x27;]</span><br><span class=\"line\">Differing files : [&#x27;.DS_Store&#x27;]</span><br><span class=\"line\">left_list:[&#x27;.DS_Store&#x27;, &#x27;1.txt&#x27;, &#x27;111&#x27;]</span><br><span class=\"line\">right_list:[&#x27;.DS_Store&#x27;, &#x27;1111&#x27;, &#x27;123&#x27;, &#x27;2.txt&#x27;]</span><br><span class=\"line\">common:[&#x27;.DS_Store&#x27;]</span><br><span class=\"line\">left_only:[&#x27;1.txt&#x27;, &#x27;111&#x27;]</span><br><span class=\"line\">right_only:[&#x27;1111&#x27;, &#x27;123&#x27;, &#x27;2.txt&#x27;]</span><br><span class=\"line\">common_dirs[]</span><br><span class=\"line\">common_files[&#x27;.DS_Store&#x27;]</span><br><span class=\"line\">common_funny[]</span><br><span class=\"line\">same_file:[]</span><br><span class=\"line\">diff_files:[&#x27;.DS_Store&#x27;]</span><br><span class=\"line\">funny_files:[]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"校验源与备份目录差异\"><a href=\"#校验源与备份目录差异\" class=\"headerlink\" title=\"校验源与备份目录差异\"></a>校验源与备份目录差异</h4><p>实现备份目录与源目录文件是否保持一致，包括源目录中的新文件或目录、更新文件或目录有无同步成功，定期进行校验，没有成功则希望有针对性地进行补备份</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os, sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> filecmp</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> shutil</span><br><span class=\"line\"></span><br><span class=\"line\">holderlist = []</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">compareme</span>(<span class=\"params\">dir1, dir2</span>):  <span class=\"comment\"># 递归获取更新项函数</span></span><br><span class=\"line\">    dircomp = filecmp.dircmp(dir1, dir2)</span><br><span class=\"line\">    only_in_one = dircomp.left_only  <span class=\"comment\"># 源目录新文件或新目录</span></span><br><span class=\"line\">    diff_in_one = dircomp.diff_files  <span class=\"comment\"># 不匹配文件，源目录文件已发生变化</span></span><br><span class=\"line\">    dirpath = os.path.abspath(dir1)  <span class=\"comment\"># 定义源目录绝对路径</span></span><br><span class=\"line\">    <span class=\"comment\"># 将更新的文件名或目录追加到 holderlist</span></span><br><span class=\"line\">    [holderlist.append(os.path.abspath(os.path.join(dir1, x))) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> only_in_one]</span><br><span class=\"line\">    [holderlist.append(os.path.abspath(os.path.join(dir1, x))) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> diff_in_one]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(dircomp.common_dirs) &gt; <span class=\"number\">0</span>:  <span class=\"comment\"># 判断是否存在相同子目录，以便递归</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> dircomp.common_dirs:  <span class=\"comment\"># 递归子目录</span></span><br><span class=\"line\">            compareme(os.path.abspath(os.path.join(dir1, item)), os.path.abspath(os.path.join(dir2, item)))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> holderlist</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(sys.argv) &gt; <span class=\"number\">2</span>:  <span class=\"comment\"># 要求输入源目录和备份目录</span></span><br><span class=\"line\">        dir1 = sys.argv[<span class=\"number\">1</span>]</span><br><span class=\"line\">        dir2 = sys.argv[<span class=\"number\">2</span>]</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Usage:&quot;</span>, sys.argv[<span class=\"number\">0</span>], <span class=\"string\">&quot;datadir backupdir&quot;</span>)</span><br><span class=\"line\">        sys.exit()</span><br><span class=\"line\">    source_files = compareme(dir1, dir2)  <span class=\"comment\"># 对比源目录与备份目录</span></span><br><span class=\"line\">    dir1 = os.path.abspath(dir1)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> dir2.endwith(<span class=\"string\">&#x27;/&#x27;</span>): dir2 = dir2 + <span class=\"string\">&#x27;/&#x27;</span>  <span class=\"comment\"># 备份目录路径加“/”</span></span><br><span class=\"line\">    dir2 = os.path.abspath(dir2)</span><br><span class=\"line\">    destination_files = []</span><br><span class=\"line\">    createdir_bool = <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> source_files:  <span class=\"comment\"># 遍历返回的差异文件或目录清单</span></span><br><span class=\"line\">        destination_dir = re.sub(dir1, dir2, item)  <span class=\"comment\"># 将源目录差异路径清单对应替换成备份目录</span></span><br><span class=\"line\">        destination_files.append(destination_dir)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> os.path.isdir(item):  <span class=\"comment\"># 如果差异路径为目录且不存在，则在备份目录中创建</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(destination_dir):</span><br><span class=\"line\">                os.makedirs(destination_dir)</span><br><span class=\"line\">                createdir_bool = <span class=\"literal\">True</span>  <span class=\"comment\"># 再次调用 compareme 函数标记</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> createdir_bool:  <span class=\"comment\"># 重新调用 compareme 函数，重新遍历新创建目录的内容</span></span><br><span class=\"line\">        destination_files = []</span><br><span class=\"line\">        source_files = []</span><br><span class=\"line\">        source_files = compareme(dir1, dir2)  <span class=\"comment\"># 调用</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> source_files:  <span class=\"comment\"># 获取源目录差异路径清单，对应替换成备份目录</span></span><br><span class=\"line\">            destination_dir = re.sub(dir1, dir2, item)</span><br><span class=\"line\">            destination_files.append(destination_dir)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;update item:&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(source_files)  <span class=\"comment\"># 输出更新项列表清单</span></span><br><span class=\"line\">    copy_pair = <span class=\"built_in\">zip</span>(source_files, destination_files)  <span class=\"comment\"># 将源目录与备份目录文件清单拆分为元组</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> copy_pair:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> os.path.isfile(item[<span class=\"number\">0</span>]):  <span class=\"comment\"># 判断是否为文件，是则进行复制操作</span></span><br><span class=\"line\">            shutil.copyfile(item[<span class=\"number\">0</span>], item[<span class=\"number\">1</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>下面进行测试，运行前源目录和备份目录结构如下 <img src=\"https://i.loli.net/2020/04/01/BYVex7yRn1O2KbP.png\" alt=\"image.png\"> 在命令行执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">python3 filecmp02.py /Users/shenwenqiang/Desktop/datadir/  /Users/shenwenqiang/Desktop/backupdir/</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>第一次执行结果如下 <img src=\"https://i.loli.net/2020/04/01/zbiBvxywTmth9XG.png\" alt=\"image.png\"> 此时两个目录结构如下 <img src=\"https://i.loli.net/2020/04/01/dyXGQARqe9L2Drs.png\" alt=\"image.png\"> 再次执行则无差异文件： <img src=\"https://i.loli.net/2020/04/01/fshq67KmTjHxpcV.png\" alt=\"image.png\"> 说明同步成功，在运维工作中，可以将此脚本设置为定时任务，则可以定时同步文件</p>\n","categories":["skills"],"tags":["运维","Python","自动化"]},{"title":"NFS高可用方案","url":"/2020/04/03/nfs%E9%AB%98%E5%8F%AF%E7%94%A8%E6%96%B9%E6%A1%88/","content":"<h1 id=\"NFS-高可用方案（NFS-keepalived-Sersync）\"><a href=\"#NFS-高可用方案（NFS-keepalived-Sersync）\" class=\"headerlink\" title=\"NFS 高可用方案（NFS+keepalived+Sersync）\"></a>NFS 高可用方案（NFS+keepalived+Sersync）</h1><h2 id=\"1-简述\"><a href=\"#1-简述\" class=\"headerlink\" title=\"1. 简述\"></a>1. 简述</h2><h3 id=\"1-1-介绍\"><a href=\"#1-1-介绍\" class=\"headerlink\" title=\"1.1 介绍\"></a>1.1 介绍</h3><p>本方案 NFS 的高可用方案，应用服务器为 Client ，两台文件服务器分别Master和 Slave，使用 keepalived 生成一个虚拟 IP，使用 Sersync 进行 Master 与 Slave 之间文件相互同步，确保高可用。</p>\n<h3 id=\"1-2-网络拓扑图\"><a href=\"#1-2-网络拓扑图\" class=\"headerlink\" title=\"1.2 网络拓扑图\"></a>1.2 网络拓扑图</h3><p>当 Master NFS 服务正常时 <a href=\"https://i.loli.net/2020/06/17/CyFrMB2T7WuVk6S.jpg\"><img src=\"https://i.loli.net/2020/06/17/CyFrMB2T7WuVk6S.jpg\"></a> 当 Master NFS 服务宕机时 <a href=\"https://i.loli.net/2020/06/17/hZY89BAksxK4WN2.jpg\"><img src=\"https://i.loli.net/2020/06/17/hZY89BAksxK4WN2.jpg\"></a></p>\n<span id=\"more\"></span>\n<h2 id=\"2-安装前准备\"><a href=\"#2-安装前准备\" class=\"headerlink\" title=\"2.安装前准备\"></a>2.安装前准备</h2><p>服务器信息：</p>\n<p>角色</p>\n<p>系统版本</p>\n<p>ip</p>\n<p>虚拟 ip（Vip）</p>\n<p>无</p>\n<p>192.168.50.143</p>\n<p>Client</p>\n<p>centos 7.5</p>\n<p>192.168.51.246</p>\n<p>Master</p>\n<p>centos 7.5</p>\n<p>192.168.50.8</p>\n<p>Slave</p>\n<p>centos 7.5</p>\n<p>192.168.50.71</p>\n<p>服务器环境准备： 在 Master 和 Slave 上创建共享目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> /data</span><br></pre></td></tr></table></figure>\n\n<p>在 Client 上创建挂载目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> /qiyuesuodata</span><br></pre></td></tr></table></figure>\n\n<p>关闭 Client 、Master 和 Slave 服务器上的防火墙</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 关闭防火墙</span></span><br><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\"><span class=\"comment\"># 关闭开机自启</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> firewalld</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-安装-NFS-并配置\"><a href=\"#3-安装-NFS-并配置\" class=\"headerlink\" title=\"3. 安装 NFS 并配置\"></a>3. 安装 NFS 并配置</h2><p>在 Client 、Master 和 Slave 服务器上安装 NFS 服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum -y install nfs-utils rpcbind</span><br></pre></td></tr></table></figure>\n\n<p><strong>配置 NFS 共享目录</strong> 在 Master 上执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 其中/data 为共享的目录，192.168.51.246 为 Client ip，如有多个私有云服务集群可用空格分隔</span></span><br><span class=\"line\"><span class=\"comment\"># 如 echo &#x27;/data 192.168.51.246(rw,sync,all_squash) 192.168.51.247(rw,sync,all_squash)&#x27; &gt;&gt; /etc/exports</span></span><br><span class=\"line\"> <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;/data 192.168.51.246(rw,sync,all_squash)&#x27;</span> &gt;&gt; /etc/exports</span><br><span class=\"line\"><span class=\"comment\"># 开启服务</span></span><br><span class=\"line\"> systemctl start rpcbind &amp;&amp; systemctl start nfs</span><br><span class=\"line\"><span class=\"comment\"># 设置开机自启</span></span><br><span class=\"line\"> systemctl <span class=\"built_in\">enable</span> rpcbind &amp;&amp; systemctl <span class=\"built_in\">enable</span> nfs</span><br><span class=\"line\"><span class=\"comment\"># 出现：Created symlink from /etc/systemd/system/multi-user.target.wants/nfs-server.service to /usr/lib/systemd/system/nfs-server.service.即成功</span></span><br></pre></td></tr></table></figure>\n\n<p>在 Slave 上执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 其中/data 为共享的目录，192.168.51.246 为 Client ip，如有多个私有云服务集群可用空格分隔</span></span><br><span class=\"line\"><span class=\"comment\"># 如 echo &#x27;/data 192.168.51.246(rw,sync,all_squash) 192.168.51.247(rw,sync,all_squash)&#x27; &gt;&gt; /etc/exports</span></span><br><span class=\"line\"> <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;/data 192.168.51.246(rw,sync,all_squash)&#x27;</span> &gt;&gt; /etc/exports</span><br><span class=\"line\"><span class=\"comment\"># 开启服务</span></span><br><span class=\"line\"> systemctl start rpcbind &amp;&amp; systemctl start nfs</span><br><span class=\"line\"><span class=\"comment\"># 设置开机自启</span></span><br><span class=\"line\"> systemctl <span class=\"built_in\">enable</span> rpcbind &amp;&amp; systemctl <span class=\"built_in\">enable</span> nfs</span><br><span class=\"line\"><span class=\"comment\"># # 出现：Created symlink from /etc/systemd/system/multi-user.target.wants/nfs-server.service to /usr/lib/systemd/system/nfs-server.service.即成功</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>测试挂载是否成功</strong> 在 Client 上执行挂载测试</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 测试 Master </span></span><br><span class=\"line\"><span class=\"comment\"># 其中 ip 为 Master 的 ip，/data为 Master 共享的目录，/qiyuesuodata 为需要挂载至 Client 的目录</span></span><br><span class=\"line\"> mount -t nfs 192.168.50.8:/data /qiyuesuodata</span><br><span class=\"line\"><span class=\"comment\"># 检查 </span></span><br><span class=\"line\"><span class=\"built_in\">df</span> -Th </span><br><span class=\"line\"><span class=\"comment\"># 出现  192.168.50.8:/data      nfs4       29G  7.6G   22G  27% /qiyuesuodata 即为成功</span></span><br><span class=\"line\"><span class=\"comment\"># 去除挂载</span></span><br><span class=\"line\">umount /qiyuesuodata</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试 Slave</span></span><br><span class=\"line\"><span class=\"comment\"># 其中 ip 为 Master 的 ip，/data为 Master 共享的目录，/qiyuesuodata 为需要挂载至 Client 的目录</span></span><br><span class=\"line\"> mount -t nfs 192.168.50.71:/data /qiyuesuodata</span><br><span class=\"line\"><span class=\"comment\"># 检查 </span></span><br><span class=\"line\"><span class=\"built_in\">df</span> -Th </span><br><span class=\"line\"><span class=\"comment\"># 出现  192.168.50.71:/data      nfs4       29G  7.6G   22G  27% /qiyuesuodata 即为成功</span></span><br><span class=\"line\"><span class=\"comment\"># 去除挂载</span></span><br><span class=\"line\">umount /qiyuesuodata</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-配置文件同步\"><a href=\"#4-配置文件同步\" class=\"headerlink\" title=\"4. 配置文件同步\"></a>4. 配置文件同步</h2><h4 id=\"在-Slave-进行同步-Master-数据\"><a href=\"#在-Slave-进行同步-Master-数据\" class=\"headerlink\" title=\"在 Slave 进行同步 Master 数据\"></a>在 Slave 进行同步 Master 数据</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 rsync</span></span><br><span class=\"line\">yum -y install rsync.x86_64</span><br><span class=\"line\"><span class=\"comment\"># 修改 /etc/rsyncd.conf 如下,其中 hosts allow 填写 master ip</span></span><br><span class=\"line\">uid = nfsnobody</span><br><span class=\"line\">gid = nfsnobody</span><br><span class=\"line\">port = 873</span><br><span class=\"line\">pid file = /var/rsyncd.pid</span><br><span class=\"line\"><span class=\"built_in\">log</span> file = /var/log/rsyncd.log</span><br><span class=\"line\">use <span class=\"built_in\">chroot</span> = no</span><br><span class=\"line\">max connections = 200</span><br><span class=\"line\"><span class=\"built_in\">read</span> only = <span class=\"literal\">false</span></span><br><span class=\"line\">list = <span class=\"literal\">false</span></span><br><span class=\"line\">fake super = <span class=\"built_in\">yes</span></span><br><span class=\"line\">ignore errors</span><br><span class=\"line\">[data]</span><br><span class=\"line\">path = /data</span><br><span class=\"line\">auth <span class=\"built_in\">users</span> = qiyuesuo</span><br><span class=\"line\">secrets file = /etc/rsync_salve.pass</span><br><span class=\"line\">hosts allow = 192.168.50.8</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成认证文件</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;qiyuesuo:qiyuesuo123&#x27;</span> &gt; /etc/rsync_salve.pass</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 600 /etc/rsync_salve.pass</span><br><span class=\"line\"><span class=\"comment\"># 修改 文件夹权限</span></span><br><span class=\"line\"><span class=\"built_in\">chown</span> -R nfsnobody:nfsnobody /data/</span><br><span class=\"line\"><span class=\"comment\"># 启动服务</span></span><br><span class=\"line\"> rsync --daemon --config=/etc/rsyncd.conf </span><br></pre></td></tr></table></figure>\n\n<p>在 Master 上测试</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum -y install rsync.x86_64</span><br><span class=\"line\"><span class=\"built_in\">chown</span> -R nfsnobody:nfsnobody /data/</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;qiyuesuo123&quot;</span> &gt; /etc/rsync.pass</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 600 /etc/rsync.pass</span><br><span class=\"line\"><span class=\"comment\">#创建测试文件,测试推送</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /data/</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;This is test file&quot;</span> &gt; file.txt</span><br><span class=\"line\">rsync -arv /data/ qiyuesuo@192.168.50.71::data --password-file=/etc/rsync.pass</span><br><span class=\"line\"><span class=\"comment\">#在 slave 上测试</span></span><br><span class=\"line\"><span class=\"built_in\">ls</span> /data </span><br><span class=\"line\"><span class=\"comment\"># 出现 file.txt 即可</span></span><br></pre></td></tr></table></figure>\n\n<p>在 Master 上配置自动同步</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"built_in\">cd</span> /usr/local/</span><br><span class=\"line\"> wget https://dl.qiyuesuo.com/private/nfs/sersync2.5.4_64bit_binary_stable_final.tar.gz</span><br><span class=\"line\"> tar xvf sersync2.5.4_64bit_binary_stable_final.tar.gz</span><br><span class=\"line\"> <span class=\"built_in\">mv</span> GNU-Linux-x86/ sersync</span><br><span class=\"line\"> <span class=\"built_in\">cd</span> sersync/</span><br><span class=\"line\"> <span class=\"comment\"># 修改配置文件</span></span><br><span class=\"line\">sed -ri <span class=\"string\">&#x27;s#&lt;delete start=&quot;true&quot;/&gt;#&lt;delete start=&quot;false&quot;/&gt;#g&#x27;</span> confxml.xml</span><br><span class=\"line\">sed -ri <span class=\"string\">&#x27;24s#&lt;localpath watch=&quot;/opt/tongbu&quot;&gt;#&lt;localpath watch=&quot;/data&quot;&gt;#g&#x27;</span> confxml.xml</span><br><span class=\"line\">sed -ri <span class=\"string\">&#x27;25s#&lt;remote ip=&quot;127.0.0.1&quot; name=&quot;tongbu1&quot;/&gt;#&lt;remote ip=&quot;192.168.50.71&quot; name=&quot;data&quot;/&gt;#g&#x27;</span> confxml.xml</span><br><span class=\"line\">sed -ri <span class=\"string\">&#x27;30s#&lt;commonParams params=&quot;-artuz&quot;/&gt;#&lt;commonParams params=&quot;-az&quot;/&gt;#g&#x27;</span> confxml.xml</span><br><span class=\"line\">sed -ri <span class=\"string\">&#x27;31s#&lt;auth start=&quot;false&quot; users=&quot;root&quot; passwordfile=&quot;/etc/rsync.pas&quot;/&gt;#&lt;auth start=&quot;true&quot; users=&quot;qiyuesuo&quot; passwordfile=&quot;/etc/rsync.pass&quot;/&gt;#g&#x27;</span> confxml.xml</span><br><span class=\"line\">sed -ri <span class=\"string\">&#x27;33s#&lt;timeout start=&quot;false&quot; time=&quot;100&quot;/&gt;&lt;!-- timeout=100 --&gt;#&lt;timeout start=&quot;true&quot; time=&quot;100&quot;/&gt;&lt;!-- timeout=100 --&gt;#g&#x27;</span> confxml.xml</span><br><span class=\"line\"><span class=\"comment\">#启动Sersync</span></span><br><span class=\"line\">/usr/local/sersync/sersync2 -dro /usr/local/sersync/confxml.xml</span><br></pre></td></tr></table></figure>\n\n<p>测试</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在 master 中的/data 目录创建文件</span></span><br><span class=\"line\"><span class=\"built_in\">touch</span> <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\"># 查看 salve 中的 /data 是否有该文件</span></span><br></pre></td></tr></table></figure>\n\n<p>以上就做完了 salve 同步 master 的文件，但是当 master 宕机后恢复，master 无法同步 salve 文件，所以要配置 master 同步 salve 文件</p>\n<h4 id=\"在-Master-进行同步-slave-数据\"><a href=\"#在-Master-进行同步-slave-数据\" class=\"headerlink\" title=\"在 Master 进行同步 slave 数据\"></a>在 Master 进行同步 slave 数据</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 修改 /etc/rsyncd.conf 如下,其中 hosts allow 填写 slave ip</span></span><br><span class=\"line\">uid = nfsnobody</span><br><span class=\"line\">gid = nfsnobody</span><br><span class=\"line\">port = 873</span><br><span class=\"line\">pid file = /var/rsyncd.pid</span><br><span class=\"line\"><span class=\"built_in\">log</span> file = /var/log/rsyncd.log</span><br><span class=\"line\">use <span class=\"built_in\">chroot</span> = no</span><br><span class=\"line\">max connections = 200</span><br><span class=\"line\"><span class=\"built_in\">read</span> only = <span class=\"literal\">false</span></span><br><span class=\"line\">list = <span class=\"literal\">false</span></span><br><span class=\"line\">fake super = <span class=\"built_in\">yes</span></span><br><span class=\"line\">ignore errors</span><br><span class=\"line\">[data]</span><br><span class=\"line\">path = /data</span><br><span class=\"line\">auth <span class=\"built_in\">users</span> = qiyuesuo</span><br><span class=\"line\">secrets file = /etc/rsync_master.pass</span><br><span class=\"line\">hosts allow = 192.168.50.71</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成认证文件</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;qiyuesuo:qiyuesuo123&#x27;</span> &gt; /etc/rsync_master.pass</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 600 /etc/rsync_master.pass</span><br><span class=\"line\"><span class=\"comment\"># 修改 文件夹权限</span></span><br><span class=\"line\"><span class=\"built_in\">chown</span> -R nfsnobody:nfsnobody /data/</span><br><span class=\"line\"><span class=\"comment\"># 启动服务</span></span><br><span class=\"line\"> rsync --daemon --config=/etc/rsyncd.conf </span><br></pre></td></tr></table></figure>\n\n<p>在 Slave 上测试</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chown</span> -R nfsnobody:nfsnobody /data/</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;qiyuesuo123&quot;</span> &gt; /etc/rsync.pass</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 600 /etc/rsync.pass</span><br><span class=\"line\"><span class=\"comment\">#创建测试文件,测试推送</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /data/</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;This is test file&quot;</span> &gt; file.2.txt</span><br><span class=\"line\">rsync -arv /data/ qiyuesuo@192.168.50.8::data --password-file=/etc/rsync.pass</span><br><span class=\"line\"><span class=\"comment\">#在 slave 上测试</span></span><br><span class=\"line\"><span class=\"built_in\">ls</span> /data </span><br><span class=\"line\"><span class=\"comment\"># 出现 file.2.txt 即可</span></span><br></pre></td></tr></table></figure>\n\n<p>在 Slave 上配置自动同步</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"built_in\">cd</span> /usr/local/</span><br><span class=\"line\"> wget https://dl.qiyuesuo.com/private/nfs/sersync2.5.4_64bit_binary_stable_final.tar.gz</span><br><span class=\"line\"> tar xvf sersync2.5.4_64bit_binary_stable_final.tar.gz</span><br><span class=\"line\"> <span class=\"built_in\">mv</span> GNU-Linux-x86/ sersync</span><br><span class=\"line\"> <span class=\"built_in\">cd</span> sersync/</span><br><span class=\"line\"> <span class=\"comment\"># 修改配置文件</span></span><br><span class=\"line\">sed -ri <span class=\"string\">&#x27;s#&lt;delete start=&quot;true&quot;/&gt;#&lt;delete start=&quot;false&quot;/&gt;#g&#x27;</span> confxml.xml</span><br><span class=\"line\">sed -ri <span class=\"string\">&#x27;24s#&lt;localpath watch=&quot;/opt/tongbu&quot;&gt;#&lt;localpath watch=&quot;/data&quot;&gt;#g&#x27;</span> confxml.xml</span><br><span class=\"line\">sed -ri <span class=\"string\">&#x27;25s#&lt;remote ip=&quot;127.0.0.1&quot; name=&quot;tongbu1&quot;/&gt;#&lt;remote ip=&quot;192.168.50.8&quot; name=&quot;data&quot;/&gt;#g&#x27;</span> confxml.xml</span><br><span class=\"line\">sed -ri <span class=\"string\">&#x27;30s#&lt;commonParams params=&quot;-artuz&quot;/&gt;#&lt;commonParams params=&quot;-az&quot;/&gt;#g&#x27;</span> confxml.xml</span><br><span class=\"line\">sed -ri <span class=\"string\">&#x27;31s#&lt;auth start=&quot;false&quot; users=&quot;root&quot; passwordfile=&quot;/etc/rsync.pas&quot;/&gt;#&lt;auth start=&quot;true&quot; users=&quot;qiyuesuo&quot; passwordfile=&quot;/etc/rsync.pass&quot;/&gt;#g&#x27;</span> confxml.xml</span><br><span class=\"line\">sed -ri <span class=\"string\">&#x27;33s#&lt;timeout start=&quot;false&quot; time=&quot;100&quot;/&gt;&lt;!-- timeout=100 --&gt;#&lt;timeout start=&quot;true&quot; time=&quot;100&quot;/&gt;&lt;!-- timeout=100 --&gt;#g&#x27;</span> confxml.xml</span><br><span class=\"line\"><span class=\"comment\">#启动Sersync</span></span><br><span class=\"line\">/usr/local/sersync/sersync2 -dro /usr/local/sersync/confxml.xml</span><br></pre></td></tr></table></figure>\n\n<p>至此我们已经做好了主从相互同步的操作 ##5. 安装 Keepalived 在 Master 上执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum -y install keepalived.x86_64</span><br><span class=\"line\"><span class=\"comment\"># 修改 /etc/keepalived/keepalived.conf</span></span><br><span class=\"line\"><span class=\"comment\"># 其中 enp0s3 为绑定网卡名称，可以使用 ip addr 命令查看</span></span><br><span class=\"line\"><span class=\"comment\"># 其中 192.168.50.143  为虚拟 ip ，注意不要和其它 ip 冲突</span></span><br><span class=\"line\">! Configuration File <span class=\"keyword\">for</span> keepalived</span><br><span class=\"line\"></span><br><span class=\"line\">global_defs &#123;</span><br><span class=\"line\">   router_id NFS-Master</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">vrrp_instance VI_1 &#123;</span><br><span class=\"line\">    state MASTER</span><br><span class=\"line\">    interface enp0s3</span><br><span class=\"line\">    virtual_router_id 51</span><br><span class=\"line\">    priority 150</span><br><span class=\"line\">    advert_int 1</span><br><span class=\"line\">    authentication &#123;</span><br><span class=\"line\">        auth_type PASS</span><br><span class=\"line\">        auth_pass qiyuesuo123</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    virtual_ipaddress &#123;</span><br><span class=\"line\">        192.168.50.143  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 启动服务</span></span><br><span class=\"line\">systemctl start  keepalived.service &amp;&amp; systemctl <span class=\"built_in\">enable</span> keepalived.service</span><br></pre></td></tr></table></figure>\n\n<p>在 Slave 上执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum -y install keepalived.x86_64</span><br><span class=\"line\"><span class=\"comment\"># 修改 /etc/keepalived/keepalived.conf</span></span><br><span class=\"line\"><span class=\"comment\"># 其中 enp0s3 为绑定网卡名称，可以使用 ip addr 命令查看</span></span><br><span class=\"line\"><span class=\"comment\"># 其中 192.168.50.143  为虚拟 ip ，注意不要和其它 ip 冲突</span></span><br><span class=\"line\">! Configuration File <span class=\"keyword\">for</span> keepalived</span><br><span class=\"line\"></span><br><span class=\"line\">global_defs &#123;</span><br><span class=\"line\">   router_id NFS-Slave</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">vrrp_instance VI_1 &#123;</span><br><span class=\"line\">    state MASTER</span><br><span class=\"line\">    interface enp0s3</span><br><span class=\"line\">    virtual_router_id 51</span><br><span class=\"line\">    priority 100</span><br><span class=\"line\">    advert_int 1</span><br><span class=\"line\">    authentication &#123;</span><br><span class=\"line\">        auth_type PASS</span><br><span class=\"line\">        auth_pass qiyuesuo123</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    virtual_ipaddress &#123;</span><br><span class=\"line\">        192.168.50.143  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 启动服务</span></span><br><span class=\"line\">systemctl start  keepalived.service &amp;&amp; systemctl <span class=\"built_in\">enable</span> keepalived.service</span><br></pre></td></tr></table></figure>\n\n<p><strong>查看虚拟IP是否存在</strong> 在 Master 上执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ip a  grep  192.168.50.143</span><br><span class=\"line\"><span class=\"comment\"># 出现</span></span><br><span class=\"line\"><span class=\"comment\"># inet 192.168.50.143/32 scope global enp0s3</span></span><br><span class=\"line\"><span class=\"comment\"># 即成功</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>VIP挂载测试</strong> 在 Client 上通过 vip 挂载测试</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mount -t nfs 192.168.50.143:/data /qiyuesuodata</span><br><span class=\"line\"><span class=\"comment\"># 如/qiyuesuodata目录中有共享目录中文件则说明挂载成功</span></span><br><span class=\"line\">umount /qiyuesuodata/</span><br></pre></td></tr></table></figure>\n\n<p>模拟机器Down机,测试虚拟IP地址是否会漂移</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在 Master 上关闭 keepalived</span></span><br><span class=\"line\">systemctl stop keepalived.service</span><br><span class=\"line\"><span class=\"comment\"># 执行ip a  grep  192.168.50.143会无输出则关闭成功</span></span><br><span class=\"line\"><span class=\"comment\"># 在 Slave 上查看</span></span><br><span class=\"line\">ip a  grep  192.168.50.143</span><br><span class=\"line\"><span class=\"comment\"># 出现</span></span><br><span class=\"line\"><span class=\"comment\"># inet 192.168.50.143/32 scope global enp0s3</span></span><br><span class=\"line\"><span class=\"comment\"># 即成功</span></span><br></pre></td></tr></table></figure>\n\n<p>则说明 ip 漂移成功</p>\n<h2 id=\"设置-keepalived-脚本\"><a href=\"#设置-keepalived-脚本\" class=\"headerlink\" title=\"设置 keepalived 脚本\"></a>设置 keepalived 脚本</h2><p>因为 ip 的漂移是根据 keepalived 的存活来判断的，所以在 nfs 宕机之后需要手动停止 keepalived 服务来进行ip 的切换，这里在 Master 上编写一个定时任务来检测 nfs 服务是否宕机</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/local/sbin</span><br><span class=\"line\"><span class=\"comment\"># 生成文件check_nfs.sh</span></span><br><span class=\"line\"><span class=\"comment\">#!/bin/sh</span></span><br><span class=\"line\"><span class=\"comment\"># 每秒执行一次</span></span><br><span class=\"line\">step=1 <span class=\"comment\">#间隔的秒数，不能大于60 </span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (( i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">60</span>; i=(i+step) )); <span class=\"keyword\">do</span> </span><br><span class=\"line\">  <span class=\"comment\">###检查nfs可用性：进程和是否能够挂载</span></span><br><span class=\"line\">  /sbin/service nfs status &amp;&gt;/dev/null</span><br><span class=\"line\">  <span class=\"keyword\">if</span> [ $? -ne 0 ];<span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"comment\">###如果服务状态不正常，先尝试重启服务</span></span><br><span class=\"line\">    /sbin/service nfs restart</span><br><span class=\"line\">    /sbin/service nfs status &amp;&gt;/dev/null</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ $? -ne 0 ];<span class=\"keyword\">then</span></span><br><span class=\"line\">       <span class=\"comment\"># 如服务仍不正常，停止 keepalived</span></span><br><span class=\"line\">       systemctl stop keepalived.service</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\">  <span class=\"built_in\">sleep</span> <span class=\"variable\">$step</span> </span><br><span class=\"line\"><span class=\"keyword\">done</span> </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>加入定时任务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> 777 /usr/local/sbin/check_nfs.sh</span><br><span class=\"line\">crontab -e</span><br><span class=\"line\"><span class=\"comment\"># 输入定时任务</span></span><br><span class=\"line\">* * * * *  /usr/local/sbin/check_nfs.sh &amp;&gt; /dev/null</span><br></pre></td></tr></table></figure>\n\n<p>在 Client 添加定时任务，当 Master 宕机时进行重新挂载</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/local/sbin</span><br><span class=\"line\"><span class=\"comment\"># 生成文件check_mount.sh</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#!/bin/sh</span></span><br><span class=\"line\"><span class=\"comment\"># 每秒执行一次</span></span><br><span class=\"line\">step=1 <span class=\"comment\">#间隔的秒数，不能大于60 </span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (( i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">60</span>; i=(i+step) )); <span class=\"keyword\">do</span> </span><br><span class=\"line\">  mount=`<span class=\"built_in\">df</span> -Thgrep qiyuesuodata`</span><br><span class=\"line\">  <span class=\"keyword\">if</span> [ <span class=\"variable\">$mount</span> = <span class=\"string\">&quot;&quot;</span> ];<span class=\"keyword\">then</span></span><br><span class=\"line\">     umount /qiyuesuodata</span><br><span class=\"line\">     mount mount -t nfs 192.168.50.143:/data /qiyuesuodata</span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\">  <span class=\"built_in\">sleep</span> <span class=\"variable\">$step</span> </span><br><span class=\"line\"><span class=\"keyword\">done</span> </span><br></pre></td></tr></table></figure>\n\n<p>加入定时任务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> 777 /usr/local/sbin/check_mount.sh</span><br><span class=\"line\">crontab -e</span><br><span class=\"line\"><span class=\"comment\"># 输入定时任务</span></span><br><span class=\"line\">* * * * *  /usr/local/sbin/check_nfs.sh &amp;&gt; /dev/null</span><br></pre></td></tr></table></figure>","categories":["skills"],"tags":["运维","教程","NFS"]},{"title":"文件定时同步(Linux+windows)","url":"/2020/04/07/rsync-%E6%96%87%E4%BB%B6%E5%AE%9A%E6%97%B6%E5%90%8C%E6%AD%A5/","content":"<h1 id=\"Linux-rsync-实现文件定时同步\"><a href=\"#Linux-rsync-实现文件定时同步\" class=\"headerlink\" title=\"Linux rsync 实现文件定时同步\"></a>Linux rsync 实现文件定时同步</h1><p>本文档适用于私有云文件存储方式为本地存储、磁盘挂载 思路：服务器A和B上都安装rsync，其中B服务器上是以服务器模式运行rsync，而A上则以客户端方式运行rsync。这样在web服务器B上运行rsync守护进程，在A上定时运行客户程序来同步服务器B上需要同步的内容。 准备：</p>\n<span id=\"more\"></span>\n<p>机器</p>\n<p>ip</p>\n<p>目录</p>\n<p>A（源机器）</p>\n<p>192.168.1.146</p>\n<p>文件目录：&#x2F;data</p>\n<p>B（备份机器）</p>\n<p>192.168.1.147</p>\n<p>备份目录：&#x2F;backup</p>\n<h3 id=\"1-安装-rsync（两台机器都要执行）\"><a href=\"#1-安装-rsync（两台机器都要执行）\" class=\"headerlink\" title=\"1. 安装 rsync（两台机器都要执行）\"></a>1. 安装 rsync（两台机器都要执行）</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install rsync</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-配置\"><a href=\"#2-配置\" class=\"headerlink\" title=\"2. 配置\"></a>2. 配置</h3><p>rsync的主要有以下三个配置文件rsyncd.conf(主配置文件)、rsyncd.secrets(密码文件)、rsyncd.motd(rysnc服务器信息)</p>\n<h4 id=\"rsyncd-服务端配置（A-机器配置）\"><a href=\"#rsyncd-服务端配置（A-机器配置）\" class=\"headerlink\" title=\"rsyncd 服务端配置（A 机器配置）\"></a>rsyncd 服务端配置（A 机器配置）</h4><p>&#x2F;etc&#x2F;rsyncd&#x2F;rsyncd.conf</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">#/etc/rsyncd/rsyncd.conf 所属用户ID，一般为root</span><br><span class=\"line\">uid =root</span><br><span class=\"line\">#/etc/rsyncd/rsyncd.conf 所属权限组</span><br><span class=\"line\">gid =root</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">use chroot = no   #在传输文件的之前，是否转到用户根目录。</span><br><span class=\"line\">max connections = 4   #最大连接数</span><br><span class=\"line\"></span><br><span class=\"line\">#服务进程pid保存文件</span><br><span class=\"line\">pid file = /var/run/rsyncd.pid </span><br><span class=\"line\">#锁文件路径</span><br><span class=\"line\">lock file = /var/run/rsyncd.lock </span><br><span class=\"line\"></span><br><span class=\"line\">log file = /var/log/rsyncd.log  #日至文件路径</span><br><span class=\"line\"></span><br><span class=\"line\">log format = %t %a %m %f %b</span><br><span class=\"line\"></span><br><span class=\"line\">#要备份的模块名，该名称客户端进行同步时需要调用   </span><br><span class=\"line\">[qysdata] </span><br><span class=\"line\">path = /data   #要备份的目录</span><br><span class=\"line\">ignore errors    #可以忽略一些无关的IO错误</span><br><span class=\"line\"></span><br><span class=\"line\">read only = true  # // 只读</span><br><span class=\"line\">list = false  #//不允许列文件</span><br><span class=\"line\">hosts allow = 192.168.1.147 # 允许访问的 ip</span><br><span class=\"line\">hosts deny = 0.0.0.0/32 # 禁止访问的 ip</span><br><span class=\"line\">#//认证的用户名，如果没有这行则表明是匿名，此用户与系统无关</span><br><span class=\"line\">auth users = qys   </span><br><span class=\"line\">#//密码和用户名对比表，密码文件自己生成</span><br><span class=\"line\">secrets file = /etc/rsyncd/rsyncd.secrets  </span><br><span class=\"line\"></span><br><span class=\"line\">comment = qiyuesuo data backup   #这个模块的注释信息</span><br></pre></td></tr></table></figure>\n\n<p>&#x2F;etc&#x2F;rsyncd&#x2F;rsyncd.secrets 配置rsync密码（在上边的配置文件中已经写好路径,名字随便写，只要和上边配置文件里的一致即可），格式(一行一个用户)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">qys:admin#1234</span><br></pre></td></tr></table></figure>\n\n<p>赋予权限</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">chmod 600 /etc/rsyncd/rsyncd.secrets</span><br><span class=\"line\">chmod 600 /etc/rsyncd/rsyncd.conf</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"客户端配置（B-机器配置）\"><a href=\"#客户端配置（B-机器配置）\" class=\"headerlink\" title=\"客户端配置（B 机器配置）\"></a>客户端配置（B 机器配置）</h4><p>配置密码文件（这个密码是rsync请求服务端需要的认证密码） &#x2F;etc&#x2F;rsyncd&#x2F;client.pass</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">admin#1234</span><br></pre></td></tr></table></figure>\n\n<p>赋予权限</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">chmod 600 /etc/rsyncd/client.pass</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"启动服务（A-机器启动）\"><a href=\"#启动服务（A-机器启动）\" class=\"headerlink\" title=\"启动服务（A 机器启动）\"></a>启动服务（A 机器启动）</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">rsync --daemon --config=/etc/rsyncd/rsyncd.conf</span><br></pre></td></tr></table></figure>\n\n<p>设置开机自启</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;rsync --daemon --config=/etc/rsyncd/rsyncd.conf&quot;</span> &gt;&gt;  /etc/rc.local </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"客户端拉取文件测试（B-服务器执行）\"><a href=\"#客户端拉取文件测试（B-服务器执行）\" class=\"headerlink\" title=\"客户端拉取文件测试（B 服务器执行）\"></a>客户端拉取文件测试（B 服务器执行）</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">rsync -vzrtopg --progress --delete qys@192.168.1.146::qysdata /backup --password-file=/etc/rsyncd/client.pass</span><br></pre></td></tr></table></figure>\n\n<p>如B服务器上 backup目录有 A 上的文件则同步成功</p>\n<h3 id=\"3-配置定时同步\"><a href=\"#3-配置定时同步\" class=\"headerlink\" title=\"3. 配置定时同步\"></a>3. 配置定时同步</h3><h4 id=\"定时脚本\"><a href=\"#定时脚本\" class=\"headerlink\" title=\"定时脚本\"></a>定时脚本</h4><p>&#x2F;usr&#x2F;local&#x2F;sbin&#x2F;backup.sh 将上述命令写入脚本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">rsync -vzrtopg --progress --delete qys@192.168.1.146::qysdata /backup --password-file=/etc/rsyncd/client.pass</span><br></pre></td></tr></table></figure>\n\n<p>添可执行权限</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">chmod +x /usr/local/sbin/backup.sh</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"设置定时任务\"><a href=\"#设置定时任务\" class=\"headerlink\" title=\"设置定时任务\"></a>设置定时任务</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">crontab -e</span><br></pre></td></tr></table></figure>\n\n<p>输入</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">*/1 * * * * /usr/local/sbin/backup.sh</span><br></pre></td></tr></table></figure>\n\n<p>以上完成定时每分钟同步一次文件</p>\n<h1 id=\"Windows-SyncToy-定时同步文件\"><a href=\"#Windows-SyncToy-定时同步文件\" class=\"headerlink\" title=\"Windows SyncToy 定时同步文件\"></a>Windows SyncToy 定时同步文件</h1><p>思路：使用微软官方的SyncToy将源机器文件同步至备份机器的共享文件夹 准备</p>\n<p>机器</p>\n<p>ip</p>\n<p>目录</p>\n<p>A（源机器）</p>\n<p>192.168.1.131</p>\n<p>文件目录：D:\\data</p>\n<p>B（备份机器）</p>\n<p>192.168.1.130</p>\n<p>备份目录：D:\\backup</p>\n<h3 id=\"1-设置共享文件夹（B-机器上执行）\"><a href=\"#1-设置共享文件夹（B-机器上执行）\" class=\"headerlink\" title=\"1. 设置共享文件夹（B 机器上执行）\"></a>1. 设置共享文件夹（B 机器上执行）</h3><p>创建共享文件夹 <img src=\"https://i.loli.net/2020/04/08/Cr3JoVi17mn6Gbp.png\" alt=\"image.png\"> 在 A 机器上测试共享文件夹是否创建成功 <img src=\"https://i.loli.net/2020/04/08/mKeilNRIaJnSuM2.png\" alt=\"image.png\"> 出现以下内容说明 创建成功 <img src=\"https://i.loli.net/2020/04/08/UhcvIVFsAxE2BwC.png\" alt=\"image.png\"></p>\n<h3 id=\"2-安装-RsyncToy（在-A-机器上安装）\"><a href=\"#2-安装-RsyncToy（在-A-机器上安装）\" class=\"headerlink\" title=\"2. 安装 RsyncToy（在 A 机器上安装）\"></a>2. 安装 RsyncToy（在 A 机器上安装）</h3><p>下载地址：<a href=\"https://download.microsoft.com/download/6/c/4/6c406239-a648-4e01-833e-2c452deed3b6/SyncToySetupPackage/_v21/_x64.exe\">https://download.microsoft.com/download/6/c/4/6c406239-a648-4e01-833e-2c452deed3b6/SyncToySetupPackage\\_v21\\_x64.exe</a> 双击安装即可，安装好后打开界面如下 <img src=\"https://i.loli.net/2020/04/08/9RLraqby2QGZsWK.png\" alt=\"image.png\"></p>\n<h3 id=\"3-配置\"><a href=\"#3-配置\" class=\"headerlink\" title=\"3. 配置\"></a>3. 配置</h3><p><img src=\"https://i.loli.net/2020/04/08/1A6vDs4NU5BX82q.png\" alt=\"image.png\"> 点击下一步后会有三种模式</p>\n<ul>\n<li><p>Synchronize:新文件和更改过的文件在左右目录中将互相复制，同时，若两个目录中有同样的文件，在其中一个目录有重命名或者删除的，在另一个目录中也将执行同样操作。</p>\n</li>\n<li><p>Echo:以左侧目录为准，左目录中的新文件和更改过的文件将复制到右目录中；同时，若两个目录中有同样的文件，在左目录中有重命名或者删除的，在右目录中也将执行同样操作。</p>\n</li>\n<li><p>Contribute：和Echo的操作类似，是一种更加安全的方式。不执行删除操作，相当于右侧文件夹是左侧的增量备份</p>\n</li>\n</ul>\n<p>这里我们选择第三种模式 <img src=\"https://i.loli.net/2020/04/08/iGyYEMPr3HNJCdl.png\" alt=\"image.png\"> 命名 <img src=\"https://i.loli.net/2020/04/08/snZ1JMjPOIdGwYo.png\" alt=\"image.png\"> 测试是否成功，点击 run 运行 <img src=\"https://i.loli.net/2020/04/08/G7hqEIgrKmzYVvn.png\" alt=\"image.png\"> 在 B 机器上查看，文件同步过来即成功 <img src=\"https://i.loli.net/2020/04/08/IKubUpYxlfmnj3k.png\" alt=\"image.png\"></p>\n<h3 id=\"4-配置定时计划\"><a href=\"#4-配置定时计划\" class=\"headerlink\" title=\"4. 配置定时计划\"></a>4. 配置定时计划</h3><p>在控制面板中找到定时计划程序 <img src=\"https://i.loli.net/2020/04/08/FUjWXhQRglSmKB3.png\" alt=\"image.png\"> 创建任务 <img src=\"https://i.loli.net/2020/04/08/8uYTgHcwMjylq1X.png\" alt=\"image.png\"> 配置基本信息 <img src=\"https://i.loli.net/2020/04/08/YOhM3wnRxFo8UB7.png\" alt=\"image.png\"> 配置触发器 <img src=\"https://i.loli.net/2020/04/08/PuIL9gwqcUmZYrd.png\" alt=\"image.png\"> 配置操作 <img src=\"https://i.loli.net/2020/04/08/hE2nrtdO71w9VMA.png\" alt=\"image.png\"> 输入密码保存即可。 验证是否成功，在 A 机器data 目录新建一个文件等待五分钟左右，看文件是否同步成功。</p>\n","categories":["skills"],"tags":["运维","windows","Linux","rsync"]},{"title":"cisco面试记录","url":"/2020/04/15/cisco%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95/","content":"<h1 id=\"思科面试记录\"><a href=\"#思科面试记录\" class=\"headerlink\" title=\"思科面试记录\"></a>思科面试记录</h1><p>面试的是合肥的思科，由于在上海，所以采取的是远程面试，使用的是思科自己的 Webex Meet</p>\n<h1 id=\"面试题目\"><a href=\"#面试题目\" class=\"headerlink\" title=\"面试题目\"></a>面试题目</h1><h4 id=\"1-Linux-开机加载顺序\"><a href=\"#1-Linux-开机加载顺序\" class=\"headerlink\" title=\"1. Linux 开机加载顺序\"></a>1. Linux 开机加载顺序</h4><p>1 加载BIOS硬件信息, 并获取第一个启动设备的代号; 2 读取第一个启动设备的MBR的引导加载程序的启动信息; 3 加载核心操作系统的核心信息, 核心开始解压缩, 并且尝试驱动所有的硬件设备; 4 核心执行init程序并获取运行信息; 5 init执行&#x2F;etc&#x2F;init.d的脚本; 6 启动核心的外挂模块&#x2F;etc&#x2F;modeprobe.d&#x2F;中的脚本; 7 init执行运行各个批处理脚本; 8 init执行&#x2F;etc&#x2F;init.d&#x2F;rc.local文件; 9 执行&#x2F;bin&#x2F;login程序, 等待用户登录; 10 登录之后开始以shell控制主机.</p>\n<span id=\"more\"></span>\n<h4 id=\"2-用户登录加载的配置文件顺序\"><a href=\"#2-用户登录加载的配置文件顺序\" class=\"headerlink\" title=\"2. 用户登录加载的配置文件顺序\"></a>2. 用户登录加载的配置文件顺序</h4><p>登录式shell加载配置文件过程 <code>/etc/profile --&gt; /etc/profile.d/*.sh --&gt; ~/.bash_profile --&gt; ~/.bashrc --&gt; /etc/bashrc</code> 非登录式shell加载配置文件过程 <code>~/.bashrc --&gt; /etc/bashrc --&gt; /etc/profile.d/*.sh</code></p>\n<h4 id=\"3-安装软件的三种方式\"><a href=\"#3-安装软件的三种方式\" class=\"headerlink\" title=\"3. 安装软件的三种方式\"></a>3. 安装软件的三种方式</h4><ul>\n<li>在线安装（yum install）</li>\n<li>离线安装（rpm 包）</li>\n<li>编译安装</li>\n</ul>\n<h4 id=\"4-linux-查看进程打开的文件（lsof-使用）\"><a href=\"#4-linux-查看进程打开的文件（lsof-使用）\" class=\"headerlink\" title=\"4. linux 查看进程打开的文件（lsof 使用）\"></a>4. linux 查看进程打开的文件（lsof 使用）</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># lsof (list open file)</span><br><span class=\"line\"> -p pid 列出进程pid所打开的所有文件</span><br><span class=\"line\"></span><br><span class=\"line\"> -d FD_pattern 列出所有已经打开的FD值为FD_pattern的文件FD的值有整数，TXT,MEM等等</span><br><span class=\"line\"></span><br><span class=\"line\"> -a lsof后可以加多个匹配条件，默认为or连接，此参数将多个条件变成and关系</span><br><span class=\"line\"></span><br><span class=\"line\"> -i [46] [proto] [@hostnameip][:serviceport] 用来选择占用某个端口的进程</span><br><span class=\"line\"></span><br><span class=\"line\">  +d/+D dir 非递归或递归的显示打开dir下文件的进程</span><br><span class=\"line\"></span><br><span class=\"line\">  -c string   显示进程的command中包含string的进程所打开的文件</span><br><span class=\"line\"></span><br><span class=\"line\">  -u username 显示属于user的进程所打开的文件</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-linux-定时任务（cron-表达式）\"><a href=\"#5-linux-定时任务（cron-表达式）\" class=\"headerlink\" title=\"5. linux 定时任务（cron 表达式）\"></a>5. linux 定时任务（cron 表达式）</h4><p>分钟 小时 日期 月份 星期</p>\n<h4 id=\"6-卸载文件系统\"><a href=\"#6-卸载文件系统\" class=\"headerlink\" title=\"6. 卸载文件系统\"></a>6. 卸载文件系统</h4><p>umount</p>\n<h4 id=\"7-git-pull-request\"><a href=\"#7-git-pull-request\" class=\"headerlink\" title=\"7. git pull request\"></a>7. git pull request</h4><p>有一个仓库，叫Repo A。你如果要往里贡献代码，首先要Fork这个Repo，于是在你的Github账号下有了一个Repo A2。 然后你在这个A2下工作，Commit，push等。然后你希望原始仓库Repo A合并你的工作，你可以在Github上发起一个Pull Request，意思是请求Repo A的所有者从你的A2合并分支。 如果被审核通过并正式合并，这样你就为项目A做贡献了。</p>\n<h4 id=\"8-jenkins-等持续集成工具的使用\"><a href=\"#8-jenkins-等持续集成工具的使用\" class=\"headerlink\" title=\"8. jenkins 等持续集成工具的使用\"></a>8. jenkins 等持续集成工具的使用</h4><p>基础流程说一下</p>\n<h4 id=\"9-shell-脚本监控磁盘使用率（占用高发邮件）\"><a href=\"#9-shell-脚本监控磁盘使用率（占用高发邮件）\" class=\"headerlink\" title=\"9. shell 脚本监控磁盘使用率（占用高发邮件）\"></a>9. shell 脚本监控磁盘使用率（占用高发邮件）</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#用途：监控磁盘的使用情况。</span></span><br><span class=\"line\"><span class=\"comment\">#把脚本名字存在变量l-name</span></span><br><span class=\"line\">l_name=`<span class=\"built_in\">echo</span> <span class=\"variable\">$0</span>  awk -F <span class=\"string\">&#x27;/&#x27;</span> <span class=\"string\">&#x27;print $NF&#x27;</span>`</span><br><span class=\"line\"><span class=\"comment\">#定义收件人的邮箱</span></span><br><span class=\"line\">mail_user=admin@admin.com</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#定义检查磁盘的空间使用率函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">chk_sp</span></span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">df</span> -m  sed <span class=\"string\">&#x27;1d&#x27;</span>  awk -F <span class=\"string\">&#x27;%  +&#x27;</span> <span class=\"string\">&#x27;$5&gt;90 &#123;print $7,$5&#125;&#x27;</span>&gt;/tmp/chk_sp.log</span><br><span class=\"line\">    n=`<span class=\"built_in\">wc</span> -l /tmp/chk_sp.log  awk <span class=\"string\">&#x27;print $1&#x27;</span>`</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ <span class=\"variable\">$n</span> -gt 0 ]</span><br><span class=\"line\">    <span class=\"keyword\">then</span> </span><br><span class=\"line\">      tag=1</span><br><span class=\"line\">      <span class=\"keyword\">for</span> d <span class=\"keyword\">in</span> `awk <span class=\"string\">&#x27;&#123;print $1&#125;&#x27;</span> /tmp/chk_sp.log`</span><br><span class=\"line\">      <span class=\"keyword\">do</span> </span><br><span class=\"line\">           find <span class=\"variable\">$d</span> -<span class=\"built_in\">type</span> d  sed <span class=\"string\">&#x27;1d&#x27;</span>  xargs <span class=\"built_in\">du</span> -sm  <span class=\"built_in\">sort</span> -nr  <span class=\"built_in\">head</span> -3</span><br><span class=\"line\">      <span class=\"keyword\">done</span> &gt;/tmp/most_sp.txt</span><br><span class=\"line\">   <span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#定义检查inode使用率函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">chk_in</span></span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"built_in\">df</span> -i  sed `1d`  awk -F <span class=\"string\">&#x27;%  +&#x27;</span> <span class=\"string\">&#x27;$5&gt;90 &#123;print $7,$5&#125;&#x27;</span>&gt;/tmp/chk_in.log</span><br><span class=\"line\">    n=`<span class=\"built_in\">wc</span> -l /tmp/chk_in.log  awk <span class=\"string\">&#x27;&#123;print $1&#125;&#x27;</span>`</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ <span class=\"variable\">$n</span> -gt 0 ]</span><br><span class=\"line\">    <span class=\"keyword\">then</span> </span><br><span class=\"line\">        tag=2</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#定义告警函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">m_mail（）&#123;</span><br><span class=\"line\">    <span class=\"built_in\">log</span>=<span class=\"variable\">$1</span></span><br><span class=\"line\">    t_s=`<span class=\"built_in\">date</span> +%s`</span><br><span class=\"line\">    t_s2=`data -d <span class=\"string\">&quot;1 hours ago&quot;</span> +%s`</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ ! -f /tmp/<span class=\"variable\">$log</span> ]</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"comment\">#创建$log文件</span></span><br><span class=\"line\">        <span class=\"built_in\">touch</span> /tmp/<span class=\"variable\">$log</span></span><br><span class=\"line\">        <span class=\"comment\">#增加a权限，只允许追加内容，不允许更改或删除</span></span><br><span class=\"line\">        chattr +a /tmp/<span class=\"variable\">$log</span></span><br><span class=\"line\">        <span class=\"comment\">#第一次告警，可以直接写入1小时以前的时间戳</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"variable\">$t_s2</span> &gt;&gt; /tmp/<span class=\"variable\">$log</span></span><br><span class=\"line\">     <span class=\"keyword\">fi</span></span><br><span class=\"line\">    <span class=\"comment\">#无论#log文件是否刚刚创建，都需要查看最后一行的时间戳</span></span><br><span class=\"line\">    t_s2=`<span class=\"built_in\">tail</span> -l /tmp/<span class=\"variable\">$log</span>  awk <span class=\"string\">&#x27;&#123;print $1&#125;&#x27;</span>`</span><br><span class=\"line\">    <span class=\"comment\"># 取出最后一行及上次告警的时间戳，立即写入当期的时间戳</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$t_s</span> &gt;&gt;/tmp/<span class=\"variable\">$log</span></span><br><span class=\"line\">    <span class=\"comment\">#取两次时间戳差值</span></span><br><span class=\"line\">    v=$[ <span class=\"variable\">$t_s</span>-<span class=\"variable\">$t_s2</span> ]</span><br><span class=\"line\">    <span class=\"comment\">#如果差值超过100，立即发送邮件。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ <span class=\"variable\">$v</span> -gt 1800 ]</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">      <span class=\"comment\">#发邮件，其中$2为mail函数的第二个函数，这里为一个文件</span></span><br><span class=\"line\">      python  mail.py <span class=\"variable\">$mail_user</span> <span class=\"string\">&quot;磁盘使用率超过90%&quot;</span></span><br><span class=\"line\">      <span class=\"comment\">#定义技数器临时文件，并写入0</span></span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">&quot;0&quot;</span> &gt; /tmp/<span class=\"variable\">$log</span>.count</span><br><span class=\"line\">     <span class=\"keyword\">else</span></span><br><span class=\"line\">      <span class=\"comment\">#如果技数器临时文件不存在，需要创建并写入0</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> [ ! -f /tmp/<span class=\"variable\">$log</span>.count &#125;</span><br><span class=\"line\">      <span class=\"keyword\">then</span></span><br><span class=\"line\">         <span class=\"built_in\">echo</span> <span class=\"string\">&quot;0&quot;</span> &gt; /tmp/<span class=\"variable\">$log</span>.count </span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">      nu=`<span class=\"built_in\">cat</span> /tmp/<span class=\"variable\">$log</span>.count`</span><br><span class=\"line\">      <span class=\"comment\">#30分钟内每发生1次告警，计算器加1</span></span><br><span class=\"line\">      nu2=$[ <span class=\"variable\">$nu</span>+1 ]</span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"variable\">$nu2</span>&gt;/tmp/<span class=\"variable\">$log</span>.count</span><br><span class=\"line\">      <span class=\"comment\">#当告警次数超过30次，需要再次发油件</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> [ <span class=\"variable\">$nu2</span> -gt 30 ]</span><br><span class=\"line\">      <span class=\"keyword\">then</span> </span><br><span class=\"line\">          python mail.py <span class=\"variable\">$mail_user</span> <span class=\"string\">&quot;磁盘使用率90%持续30分钟了&quot;</span> <span class=\"string\">&quot;`cat <span class=\"variable\">$2</span>`&quot;</span> 2&gt;/dev/null</span><br><span class=\"line\">          <span class=\"comment\">#第二次告警后，将计算器再次从0开始</span></span><br><span class=\"line\">          <span class=\"built_in\">echo</span> <span class=\"string\">&quot;0&quot;</span> &gt; /tmp/<span class=\"variable\">$log</span>.count</span><br><span class=\"line\">      <span class=\"keyword\">fi</span></span><br><span class=\"line\"> <span class=\"keyword\">fi</span> </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">#把进程数大于0.则说明上次的脚本还未执行完</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$p_n</span> -gt 0 ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">chk_sp</span><br><span class=\"line\">chk_in</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$tag</span> == 1 ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">    m_mail chk_sp /tmp/most_sp.txt</span><br><span class=\"line\"><span class=\"keyword\">elif</span> [ <span class=\"variable\">$tag</span> == 2 ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">    m_mail chk_in /tmp/chk_in.log</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"10-Python-基本的脚本\"><a href=\"#10-Python-基本的脚本\" class=\"headerlink\" title=\"10. Python 基本的脚本\"></a>10. Python 基本的脚本</h4><p>基本模块</p>\n<h4 id=\"11-mysql-主从复制原理\"><a href=\"#11-mysql-主从复制原理\" class=\"headerlink\" title=\"11. mysql 主从复制原理\"></a>11. mysql 主从复制原理</h4><p>(1)首先，mysql主库在事务提交时会把数据库变更作为事件Events记录在二进制文件binlog中；mysql主库上的sys_binlog控制binlog日志刷新到磁盘。 (2)主库推送二进制文件binlog中的事件到从库的中继日志relay log,之后从库根据中继日志重做数据库变更操作。通过逻辑复制，以此来达到数据一致。 Mysql通过3个线程来完成主从库之间的数据复制：其中BinLog Dump线程跑在主库上，I&#x2F;O线程和SQl线程跑在从库上。当从库启动复制（start slave）时，首先创建I&#x2F;O线程连接主库，主库随后创建Binlog Dump线程读取数据库事件并发给I&#x2F;O线程，I&#x2F;O线程获取到数据库事件更新到从库的中继日志Realy log中去，之后从库上的SQl线程读取中继日志relay log 中更新的数据库事件并应用。</p>\n<h4 id=\"12-mysql-主从延迟的原因（优化方法）\"><a href=\"#12-mysql-主从延迟的原因（优化方法）\" class=\"headerlink\" title=\"12. mysql 主从延迟的原因（优化方法）\"></a>12. mysql 主从延迟的原因（优化方法）</h4><p>原因1：主库的从库太多，导致复制延迟 从库数量一般 3—5个为宜，要复制的节点过多，导致复制延迟。 原因2：从库硬件配置比主库差，导致延迟 查看Master和Slave的配置，可能因为配置不当导致复制的延迟 原因3：慢SQL语句过多 假如一条语句执行时间超过2秒， 就需要进行优化进行调整 原因4：主从复制设计问题 主从复制单线程，如果主库的写入并发太大，来不及传送到从库，就会导致延迟，更高版本的MySQL可以支持多线程复制，门户网站则会自己 开发多线程同步功能。 原因5：主从库之间的网络延迟 主从库网卡、网线、连接的交换机等网络设备都可能成为复制的瓶颈，导致复制延迟，另外跨公网主从复制很容易导致主从复制延迟。 原因6：主库读写压力大，导致复制延迟 主库硬件要好一些，架构前端要加buffer缓存层。</p>\n<h4 id=\"13-mysql-性能监控（几方面，脚本）\"><a href=\"#13-mysql-性能监控（几方面，脚本）\" class=\"headerlink\" title=\"13. mysql 性能监控（几方面，脚本）\"></a>13. mysql 性能监控（几方面，脚本）</h4><ul>\n<li>查询吞吐量</li>\n<li>查询执行性能</li>\n<li>连接情况</li>\n<li>缓冲池使用情况</li>\n</ul>\n<h4 id=\"14-Nginx-调度算法有哪几种\"><a href=\"#14-Nginx-调度算法有哪几种\" class=\"headerlink\" title=\"14. Nginx 调度算法有哪几种\"></a>14. Nginx 调度算法有哪几种</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1、轮询</span><br><span class=\"line\"></span><br><span class=\"line\">按时间顺序逐一分配到不同的后端服务器。</span><br><span class=\"line\"></span><br><span class=\"line\">    upstream lb_demo &#123;</span><br><span class=\"line\">        server 172.16.255.194:9001;</span><br><span class=\"line\">        server 172.16.255.195:9001;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">2、加权轮询</span><br><span class=\"line\"></span><br><span class=\"line\">可在配置的server后面加个weight=number，number值越高，分配的概率越大。</span><br><span class=\"line\"></span><br><span class=\"line\">upstream lb_demo &#123;</span><br><span class=\"line\">        server 172.16.255.194:9001 weight=10;</span><br><span class=\"line\">        server 172.16.255.195:9001 weight=20;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">3、ip_hash</span><br><span class=\"line\"></span><br><span class=\"line\">每个请求按访问IP的hash分配，这样来自同一IP固定访问一个后台服务器。</span><br><span class=\"line\"></span><br><span class=\"line\">upstream lb_demo &#123;</span><br><span class=\"line\">        ip_hash;</span><br><span class=\"line\">        server 172.16.255.194:9001;</span><br><span class=\"line\">        server 172.16.255.195:9001;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">4、least_hash</span><br><span class=\"line\"></span><br><span class=\"line\">最少链接数，哪个机器连接数少就发分发给哪个机器。</span><br><span class=\"line\"></span><br><span class=\"line\">upstream lb_demo &#123;</span><br><span class=\"line\">        least_conn;</span><br><span class=\"line\">        server 172.16.255.194:9001;</span><br><span class=\"line\">        server 172.16.255.195:9001;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">5、url_hash</span><br><span class=\"line\">按访问的url的hash结果分配请求，是每个url定向到同一后端服务器上。</span><br><span class=\"line\">upstream lb_demo &#123;</span><br><span class=\"line\">        url_hash;</span><br><span class=\"line\">        server 172.16.255.194:9001;</span><br><span class=\"line\">        server 172.16.255.195:9001;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">6、hash关键值</span><br><span class=\"line\">hash自定义的key。</span><br><span class=\"line\">注：调度算法在设置upstream中配置，例如在此大括号里面写入ip_hash表示使用ip_hash的方式分配</span><br><span class=\"line\">轮询只是简单实现请求的顺序转发，并没有考虑不同服务器的性能差异；</span><br><span class=\"line\">加权轮询设置了初始时服务器的权重，但是没有考虑运行过程中的服务器状态；</span><br><span class=\"line\">IP Hash保证同一个客户端请求转发到同一个后台服务器实现了session保存，然而当某一后台服务器发生故障时，某些客户端将访问失败；\\</span><br><span class=\"line\">最少连接数只是考虑了后端服务器的连接数情况，并没有完全考虑服务器的整体性能。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"15-Docker-中-cmd-和-entrypoint-的区别\"><a href=\"#15-Docker-中-cmd-和-entrypoint-的区别\" class=\"headerlink\" title=\"15. Docker 中 cmd 和 entrypoint 的区别\"></a>15. Docker 中 cmd 和 entrypoint 的区别</h4><p>　1. Dockerfile必须至少指定CMD或者ENTRYPOINT其中的一个。 　2. ENTRYPOINT应该用作容器的主执行程序。 　3. CMD应该用于定义ENTRYPOINT的默认参数，或者为容器执行一个ad-hoc命令。 　4. 当启动容器时使用交互时的参数时，CMD命令会被覆盖。</p>\n<h4 id=\"16-Docker-中-namesapce-资源隔离的方式\"><a href=\"#16-Docker-中-namesapce-资源隔离的方式\" class=\"headerlink\" title=\"16. Docker 中 namesapce 资源隔离的方式\"></a>16. Docker 中 namesapce 资源隔离的方式</h4><p><strong>namespace（命名空间）可以隔离哪些</strong> 文件系统需要是被隔离的 网络也是需要被隔离的 进程间的通信也要被隔离 针对权限，用户和用户组也需要隔离 进程内的PID也需要与宿主机中的PID进行隔离 容器也要有自己的主机名 有了以上的隔离，我们认为一个容器可以与宿主机和其他容器是隔离开的。 <strong>使用Namespace进行容器的隔离有什么缺点呢？</strong> 　　最大的缺点就是隔离不彻底 　　1）容器知识运行在宿主机上的一种特殊的进程，那么多个容器之间使用的就还是同一个宿主机的操作系统内核 　　2）在Linux内核中，有很多资源和对象是不能被Namespace化的，最典型的例子是：时间即如果某个容器修改了时间，那整个宿主机的时间都会随之修改 　　3）容器给应用暴露出来的攻击面比较大，在生产环境中，没有人敢把运行在物理机上的Linux容器暴露在公网上</p>\n<h4 id=\"17-Linux-如何跟踪网络请求\"><a href=\"#17-Linux-如何跟踪网络请求\" class=\"headerlink\" title=\"17. Linux 如何跟踪网络请求\"></a>17. Linux 如何跟踪网络请求</h4><p>traceroute</p>\n<h4 id=\"18-Nginx-和-Apache-的区别\"><a href=\"#18-Nginx-和-Apache-的区别\" class=\"headerlink\" title=\"18.Nginx 和 Apache 的区别\"></a>18.Nginx 和 Apache 的区别</h4><p><strong>nginx 相对 apache 的优点：</strong> 轻量级，同样起web 服务，比apache 占用更少的内存及资源 抗并发，nginx 处理请求是异步非阻塞的，而apache 则是阻塞型的，在高并发下nginx 能保持低资源低消耗高性能 高度模块化的设计，编写模块相对简单 社区活跃，各种高性能模块出品迅速啊 <strong>apache 相对nginx 的优点：</strong> rewrite ，比nginx 的rewrite 强大 模块超多，基本想到的都可以找到 少bug ，nginx 的bug 相对较多 超稳定 # 结果 问的太难了，很多都不会，一轮就结束了</p>\n","categories":["Essay"],"tags":["面试","记录"]},{"title":"2020 读书清单","url":"/2020/04/22/2020-%E8%AF%BB%E4%B9%A6%E6%B8%85%E5%8D%95/","content":"<h1 id=\"自我管理方面\"><a href=\"#自我管理方面\" class=\"headerlink\" title=\"自我管理方面\"></a>自我管理方面</h1><p>弗朗西斯科•西里洛《番茄工作法图解》<strong>（2020 年 10 月 22 日读完）</strong> 米哈里·契克森米哈赖《心流》</p>\n<span id=\"more\"></span>\n\n<h1 id=\"工作职场方面\"><a href=\"#工作职场方面\" class=\"headerlink\" title=\"工作职场方面\"></a>工作职场方面</h1><p>卡尔·纽波特《深度工作》 布赖恩·费瑟斯通豪《远见》</p>\n<h1 id=\"学习方面\"><a href=\"#学习方面\" class=\"headerlink\" title=\"学习方面\"></a>学习方面</h1><p>成甲《好好学习<strong>（2020年 4 月 22 日读完）</strong> 布朗《认知天性》<strong>（2020 年 9 月 22 日读完）</strong></p>\n<h1 id=\"理财方面\"><a href=\"#理财方面\" class=\"headerlink\" title=\"理财方面\"></a>理财方面</h1><p>《穷爸爸富爸爸》</p>\n<h1 id=\"心理学方面\"><a href=\"#心理学方面\" class=\"headerlink\" title=\"心理学方面\"></a>心理学方面</h1><p>张德芬《遇见未知的自己》<strong>（2020 年 3 月 21 日晚—2020年 3 月 25 日读完）</strong> 斯坦诺维奇《机器人叛乱》<strong>（2020 年 3 月 25 日开始阅读-2020年 4 月 22 日）</strong> 基思·斯坦诺维奇《超越智商》 罗兰·米勒《亲密关系》<strong>（2020 年 1 月 26 日晚阅读完）</strong></p>\n<h1 id=\"技能方面\"><a href=\"#技能方面\" class=\"headerlink\" title=\"技能方面\"></a>技能方面</h1><p>《TCP&#x2F;IP详解卷1:协议》<strong>（2020 年 4 月 3 日开始阅读）</strong> 《Python黑帽子:黑客与渗透测试编程之道》<strong>（2020 年 9 月 20 日开始阅读）</strong> 《白帽子讲Web安全》 <strong>（2020 年 1 月 6 日在读 —2020年 3 月 3 日读完）</strong> 《Kali Linux渗透测试的艺术》<strong>（2020 年 9 月 22 日读完）</strong> 《Kali Linux高级渗透测试》<strong>（2020 年 12 月 14 日读完）</strong></p>\n<h1 id=\"人物传记\"><a href=\"#人物传记\" class=\"headerlink\" title=\"人物传记\"></a>人物传记</h1><p>《任正非传》 <strong>（2020 年 9 月 15 日读完）</strong> 《史蒂芬乔布斯传》 <strong>（2020 年 5 月 10 日读完）</strong></p>\n","categories":["life"],"tags":["清单","读书"]},{"title":"最近的生活","url":"/2020/05/06/%E6%9C%80%E8%BF%91%E7%9A%84%E7%94%9F%E6%B4%BB/","content":"<h1 id=\"一个决定\"><a href=\"#一个决定\" class=\"headerlink\" title=\"一个决定\"></a>一个决定</h1><p>很长一段时间没有写博客了，一方面是因为自己在上个月末不知道是头脑发热还是认真考虑做出了一个重要决定考公务员，另外一方面是五一假期在家几乎没有学习，所以博客更新一直搁置了。 其实每回去一次都会不舍，尤其是糖宝出生之后，做出那个决定很大一部分原因也是因为这个，目前这段时间也在因为这个决定而改变自己的一些生活节奏。</p>\n<span id=\"more\"></span>\n<h1 id=\"每日计划\"><a href=\"#每日计划\" class=\"headerlink\" title=\"每日计划\"></a>每日计划</h1><p>目前每天的生活都比较有规律，没有特殊情况的话计划如下： 工作日： 6：30 起床 7：00-8：20 学习 9：00-12：00 上班 12：00-13：00 休息 13：30-19：30 上班 19：30：-20：30 跑步或运动 21：00-22：00 学习 22：00-22：30 看书 22：30-23：00 玩会手机 23：00 睡觉 休息日： 8：30 起床 9：30-11：30 学习 12：00-14：00 做饭、休息 14：30-18：00 学习 18：00-19：00 吃饭 19：30：-20：30 跑步或运动 21：00-22：00 学习 22：00-22：30 看书 22：30-23：00 玩会手机 23：00 睡觉</p>\n<h1 id=\"感受\"><a href=\"#感受\" class=\"headerlink\" title=\"感受\"></a>感受</h1><p>每天的生活还是比较充实的，其实一直是比较迷茫的，不论是工作还是生活，很难一直没有一个准确的目标，前两天 B 站上面有个《后浪》的演讲很火，但是说实话，后浪享受的权利很多，同样的压力也没有前浪大，总之，生活还是很美好的，向前看总是对的。</p>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p>希望自己能尽快有个明确的目标。</p>\n","categories":["Essay","life"],"tags":["记录","生活"]},{"title":"BiliBili面试记录","url":"/2020/05/19/%E5%B0%8F%E7%94%B5%E8%A7%86%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95/","content":"<h1 id=\"基本信息\"><a href=\"#基本信息\" class=\"headerlink\" title=\"基本信息\"></a>基本信息</h1><p><strong>渠道</strong>：boss <strong>岗位</strong>：系统工程师（游戏中心）</p>\n<h1 id=\"初面（电话）\"><a href=\"#初面（电话）\" class=\"headerlink\" title=\"初面（电话）\"></a>初面（电话）</h1><p>时间大概 10 分钟，主要介绍了岗位需要做什么以及问了下我的想法</p>\n<span id=\"more\"></span>\n<h1 id=\"二面（视频）\"><a href=\"#二面（视频）\" class=\"headerlink\" title=\"二面（视频）\"></a>二面（视频）</h1><p>30 分钟，问了目前服务的架构，目前的业务怎么运作的，介绍了工作的方向以及我向去的方向</p>\n<h1 id=\"三面（视频）\"><a href=\"#三面（视频）\" class=\"headerlink\" title=\"三面（视频）\"></a>三面（视频）</h1><p>40 分钟，问了些技术问题，聊天一样</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>整体感觉还好，就像聊天一样,主要关注点是业务了解程度，学习能力，最后因为经验问题未通过</p>\n","categories":["Essay","life"],"tags":["面试","记录"]},{"title":"下半年计划","url":"/2020/05/27/%E4%B8%8B%E5%8D%8A%E5%B9%B4%E8%AE%A1%E5%88%92/","content":"<blockquote>\n<p>最近一段时间有点迷茫，不知道自己想做什么，今天正好有时间理清下自己下半年的计划</p>\n</blockquote>\n<h1 id=\"下半年计划\"><a href=\"#下半年计划\" class=\"headerlink\" title=\"下半年计划\"></a>下半年计划</h1><p>总的来说下半年有三个想法： 1. 7 月份之前全力准备公务员考试，争取能考上芜湖公务员回家上班。（难度很大） 2. 7 月份之后提升自己，边上班边找工作，找工作有两个想法，一个是在芜湖找一个差不多的工作，另外一个是在上海找一个大一点的公司，两方面同时进行。 3. 年底前找个机会（换工作或者内部转岗）看能不能转安全方向发展</p>\n<span id=\"more\"></span>\n<h1 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h1><p>最近真的很乱，下个月准备休息几天放松下</p>\n","categories":["life"],"tags":["个人"]},{"title":"浏览器访问一个网页的详细过程","url":"/2020/06/17/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AE%BF%E9%97%AE%E4%B8%80%E4%B8%AA%E7%BD%91%E9%A1%B5%E7%9A%84%E8%AF%A6%E7%BB%86%E8%BF%87%E7%A8%8B/","content":"<h1 id=\"概括\"><a href=\"#概括\" class=\"headerlink\" title=\"概括\"></a>概括</h1><p>打开浏览器，在地址栏输入 URL，回车，到出现网页内容，这是访问网站必须要经过的一个过程，这个过程可以概括为几个部分： 1. 域名解析成 IP 地址 2. 与目的主机进行 TCP 连接（三次握手） 3. 发送与收取数据（浏览器与目的主机开始 http 访问过程） 4. 与目的主机断开 TCP 连接（四次挥手）</p>\n<span id=\"more\"></span>\n<h1 id=\"域名解析成-IP-地址\"><a href=\"#域名解析成-IP-地址\" class=\"headerlink\" title=\"域名解析成 IP 地址\"></a>域名解析成 IP 地址</h1><p>访问目标地址有两种方式，一种是直接通过 ip 加端口进行访问，另外一种是使用域名访问，但是由于 IP 地址是一堆数字不方便记忆，所以就有了域名访问的方式，域名访问会通过 DNS 服务器将域名解析为 IP 地址。 <strong>DNS 解析有会通过如下顺序进行查找域名对应的 IP：</strong> 1. 浏览器首先搜索浏览器自身缓存的DNS记录 2. 如果浏览器缓存中没有找到需要的记录或记录已经过期，则搜索hosts文件。 3. 如果在hosts文件中没有找到需要的记录或记录已经过期，则向域名解析服务器发送解析请求。 <strong>DNS 域名解析使用的是 UDP 协议。整个域名解析过程如下：</strong> 1. 浏览器向本机DNS模块发出DNS请求，DNS模块生成相关的DNS报文； 2. DNS模块将生成的DNS报文传递给传输层的UDP协议单元； 3. UDP协议单元将该数据封装成UDP数据报，传递给网络层的IP协议单元； 4. IP协议单元将该数据封装成IP数据包，其目的IP地址为DNS服务器的IP地址； 5. 封装好的IP数据包将传递给数据链路层的协议单元进行发送； 6. 发送时在ARP缓存中查询相关数据，如果没有，就发送ARP广播（包含待查询的IP地址，收到广播的主机检查自己的IP，符合条件的主机将含有自己MAC地址的ARP包发送给ARP广播的主机）请求，等待ARP回应； 7. 得到ARP回应后，将IP地址与路由的下一跳MAC地址对应的信息写入ARP缓存表； 8. 写入缓存后，以路由下一跳的地址填充目的MAC地址，以数据帧形式转发； 9. 转发可能进行多次； 10. DNS请求到达DNS服务器的数据链路层协议单元； 11. DNS服务器的数据链路层协议单元解析数据帧，将内部的IP数据包传递给网络层IP协议单元； 12. DNS服务器的IP协议单元解析IP数据包，将内部的UDP数据报传递给传输层UDP协议单元； 13. DNS服务器的UDP协议单元解析收到的UDP数据报，将内部的DNS报文传递给DNS服务单元； 14. DNS服务单元将域名解析成对应IP地址，产生DNS回应报文； 15. DNS回应报文-&gt;UDP-&gt;IP-&gt;MAC-&gt;我的主机； 16. 我的主机收到数据帧，将数据帧-&gt;IP-&gt;UDP-&gt;浏览器； 17. 将域名解析结果以域名和IP地址对应的形式写入DNS缓存表。</p>\n<h1 id=\"与目的主机进行-TCP-连接（三次握手）\"><a href=\"#与目的主机进行-TCP-连接（三次握手）\" class=\"headerlink\" title=\"与目的主机进行 TCP 连接（三次握手）\"></a>与目的主机进行 TCP 连接（三次握手）</h1><ol>\n<li>向目的主机发送TCP连接请求报文；</li>\n<li>该TCP报文中SYN标志位设为1，表示连接请求；</li>\n<li>该TCP报文通过IP（DNS）-&gt;MAC（ARP）-&gt;网关-&gt;目的主机；</li>\n<li>目的主机收到数据帧，通过IP-&gt;TCP，TCP协议单元回应请求应答报文；</li>\n<li>该报文中SYN和ACK标志设为1，表示连接请求应答；</li>\n<li>该TCP报文通过IP（DNS）-&gt;MAC（ARP）-&gt;网关-&gt;我的主机；</li>\n<li>我的主机收到数据帧，通过IP-&gt;TCP，TCP协议单元回应请求确认报文；</li>\n<li>该TCP报文通过IP（DNS）-&gt;MAC（ARP）-&gt;网关-&gt;目的主机；</li>\n<li>目的主机收到数据帧，通过IP-&gt;TCP，连接建立完成。</li>\n</ol>\n<h1 id=\"发送与收取数据（浏览器与谜底主机开始-HTTP-访问过程）\"><a href=\"#发送与收取数据（浏览器与谜底主机开始-HTTP-访问过程）\" class=\"headerlink\" title=\"发送与收取数据（浏览器与谜底主机开始 HTTP 访问过程）\"></a>发送与收取数据（浏览器与谜底主机开始 HTTP 访问过程）</h1><p>1只有建立连接后才能开始传输数据。</p>\n<ol>\n<li>浏览器向域名发出GET方法报文（HTTP请求）；</li>\n<li>该GET方法报文通过TCP-&gt;IP（DNS）-&gt;MAC（ARP）-&gt;网关-&gt;目的主机；</li>\n<li>目的主机收到数据帧，通过IP-&gt;TCP-&gt;HTTP，HTTP协议单元会回应HTTP协议格式封装好的HTML形式数据（HTTP响应）；</li>\n<li>该HTML数据通过TCP-&gt;IP（DNS）-&gt;MAC（ARP）-&gt;网关-&gt;我的主机；</li>\n<li>我的主机收到数据帧，通过IP-&gt;TCP-&gt;HTTP-&gt;浏览器，浏览器以网页形式显示HTML内容。</li>\n</ol>\n<h1 id=\"与目的主机断开-TCP-连接（四次挥手）\"><a href=\"#与目的主机断开-TCP-连接（四次挥手）\" class=\"headerlink\" title=\"与目的主机断开 TCP 连接（四次挥手）\"></a>与目的主机断开 TCP 连接（四次挥手）</h1><p>TCP连接释放过程：</p>\n<ol>\n<li>浏览器向目的主机发出TCP连接结束请求报文，此时进入FIN WAIT状态；</li>\n<li>该报文FIN标志位设为1，表示结束请求；</li>\n<li>TCP结束请求报文通过IP（DNS）-&gt;MAC（ARP）-&gt;网关-&gt;目的主机；</li>\n<li>目的主机收到数据帧，通过IP-&gt;TCP，TCP协议单元回应结束应答报文；</li>\n<li>当前只是进行回应，因为目的主机可能还有数据要传，并不急着断开连接；</li>\n<li>该报文中ACK标志位设为1，表示收到结束请求；</li>\n<li>目的数据发送完所有数据后，向我的主机发出TCP连接结束请求报文；</li>\n<li>该报文FIN标志位设为1，表示结束请求；</li>\n<li>TCP结束请求报文通过IP（DNS）-&gt;MAC（ARP）-&gt;网关-&gt;我的主机；</li>\n<li>我的主机收到数据帧，通过IP-&gt;TCP，TCP协议单元回应结束应答报文，此时进入TIME WAIT状态，因为不相信网络是可靠的，如果目的主机没收到还可以重发；</li>\n<li>该报文中的FIN标志位均设为1，表示结束应答；</li>\n<li>该TCP回应报文通过IP（DNS）-&gt;MAC（ARP）-&gt;网关-&gt;目的主机；</li>\n<li>目的主机关闭连接；</li>\n<li>TIME WAIT等待结束后，没有收到回复，说明目的正常关闭了，我的主机也关闭连接。</li>\n</ol>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>URL访问网站时的网络传输全过程，可以归纳为： 首先通过域名找到IP，如果缓存里没有就要请求DNS服务器；得到IP后开始与目的主机进行三次握手来建立TCP连接；连接建立后进行HTTP访问，传输并获取网页内容；传输完后与目的主机四次挥手来断开TCP连接。 <a href=\"https://i.loli.net/2020/06/17/8nhabEuVyXkrN5m.jpg\"><img src=\"https://i.loli.net/2020/06/17/8nhabEuVyXkrN5m.jpg\"></a></p>\n","categories":["skills"],"tags":["运维","DNS"]},{"title":"记一次Dnsmasq使用","url":"/2020/07/15/dnsmasq%E8%AF%A6%E8%A7%A3/","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>公司做灰度发布，于是想本地搭建一个 DNS 解析分别印射到不同的环境，方便测试同事进行测试。</p>\n<h1 id=\"什么是-DNSmasq\"><a href=\"#什么是-DNSmasq\" class=\"headerlink\" title=\"什么是 DNSmasq\"></a>什么是 DNSmasq</h1><p>Dnsmasq提供DNS缓存和DHCP服务、Tftp服务功能。作为域名解析服务器(DNS)，Dnsmasq可以通过缓存DNS请求来提高对访问过的网址的连接速度。作为DHCP服务器，Dnsmasq可以为局域网电脑提供内网ip地址和路由。DNS和DHCP两个功能可以同时或分别单独实现。Dnsmasq轻量且易配置，适用于个人用户或少于50台主机的网络。此外它还自带了一个PXE服务器。</p>\n<span id=\"more\"></span>\n<h1 id=\"DNSmasq-主要作用\"><a href=\"#DNSmasq-主要作用\" class=\"headerlink\" title=\"DNSmasq 主要作用\"></a>DNSmasq 主要作用</h1><ol>\n<li>将Dnsmasq作为本地DNS服务器使用，直接修改电脑的本地DNS的IP地址即可。</li>\n<li>应对ISP的DNS劫持（反DNS劫持），输入一个不存在的域名，正常的情况下浏览器是显示无法连接，DNS劫持会跳转到一个广告页面。先随便nslookup 一个不存在的域名，看看ISP商劫持的IP地址。</li>\n<li>智能DNS加快解析速度，打开&#x2F;etc&#x2F;dnsmasq.conf文件，server&#x3D;后面可以添加指定的DNS，例如国内外不同的网站使用不同的DNS。</li>\n</ol>\n<p><strong>国内指定DNS</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">server=/cn/114.114.114.114</span><br><span class=\"line\">server=/taobao.com/114.114.114.114</span><br><span class=\"line\">server=/taobaocdn.com/114.114.114.114</span><br></pre></td></tr></table></figure>\n\n<p><strong>国外指定DNS</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">server=/google.com/8.8.8.8</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>屏蔽网页广告，将指广告的URL指定127这个IP，就可以将网页上讨厌的广告给去掉了。</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">address=/ad.youku.com/127.0.0.1</span><br><span class=\"line\">address=/ad.iqiyi.com/127.0.0.1</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>指定域名解析到特定的IP上。这个功能可以让你控制一些网站的访问，非法的DNS就经常把一些正规的网站解析到不正确IP上。</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">address=/freehao123.com/123.123.123.123</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>管理控制内网DNS，首先将局域网中的所有的设备的本地DNS设置为已经安装Dnsmasq的服务器IP地址。然后修改已经安装Dnsmasq的服务器Hosts文件：&#x2F;etc&#x2F;hosts，指定域名到特定的IP中。</li>\n</ol>\n<h1 id=\"DNSmasq-原理\"><a href=\"#DNSmasq-原理\" class=\"headerlink\" title=\"DNSmasq 原理\"></a>DNSmasq 原理</h1><p>dnsmasq先去解析hosts文件， 再去解析&#x2F;etc&#x2F;dnsmasq.d&#x2F;下的*.conf文件，并且这些文件的优先级要高于dnsmasq.conf，我们自定义的resolv.dnsmasq.conf中的DNS也被称为上游DNS，这是最后去查询解析的； 如果不想用hosts文件做解析，我们可以在&#x2F;etc&#x2F;dnsmasq.conf中加入no-hosts这条语句，这样的话就直接查询上游DNS了，如果我们不想做上游查询，就是不想做正常的解析，我们可以加入no-reslov这条语句。</p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>Linux 软件仓库已经提供了 DNSmasq，相关命令如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum -y install dnsmasq</span><br></pre></td></tr></table></figure>\n\n<p>dnsmasq 的配置文件在<code>/etc/dnsmasq.conf</code> ,这个配置文件包含大量的选项注释</p>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p><code>resolv-file</code> ： 定义dnsmasq从哪里获取上游DNS服务器的地址， 默认从&#x2F;etc&#x2F;resolv.conf获取。 <code>strict-order</code> ：表示严格按照resolv-file文件中的顺序从上到下进行DNS解析，直到第一个解析成功为止。 <code>listen-address</code> ：定义dnsmasq监听的地址，默认是监控本机的所有网卡上。 <code>address</code>：启用泛域名解析，即自定义解析a记录，例如：address&#x3D;&#x2F;long.com&#x2F;192.168.115.10 访问long.com时的所有域名都会被解析成192.168.115.10 <code>bogus-nxdomain</code> ： 对于任何被解析到此 IP 的域名，将响应 NXDOMAIN 使其解析失效，可以多次指定通常用于对于访问不存在的域名，禁止其跳转到运营商的广告站点 <code>server</code> ： 指定使用哪个DNS服务器进行解析，对于不同的网站可以使用不同的域名对应解析。 例如：server&#x3D;&#x2F;google.com&#x2F;8.8.8.8 #表示对于google的服务，使用谷歌的DNS解析 因为我这边需求只需要用到内网 dns 控制，故只修改如下配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">resolv-file=/etc/resolv.dnsmasq.conf    //dnsmasq 会从这个文件中寻找上游dns服务器</span><br><span class=\"line\">strict-order             //去掉前面的#</span><br><span class=\"line\">addn-hosts=/etc/dnsmasq.hosts         //在这个文件里面添加记录</span><br><span class=\"line\">listen-address=127.0.0.1,192.168.1.15     //监听地址</span><br></pre></td></tr></table></figure>\n\n<p>查看配置文件语法是否正确</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">dnsmasq -test</span><br></pre></td></tr></table></figure>","categories":["skills"],"tags":["运维","教程"]},{"title":"【Python3WebSpider01】HTTP 基本原理","url":"/2020/08/06/%E3%80%90python3webspider01%E3%80%91http-%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/","content":"<h1 id=\"HTTP-基本原理\"><a href=\"#HTTP-基本原理\" class=\"headerlink\" title=\"HTTP 基本原理\"></a>HTTP 基本原理</h1><h2 id=\"1-URI-和-URL\"><a href=\"#1-URI-和-URL\" class=\"headerlink\" title=\"1. URI 和 URL\"></a>1. URI 和 URL</h2><p>URI的全称为Uniform Resource Identifier，即统一资源标志符，URL的全称为Universal Resource Locator，即统一资源定位符。 简单来说，<a href=\"https://www.baidu.com/favicon.ico\">https://www.baidu.com/favicon.ico</a> 是 Baidu 的网站图标链接，它是一个 URI 也是一个 URL。即有这样的一个图标资源，我们用URL&#x2F;URI来唯一指定了它的访问方式，这其中包括了访问协议https、访问路径（&#x2F;即根目录）和资源名称favicon.ico。通过这样一个链接，我们便可以从互联网上找到这个资源，这就是URL&#x2F;URI。 <span id=\"more\"></span>URL是URI的子集，也就是说每个URL都是URI，但不是每个URI都是URL。URI 还包括一个子类叫做 URN，全称Universal Resource Name，即统一资源名称。URN只命名资源而不指定如何定位资源，比如一本书的ISBN，可以唯一标识这本书，但是没有指定到哪里定位这本书，这就是URN。<!--more--></p>\n<h2 id=\"2-超文本\"><a href=\"#2-超文本\" class=\"headerlink\" title=\"2. 超文本\"></a>2. 超文本</h2><p>我们在浏览器里看到的网页就是超文本解析而成的，其网页源代码是一系列HTML代码，里面包含了一系列标签，比如img显示图片，p指定显示段落等。浏览器解析这些标签后，便形成了我们平常看到的网页，而网页的源代码HTML就可以称作超文本。</p>\n<h2 id=\"3-HTTP-和-HTTPS\"><a href=\"#3-HTTP-和-HTTPS\" class=\"headerlink\" title=\"3. HTTP 和 HTTPS\"></a>3. HTTP 和 HTTPS</h2><p>在爬虫中，抓取的页面通常是 http 或者 https 协议，这和我们常用的 ftp、sftp、smb 一样都是访问资源的一种协议类型。 HTTP的全称是Hyper Text Transfer Protocol，中文名叫作超文本传输协议。HTTP协议是用于从网络传输超文本数据到本地浏览器的传送协议，它能保证高效而准确地传送超文本文档。HTTP由万维网协会（World Wide Web Consortium）和Internet工作小组IETF（Internet Engineering Task Force）共同合作制定的规范，目前广泛使用的是HTTP 1.1版本。 HTTPS的全称是Hyper Text Transfer Protocol over Secure Socket Layer，是以安全为目标的HTTP通道，简单讲是HTTP的安全版，即HTTP下加入SSL层，简称为HTTPS。 HTTPS的安全基础是SSL，因此通过它传输的内容都是经过SSL加密的。</p>\n<h2 id=\"4-HTTP-请求过程\"><a href=\"#4-HTTP-请求过程\" class=\"headerlink\" title=\"4.HTTP 请求过程\"></a>4.HTTP 请求过程</h2><p><a href=\"https://www.52ynn.top/index.php/2020/06/17/%e6%b5%8f%e8%a7%88%e5%99%a8%e8%ae%bf%e9%97%ae%e4%b8%80%e4%b8%aa%e7%bd%91%e9%a1%b5%e7%9a%84%e8%af%a6%e7%bb%86%e8%bf%87%e7%a8%8b/\" title=\"http请求过程\">http请求过程</a></p>\n<h2 id=\"5-请求\"><a href=\"#5-请求\" class=\"headerlink\" title=\"5.请求\"></a>5.请求</h2><p>请求，由客户端向服务端发出，可以分为4部分内容：请求方法（Request Method）、请求的网址（Request URL）、请求头（Request Headers）、请求体（Request Body）。</p>\n<ul>\n<li><p>请求方法 常见的请求方法有两种：GET和POST。</p>\n<p>方法</p>\n<p>描述</p>\n<p>GET</p>\n<p>请求页面，并返回页面内容</p>\n<p>POST</p>\n<p>大多用于提交表单或上传文件，数据包含在请求体中</p>\n<p>PUT</p>\n<p>从客户端向服务器传送的数据取代指定文档中的内容</p>\n<p>DELETE</p>\n<p>请求服务器删除指定的页面</p>\n<p>CONNECT</p>\n<p>把服务器当作跳板，让服务器代替客户端访问其他网页</p>\n<p>OPTIONS</p>\n<p>允许客户端查看服务器的性能</p>\n<p>TRACE</p>\n<p>回显服务器收到的请求，主要用于测试或诊断</p>\n</li>\n<li><p>请求的网址 请求的网址，即统一资源定位符URL，它可以唯一确定我们想请求的资源。</p>\n</li>\n<li><p>请求头</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">请求头，用来说明服务器要使用的附加信息，比较重要的信息有Cookie、Referer、User-Agent等。下面简要说明一些常用的头信息。</span><br><span class=\"line\"></span><br><span class=\"line\">Accept：请求报头域，用于指定客户端可接受哪些类型的信息。</span><br><span class=\"line\">Accept-Language：指定客户端可接受的语言类型。</span><br><span class=\"line\">Accept-Encoding：指定客户端可接受的内容编码。</span><br><span class=\"line\">Host：用于指定请求资源的主机IP和端口号，其内容为请求URL的原始服务器或网关的位置。从HTTP 1.1版本开始，请求必须包含此内容。</span><br><span class=\"line\">Cookie：也常用复数形式 Cookies，这是网站为了辨别用户进行会话跟踪而存储在用户本地的数据。它的主要功能是维持当前访问会话。例如，我们输入用户名和密码成功登录某个网站后，服务器会用会话保存登录状态信息，后面我们每次刷新或请求该站点的其他页面时，会发现都是登录状态，这就是Cookies的功劳。Cookies里有信息标识了我们所对应的服务器的会话，每次浏览器在请求该站点的页面时，都会在请求头中加上Cookies并将其发送给服务器，服务器通过Cookies识别出是我们自己，并且查出当前状态是登录状态，所以返回结果就是登录之后才能看到的网页内容。</span><br><span class=\"line\">Referer：此内容用来标识这个请求是从哪个页面发过来的，服务器可以拿到这一信息并做相应的处理，如作来源统计、防盗链处理等。</span><br><span class=\"line\">User-Agent：简称UA，它是一个特殊的字符串头，可以使服务器识别客户使用的操作系统及版本、浏览器及版本等信息。在做爬虫时加上此信息，可以伪装为浏览器；如果不加，很可能会被识别出为爬虫。</span><br><span class=\"line\">Content-Type：也叫互联网媒体类型（Internet Media Type）或者MIME类型，在HTTP协议消息头中，它用来表示具体请求中的媒体类型信息。例如，text/html代表HTML格式，image/gif代表GIF图片，application/json代表JSON类型，更多对应关系可以查看此对照表：http://tool.oschina.net/commons。</span><br><span class=\"line\">因此，请求头是请求的重要组成部分，在写爬虫时，大部分情况下都需要设定请求头。</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>请求体 请求体一般承载的内容是POST请求中的表单数据，而对于GET请求，请求体则为空。</li>\n</ul>\n<h2 id=\"6-响应\"><a href=\"#6-响应\" class=\"headerlink\" title=\"6 响应\"></a>6 响应</h2><p>响应，由服务端返回给客户端，可以分为三部分：响应状态码（Response Status Code）、响应头（Response Headers）和响应体（Response Body）</p>\n<ul>\n<li><p>响应状态码 响应状态码表示服务器的响应状态，如200代表服务器正常响应，404代表页面未找到，500代表服务器内部发生错误。在爬虫中，我们可以根据状态码来判断服务器响应状态，如状态码为200，则证明成功返回数据，再进行进一步的处理，否则直接忽略。表2-3列出了常见的错误代码及错误原因。</p>\n</li>\n<li><p>响应头 响应头包含了服务器对请求的应答信息，如Content-Type、Server、Set-Cookie等。下面简要说明一些常用的头信息。</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Date：标识响应产生的时间。</span><br><span class=\"line\">Last-Modified：指定资源的最后修改时间。</span><br><span class=\"line\">Content-Encoding：指定响应内容的编码。</span><br><span class=\"line\">Server：包含服务器的信息，比如名称、版本号等。</span><br><span class=\"line\">Content-Type：文档类型，指定返回的数据类型是什么，如text/html代表返回HTML文档，application/x-javascript则代表返回JavaScript文件，image/jpeg则代表返回图片。</span><br><span class=\"line\">Set-Cookie：设置Cookies。响应头中的Set-Cookie告诉浏览器需要将此内容放在Cookies中，下次请求携带Cookies请求。</span><br><span class=\"line\">Expires：指定响应的过期时间，可以使代理服务器或浏览器将加载的内容更新到缓存中。如果再次访问时，就可以直接从缓存中加载，降低服务器负载，缩短加载时间。</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>响应体 最重要的当属响应体的内容了。响应的正文数据都在响应体中，比如请求网页时，它的响应体就是网页的HTML代码；请求一张图片时，它的响应体就是图片的二进制数据。我们做爬虫请求网页后，要解析的内容就是响应体</li>\n</ul>\n","categories":["skills"],"tags":["Python","http","爬虫"]},{"title":"【Python3WebSpider02】爬虫基本原理","url":"/2020/08/06/%E3%80%90python3webspider02%E3%80%91%E7%88%AC%E8%99%AB%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/","content":"<h1 id=\"爬虫基本原理\"><a href=\"#爬虫基本原理\" class=\"headerlink\" title=\"爬虫基本原理\"></a>爬虫基本原理</h1><h2 id=\"爬虫概述\"><a href=\"#爬虫概述\" class=\"headerlink\" title=\"爬虫概述\"></a>爬虫概述</h2><p>获取并提取和保存信息的自动化程序</p>\n<h4 id=\"1-获取网页\"><a href=\"#1-获取网页\" class=\"headerlink\" title=\"1. 获取网页\"></a>1. 获取网页</h4><p>爬虫首先要做的是获取网页的源代码。源代码里包含了网页的部分有用信息，获取之后再提取想要的信息。</p>\n<span id=\"more\"></span>\n<h4 id=\"2-提取信息\"><a href=\"#2-提取信息\" class=\"headerlink\" title=\"2. 提取信息\"></a>2. 提取信息</h4><p>获取网页源代码后，接下来就是分析网页源代码，从中提取我们想要的数据。首先，最通用的方法便是采用正则表达式提取，这是一个万能的方法，但是在构造正则表达式时比较复杂且容易出错。 另外，由于网页的结构有一定的规则，所以还有一些根据网页节点属性、CSS选择器或XPath来提取网页信息的库，如Beautiful Soup、pyquery、lxml等。使用这些库，我们可以高效快速地从中提取网页信息，如节点的属性、文本值等 提取信息是爬虫非常重要的部分，它可以使杂乱的数据变得条理清晰，以便我们后续处理和分析数据。</p>\n<h4 id=\"3-保存数据\"><a href=\"#3-保存数据\" class=\"headerlink\" title=\"3. 保存数据\"></a>3. 保存数据</h4><p>提取信息后，一般会将提取到的数据保存到某处以便后续使用。数据的持久化可以有多种方式，简单点的保存为 txt 或者 json 文办，也可以保存到数据库。</p>\n<h4 id=\"4-自动化程序\"><a href=\"#4-自动化程序\" class=\"headerlink\" title=\"4. 自动化程序\"></a>4. 自动化程序</h4><p>上述几个操作可以手工处理，但是在面临大量数据或者想快速抓取数据的时候，还是需要借助程序。爬虫就是爬取数据的自动化程序，就可以在抓取的过程中进行各种异常处理、错误重试等操作。</p>\n<h2 id=\"能抓哪些数据\"><a href=\"#能抓哪些数据\" class=\"headerlink\" title=\"能抓哪些数据\"></a>能抓哪些数据</h2><p>在网页中我们能看到各种各样的信息，最常见的便是常规网页，它们对应着HTML代码，而最常抓取的便是HTML源代码。 另外，可能有些网页返回的不是HTML代码，而是一个JSON字符串（其中API接口大多采用这样的形式），这种格式的数据方便传输和解析，它们同样可以抓取，而且数据提取更加方便。 此外，我们还可以看到各种二进制数据，如图片、视频和音频等。利用爬虫，我们可以将这些二进制数据抓取下来，然后保存成对应的文件名。 另外，还可以看到各种扩展名的文件，如CSS、JavaScript和配置文件等，这些其实也是最普通的文件，只要在浏览器里面可以访问到，就可以将其抓取下来。 上述内容其实都对应各自的URL，是基于HTTP或HTTPS协议的，只要是这种数据，爬虫都可以抓取。</p>\n","categories":["skills"],"tags":["记录","Python","爬虫"]},{"title":"【Python3WebSpider03】正则表达式","url":"/2020/08/10/%E3%80%90python3webspider03%E3%80%91%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/","content":"<h1 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h1><p>正则表达式是处理字符串的强大工具，它有自己特定的语法结构，可以实现字符串的检索、替换、匹配认证，是爬虫学习中必不可少的一个工具</p>\n<span id=\"more\"></span>\n<h3 id=\"常用匹配规则\"><a href=\"#常用匹配规则\" class=\"headerlink\" title=\"常用匹配规则\"></a>常用匹配规则</h3><p>模式</p>\n<p>描述</p>\n<p><code>w</code></p>\n<p>匹配字母、数字及下划线</p>\n<p><code>W</code></p>\n<p>匹配不是字母、数字及下划线的字符</p>\n<p><code>s</code></p>\n<p>匹配任意空白字符，等价于<code>[tnrf]</code></p>\n<p><code>S</code></p>\n<p>匹配任意非空字符</p>\n<p><code>d</code></p>\n<p>匹配任意数字，等价于<code>[0-9]</code></p>\n<p><code>D</code></p>\n<p>匹配任意非数字的字符</p>\n<p><code>A</code></p>\n<p>匹配字符串开头</p>\n<p><code>Z</code></p>\n<p>匹配字符串结尾，如果存在换行，只匹配换行前的结束字符串</p>\n<p><code>z</code></p>\n<p>匹配字符串结尾，如果存在换行，同时还会匹配换行符</p>\n<p><code>G</code></p>\n<p>匹配最后匹配完成的位置</p>\n<p><code>n</code></p>\n<p>匹配一个换行符</p>\n<p><code>t</code></p>\n<p>匹配一个制表符</p>\n<p><code>^</code></p>\n<p>匹配一行字符串的开头</p>\n<p><code>$</code></p>\n<p>匹配一行字符串的结尾</p>\n<p><code>.</code></p>\n<p>匹配任意字符，除了换行符，当<code>re.DOTALL</code>标记被指定时，则可以匹配包括换行符的任意字符</p>\n<p><code>[...]</code></p>\n<p>用来表示一组字符，单独列出，比如<code>[amk]</code>匹配a、m或k</p>\n<p><code>[^...]</code></p>\n<p>不在<code>[]</code>中的字符，比如<code>[^abc]</code>匹配除了<code>a</code>、<code>b</code>、<code>c</code>之外的字符</p>\n<p><code>*</code></p>\n<p>匹配0个或多个表达式</p>\n<p><code>+</code></p>\n<p>匹配1个或多个表达式</p>\n<p><code>?</code></p>\n<p>匹配0个或1个前面的正则表达式定义的片段，非贪婪方式</p>\n<p><code>&#123;n&#125;</code></p>\n<p>精确匹配n个前面的表达式</p>\n<p><code>&#123;n,m&#125;</code></p>\n<p>匹配n到m次由前面正则表达式定义的片段，贪婪方式</p>\n<p><code>ab</code></p>\n<p>匹配a或b</p>\n<p><code>()</code></p>\n<p>匹配括号内的表达式，也表示一个组</p>\n<h3 id=\"方法介绍\"><a href=\"#方法介绍\" class=\"headerlink\" title=\"方法介绍\"></a>方法介绍</h3><h4 id=\"match\"><a href=\"#match\" class=\"headerlink\" title=\"match()\"></a><code>match()</code></h4><p><code>match()</code>是常见的匹配方法，向 <code>match()</code>传入要匹配的字符串以及正则表达式，就可以检测这个正则表达式是否匹配字符串 <code>match()</code>方法会尝试从字符串的起始位置匹配政策表达式，如果匹配，就返回匹配成功的结果；如果不匹配，就返回<code>None</code>。 示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">content = <span class=\"string\">&#x27;Hello 123 4567 World_This is a Regex Demo&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(content))</span><br><span class=\"line\">result = re.<span class=\"keyword\">match</span>(<span class=\"string\">&#x27;^Hellosdddsd&#123;4&#125;sw&#123;10&#125;&#x27;</span>, content)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(result)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(result.group())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(result.span())</span><br></pre></td></tr></table></figure>\n\n<p>运行结果： <a href=\"https://i.loli.net/2020/08/10/vN6Hd2jcyTPsfSo.jpg\"><img src=\"https://i.loli.net/2020/08/10/vN6Hd2jcyTPsfSo.jpg\"></a></p>\n<h5 id=\"匹配目标\"><a href=\"#匹配目标\" class=\"headerlink\" title=\"匹配目标\"></a>匹配目标</h5><p>上面例子是匹配得到字符串内容，如果想从字符串中提取一部分内容可以使用如下方法 可以使用()括号将想提取的子字符串括起来。()实际上标记了一个子表达式的开始和结束位置，被标记的每个子表达式会依次对应每一个分组，调用group()方法传入分组的索引即可获取提取的结果</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">content = <span class=\"string\">&#x27;Hello 1234567 World_This is a Regex Demo&#x27;</span></span><br><span class=\"line\">result = re.<span class=\"keyword\">match</span>(<span class=\"string\">&#x27;^Hellos(d+)sWorld&#x27;</span>, content)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(result)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(result.group())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(result.group(<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(result.span())</span><br></pre></td></tr></table></figure>\n\n<p>运行结果 <a href=\"https://i.loli.net/2020/08/13/U2DACisTvJwIgyP.jpg\"><img src=\"https://i.loli.net/2020/08/13/U2DACisTvJwIgyP.jpg\"></a> 假如正则表达式后面还有()包括的内容，那么可以依次用group(2)、group(3)等来获取。</p>\n<h5 id=\"通用匹配\"><a href=\"#通用匹配\" class=\"headerlink\" title=\"通用匹配\"></a>通用匹配</h5><p>上面匹配工作量非常大，可以使用<code>.*</code>匹配任意字符。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">content = <span class=\"string\">&#x27;Hello 123 4567 World_This is a Regex Demo&#x27;</span></span><br><span class=\"line\">result = re.<span class=\"keyword\">match</span>(<span class=\"string\">&#x27;^Hello.*Demo$&#x27;</span>, content)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(result)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(result.group())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(result.span())</span><br></pre></td></tr></table></figure>\n\n<p>运行结果 <a href=\"https://i.loli.net/2020/08/13/23KQNOtCkAJSon5.jpg\"><img src=\"https://i.loli.net/2020/08/13/23KQNOtCkAJSon5.jpg\"></a></p>\n<h5 id=\"贪婪和非贪婪\"><a href=\"#贪婪和非贪婪\" class=\"headerlink\" title=\"贪婪和非贪婪\"></a>贪婪和非贪婪</h5><p>使用通用匹配有时候得等到的结果可能不是我们想要的结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">content = <span class=\"string\">&#x27;Hello 1234567 World_This is a Regex Demo&#x27;</span></span><br><span class=\"line\">result = re.<span class=\"keyword\">match</span>(<span class=\"string\">&#x27;^He.*(d+).*Demo$&#x27;</span>, content)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(result)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(result.group(<span class=\"number\">1</span>))</span><br></pre></td></tr></table></figure>\n\n<p>结果 <a href=\"https://i.loli.net/2020/08/13/jsMemxtwiG697uf.jpg\"><img src=\"https://i.loli.net/2020/08/13/jsMemxtwiG697uf.jpg\"></a> 这里得到数字只有 7，而不是<code>1234567</code>,这里涉及到贪婪匹配和非贪婪匹配的问题，<code>.*</code>会匹配尽可能多的字符，正则表达式中<code>.*</code>后面是<code>d+</code>，也就是至少一个数字，并没有指定具体多少个数字，因此，<code>.*</code>就尽可能匹配多的字符，这里就把<code>123456</code>匹配了，给<code>d+</code>留下一个可满足条件的数字<code>7</code>，最后得到的内容就只有数字<code>7</code>了。这里就需要使用非贪婪模式<code>.*?</code>匹配</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">content = <span class=\"string\">&#x27;Hello 1234567 World_This is a Regex Demo&#x27;</span></span><br><span class=\"line\">result = re.<span class=\"keyword\">match</span>(<span class=\"string\">&#x27;^He.*?(d+).*Demo$&#x27;</span>, content)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(result)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(result.group(<span class=\"number\">1</span>))</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://i.loli.net/2020/08/13/XNxERJFauW36vif.jpg\"><img src=\"https://i.loli.net/2020/08/13/XNxERJFauW36vif.jpg\"></a> 贪婪匹配是尽可能匹配多的字符，非贪婪匹配就是尽可能匹配少的字符。当<code>.*?</code>匹配到<code>Hello</code>后面的空白字符时，再往后的字符就是数字了，而<code>d+</code>恰好可以匹配，那么这里<code>.*?</code>就不再进行匹配，交给<code>d+</code>去匹配后面的数字。所以这样<code>.*?</code>匹配了尽可能少的字符，<code>d+</code>的结果就是<code>1234567</code>了。</p>\n<h5 id=\"修饰符\"><a href=\"#修饰符\" class=\"headerlink\" title=\"修饰符\"></a>修饰符</h5><p>正则表达式可以包含一些可选标志修饰符来控制匹配的模式。修饰符被指定为一个可选的标志。 在字符串中加入换行符之后</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">content = <span class=\"string\">&#x27;&#x27;&#x27;Hello 1234567 World_This</span></span><br><span class=\"line\"><span class=\"string\">is a Regex Demo</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">result = re.<span class=\"keyword\">match</span>(<span class=\"string\">&#x27;^He.*?(\\d+).*?Demo$&#x27;</span>, content)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(result.group(<span class=\"number\">1</span>))</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://i.loli.net/2020/08/13/QrtGAR1vzPcae3N.jpg\"><img src=\"https://i.loli.net/2020/08/13/QrtGAR1vzPcae3N.jpg\"></a> 运行直接报错，因为<code>\\.</code>匹配的是除换行符之外的任意字符，当遇到换行符时，<code>.*?</code>就不能用，这里需要加个修饰符<code>re.S</code>修正这个错误</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">result = re.<span class=\"keyword\">match</span>(<span class=\"string\">&#x27;^He.*?(\\d+).*?Demo$&#x27;</span>, content, re.S)</span><br></pre></td></tr></table></figure>\n\n<p>这个修饰符的作用是使.匹配包括换行符在内的所有字符。 在网页匹配中经常要用到这个修饰符，因为 html 节点经常会有换行。除了这个修饰符，还有其它修饰符</p>\n<p>修饰符</p>\n<p>描述</p>\n<p><code>re.I</code></p>\n<p>使匹配对大小写不敏感</p>\n<p><code>re.L</code></p>\n<p>做本地化识别（<code>locale-aware</code>）匹配</p>\n<p><code>re.M</code></p>\n<p>多行匹配，影响<code>^</code>和<code>$</code></p>\n<p><code>re.S</code></p>\n<p>使.匹配包括换行在内的所有字符</p>\n<p><code>re.U</code></p>\n<p>根据Unicode字符集解析字符。这个标志影响\\w、<code>\\W</code>、 <code>\\b</code>和<code>\\B</code></p>\n<p><code>re.X</code></p>\n<p>该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解</p>\n<h5 id=\"转义字符\"><a href=\"#转义字符\" class=\"headerlink\" title=\"转义字符\"></a>转义字符</h5><p>我们知道正则表达式定义了许多匹配模式，如.匹配除换行符以外的任意字符，但是如果目标字符串里面就包含. 这里就需要用到转义匹配了<code>\\</code></p>\n<h4 id=\"search\"><a href=\"#search\" class=\"headerlink\" title=\"search()\"></a><code>search()</code></h4><p><code>match()</code>方法是从字符串开头开始匹配的，一旦开头不匹配，那么整个匹配就失败了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">content = <span class=\"string\">&#x27;Extra stings Hello 1234567 World_This is a Regex Demo Extra stings&#x27;</span></span><br><span class=\"line\">result = re.<span class=\"keyword\">match</span>(<span class=\"string\">&#x27;Hello.*?(\\d+).*?Demo&#x27;</span>, content)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(result.group(<span class=\"number\">1</span>))</span><br></pre></td></tr></table></figure>\n\n<p>运行结果 <a href=\"https://i.loli.net/2020/08/13/DkdmTNpwq8jWOE9.jpg\"><img src=\"https://i.loli.net/2020/08/13/DkdmTNpwq8jWOE9.jpg\"></a> 这里返回的是 none，因为<code>match()</code>方法使用时需要考虑开头的内容，这在做匹配时并不方便。它更适合用来检测某个字符串是否符合某个正则表达式的规则。 <code>search()</code>，它在匹配时会扫描整个字符串，然后返回第一个成功匹配的结果。也就是说，正则表达式可以是字符串的一部分，在匹配时，<code>search()</code>方法会依次扫描字符串，直到找到第一个符合规则的字符串，然后返回匹配内容，如果搜索完了还没有找到，就返回<code>None</code>。 我们把上面代码中的<code>match()</code>方法修改成<code>search()</code>，再看下运行结果： <a href=\"https://i.loli.net/2020/08/13/dSA8gX6RLTpkiGU.jpg\"><img src=\"https://i.loli.net/2020/08/13/dSA8gX6RLTpkiGU.jpg\"></a> 因此，为了匹配方便，匹配时可以尽量使用<code>search()</code>方法 使用一个实例看看<code>search()</code>的用法，准备一个待匹配的<code>HTML</code>文档：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">html = &#x27;&#x27;&#x27;&lt;div id=&quot;songs-list&quot;&gt;</span><br><span class=\"line\">    &lt;h2 class=&quot;title&quot;&gt;经典老歌&lt;/h2&gt;</span><br><span class=\"line\">    &lt;p class=&quot;introduction&quot;&gt;</span><br><span class=\"line\">        经典老歌列表</span><br><span class=\"line\">    &lt;/p&gt;</span><br><span class=\"line\">    &lt;ul id=&quot;list&quot; class=&quot;list-group&quot;&gt;</span><br><span class=\"line\">        &lt;li data-view=&quot;2&quot;&gt;一路上有你&lt;/li&gt;</span><br><span class=\"line\">        &lt;li data-view=&quot;7&quot;&gt;</span><br><span class=\"line\">            &lt;a href=&quot;/2.mp3&quot; singer=&quot;任贤齐&quot;&gt;沧海一声笑&lt;/a&gt;</span><br><span class=\"line\">        &lt;/li&gt;</span><br><span class=\"line\">        &lt;li data-view=&quot;4&quot; class=&quot;active&quot;&gt;</span><br><span class=\"line\">            &lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;&gt;往事随风&lt;/a&gt;</span><br><span class=\"line\">        &lt;/li&gt;</span><br><span class=\"line\">        &lt;li data-view=&quot;6&quot;&gt;&lt;a href=&quot;/4.mp3&quot; singer=&quot;beyond&quot;&gt;光辉岁月&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">        &lt;li data-view=&quot;5&quot;&gt;&lt;a href=&quot;/5.mp3&quot; singer=&quot;陈慧琳&quot;&gt;记事本&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">        &lt;li data-view=&quot;5&quot;&gt;</span><br><span class=\"line\">            &lt;a href=&quot;/6.mp3&quot; singer=&quot;邓丽君&quot;&gt;&lt;i class=&quot;fa fa-user&quot;&gt;&lt;/i&gt;但愿人长久&lt;/a&gt;</span><br><span class=\"line\">        &lt;/li&gt;</span><br><span class=\"line\">    &lt;/ul&gt;</span><br><span class=\"line\">&lt;/div&gt;&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>我们尝试提取class为active的li节点内部的超链接包含的歌手名和歌名，此时需要提取第三个li节点下a节点的singer属性和文本。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">html = <span class=\"string\">&#x27;&#x27;&#x27;&lt;div id=&quot;songs-list&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;h2 class=&quot;title&quot;&gt;经典老歌&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;p class=&quot;introduction&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">        经典老歌列表</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;ul id=&quot;list&quot; class=&quot;list-group&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;li data-view=&quot;2&quot;&gt;一路上有你&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;li data-view=&quot;7&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;a href=&quot;/2.mp3&quot; singer=&quot;任贤齐&quot;&gt;沧海一声笑&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;li data-view=&quot;4&quot; class=&quot;active&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;&gt;往事随风&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;li data-view=&quot;6&quot;&gt;&lt;a href=&quot;/4.mp3&quot; singer=&quot;beyond&quot;&gt;光辉岁月&lt;/a&gt;&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;li data-view=&quot;5&quot;&gt;&lt;a href=&quot;/5.mp3&quot; singer=&quot;陈慧琳&quot;&gt;记事本&lt;/a&gt;&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;li data-view=&quot;5&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;a href=&quot;/6.mp3&quot; singer=&quot;邓丽君&quot;&gt;&lt;i class=&quot;fa fa-user&quot;&gt;&lt;/i&gt;但愿人长久&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/div&gt;&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">result = re.search(<span class=\"string\">&#x27;&lt;li.*?active.*?singer=&quot;(.*?)&quot;&gt;(.*?)&lt;/a&gt;&#x27;</span>, html, re.S)</span><br><span class=\"line\"><span class=\"keyword\">if</span> result:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(result.group(<span class=\"number\">1</span>), result.group(<span class=\"number\">2</span>))</span><br></pre></td></tr></table></figure>\n\n<p>结果 <a href=\"https://i.loli.net/2020/08/13/JEr863zZGIfFOuw.jpg\"><img src=\"https://i.loli.net/2020/08/13/JEr863zZGIfFOuw.jpg\"></a></p>\n<h5 id=\"findall\"><a href=\"#findall\" class=\"headerlink\" title=\"findall()\"></a><code>findall()</code></h5><p><code>search()</code>方法的用法，可以匹配正则表达式的第一个内容，但是要获取匹配的所有内容得借助<code>findall()</code>方法。 还是上面的 HTML文档，如果想要获取所有 a 节点的超链接、歌手和歌名</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">html = <span class=\"string\">&#x27;&#x27;&#x27;&lt;div id=&quot;songs-list&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;h2 class=&quot;title&quot;&gt;经典老歌&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;p class=&quot;introduction&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">        经典老歌列表</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;ul id=&quot;list&quot; class=&quot;list-group&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;li data-view=&quot;2&quot;&gt;一路上有你&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;li data-view=&quot;7&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;a href=&quot;/2.mp3&quot; singer=&quot;任贤齐&quot;&gt;沧海一声笑&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;li data-view=&quot;4&quot; class=&quot;active&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;&gt;往事随风&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;li data-view=&quot;6&quot;&gt;&lt;a href=&quot;/4.mp3&quot; singer=&quot;beyond&quot;&gt;光辉岁月&lt;/a&gt;&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;li data-view=&quot;5&quot;&gt;&lt;a href=&quot;/5.mp3&quot; singer=&quot;陈慧琳&quot;&gt;记事本&lt;/a&gt;&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;li data-view=&quot;5&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;a href=&quot;/6.mp3&quot; singer=&quot;邓丽君&quot;&gt;&lt;i class=&quot;fa fa-user&quot;&gt;&lt;/i&gt;但愿人长久&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/div&gt;&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">results = re.findall(<span class=\"string\">&#x27;&lt;li.*?href=&quot;(.*?)&quot;.*?singer=&quot;(.*?)&quot;&gt;(.*?)&lt;/a&gt;&#x27;</span>, html, re.S)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(results))</span><br><span class=\"line\"><span class=\"keyword\">for</span> result <span class=\"keyword\">in</span> results:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(result)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(result[<span class=\"number\">0</span>], result[<span class=\"number\">1</span>], result[<span class=\"number\">2</span>])</span><br></pre></td></tr></table></figure>\n\n<p>运行结果 <a href=\"https://i.loli.net/2020/08/13/o4xKuqzslGcpfF8.jpg\"><img src=\"https://i.loli.net/2020/08/13/o4xKuqzslGcpfF8.jpg\"></a> 可以看到，返回的列表中的每个元素都是元组类型，我们用对应的索引依次取出即可。 如果只是获取第一个内容，可以用search()方法。当需要提取多个内容时，可以用findall()方法</p>\n<h5 id=\"sub\"><a href=\"#sub\" class=\"headerlink\" title=\"sub()\"></a><code>sub()</code></h5><p>除了使用正则表达式提取信息外，有时候还需要借助它来修改文本。比如，想要把一串文本中的所有数字都去掉，如果只用字符串的replace()方法，那就太烦琐了，这时可以借助sub()方法。示例如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">content = <span class=\"string\">&#x27;54aK54yr5oiR54ix5L2g&#x27;</span></span><br><span class=\"line\">content = re.sub(<span class=\"string\">&#x27;\\d+&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>, content)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(content)</span><br></pre></td></tr></table></figure>\n\n<p>运行结果</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">aKyroiRixLg</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"compile\"><a href=\"#compile\" class=\"headerlink\" title=\"compile()\"></a><code>compile()</code></h5><p>前面所讲的方法都是用来处理字符串的方法，最后再介绍一下compile()方法，这个方法可以将正则字符串编译成正则表达式对象，以便在后面的匹配中复用。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">content1 = <span class=\"string\">&#x27;2016-12-15 12:00&#x27;</span></span><br><span class=\"line\">content2 = <span class=\"string\">&#x27;2016-12-17 12:55&#x27;</span></span><br><span class=\"line\">content3 = <span class=\"string\">&#x27;2016-12-22 13:21&#x27;</span></span><br><span class=\"line\">pattern = re.<span class=\"built_in\">compile</span>(<span class=\"string\">&#x27;\\d&#123;2&#125;:\\d&#123;2&#125;&#x27;</span>)</span><br><span class=\"line\">result1 = re.sub(pattern, <span class=\"string\">&#x27;&#x27;</span>, content1)</span><br><span class=\"line\">result2 = re.sub(pattern, <span class=\"string\">&#x27;&#x27;</span>, content2)</span><br><span class=\"line\">result3 = re.sub(pattern, <span class=\"string\">&#x27;&#x27;</span>, content3)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(result1, result2, result3)</span><br></pre></td></tr></table></figure>\n\n<p>例如，这里有3个日期，我们想分别将3个日期中的时间去掉，这时可以借助sub()方法。该方法的第一个参数是正则表达式，但是这里没有必要重复写3个同样的正则表达式，此时可以借助compile()方法将正则表达式编译成一个正则表达式对象，以便复用。 运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">2016-12-15  2016-12-17  2016-12-22</span><br></pre></td></tr></table></figure>\n\n<p>另外，compile()还可以传入修饰符，例如re.S等修饰符，这样在search()、findall()等方法中就不需要额外传了。所以，compile()方法可以说是给正则表达式做了一层封装，以便我们更好地复用。</p>\n","categories":["skills"],"tags":["Python","爬虫","正则"]},{"title":"记一次生产环境 nginx 优化","url":"/2020/08/12/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83-nginx-%E4%BC%98%E5%8C%96/","content":"<h1 id=\"nginx-优化\"><a href=\"#nginx-优化\" class=\"headerlink\" title=\"nginx 优化\"></a>nginx 优化</h1><p>由于业务场景需要，近期将生产环境由阿里云的 SLB 更换为自建 nginx，之前在测试环境使用了一段时间一直没有问题，但是上周上到生产后出现了一系列问题，因此对 nginx 做了一些优化，记录下以备以后需要。</p>\n<span id=\"more\"></span>\n<h2 id=\"高并发优化\"><a href=\"#高并发优化\" class=\"headerlink\" title=\"高并发优化\"></a>高并发优化</h2><p>生产环境相对于测试环境访问量多了很多，并发量大的时候会出现部分请求 502 的情况，因此对高并发进行了一点优化，主要分两方面，一方面是系统层面，一方面是 nginx 层面。</p>\n<h4 id=\"系统内核层面\"><a href=\"#系统内核层面\" class=\"headerlink\" title=\"系统内核层面\"></a>系统内核层面</h4><p>修改<code>/etc/sysctl.conf</code>内核参数。</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">fs.file-max</span> = <span class=\"string\">999999</span></span><br><span class=\"line\"><span class=\"attr\">net.ipv4.tcp_tw_reuse</span> = <span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"attr\">net.ipv4.tcp_keepalive_time</span> = <span class=\"string\">15</span></span><br><span class=\"line\"><span class=\"attr\">net.ipv4.tcp_fin_timeout</span> = <span class=\"string\">15</span></span><br><span class=\"line\"><span class=\"attr\">net.ipv4.tcp_max_tw_buckets</span> = <span class=\"string\">5000</span></span><br><span class=\"line\"><span class=\"attr\">net.core.netdev_max_backlog</span> = <span class=\"string\">262144</span></span><br><span class=\"line\"><span class=\"attr\">net.ipv4.tcp_max_orphans</span> = <span class=\"string\">262144</span></span><br><span class=\"line\"><span class=\"attr\">net.ipv4.tcp_tw_reuse</span> = <span class=\"string\">1</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>使配置生效</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sysctl -p</span><br></pre></td></tr></table></figure>\n\n<p>参数说明：</p>\n<ul>\n<li><p>fs.file-max：999999</p>\n<blockquote>\n<p>这个参数表示进程（比如一个worker进程）可以同时打开的最大句柄数，这 个参数直接限制最大并发连接数，需根据实际情况配置。</p>\n</blockquote>\n</li>\n<li><p>net.ipv4.tcp_tw_reuse：</p>\n<blockquote>\n<p>这个参数设置为1，表示允许将TIME-WAIT状态的socket重新用于新的 TCP连接，这对于服务器来说很有意义，因为服务器上总会有大量TIME-WAIT状态的连接。</p>\n</blockquote>\n</li>\n<li><p>net.ipv4.tcp_keepalive_time：</p>\n<blockquote>\n<p>这个参数表示当keepalive启用时，TCP发送keepalive消息的频度。 默认是2小时，若将其设置得小一些，可以更快地清理无效的连接。</p>\n</blockquote>\n</li>\n<li><p>net.ipv4.tcp_fin_timeout：</p>\n<blockquote>\n<p>这个参数表示当服务器主动关闭连接时，socket保持在FIN-WAIT-2状态的最大时间。</p>\n</blockquote>\n</li>\n<li><p>net.ipv4.tcp_max_tw_buckets：</p>\n<blockquote>\n<p>这个参数表示操作系统允许TIME_WAIT套接字数量的最大值， 如果超过这个数字，TIME_WAIT套接字将立刻被清除并打印警告信息。该参数默认为 180000，过多的TIME_WAIT套接字会使Web服务器变慢。</p>\n</blockquote>\n</li>\n<li><p>net.core.netdev_max_backlog &#x3D; 262144</p>\n<blockquote>\n<p>每个网络接口接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包的最大数目。</p>\n</blockquote>\n</li>\n<li><p>net.ipv4.tcp_max_orphans &#x3D; 262144</p>\n<blockquote>\n<p>系统中最多有多少个TCP套接字不被关联到任何一个用户文件句柄上。如果超过这个数字，孤儿连接将即刻被复位并打印出警告信息。这个限制仅仅是为了防止简单的DoS攻击，不能过分依靠它或者人为地减小这个值，更应该增加这个值(如果增加了内存之后)。</p>\n</blockquote>\n</li>\n<li><p>net.ipv4.tcp_tw_reuse &#x3D; 1</p>\n<blockquote>\n<p>表示开启重用。允许将TIME-WAIT sockets重新用于新的TCP连接，默认为0，表示关闭</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"Nginx-配置方面\"><a href=\"#Nginx-配置方面\" class=\"headerlink\" title=\"Nginx 配置方面\"></a>Nginx 配置方面</h4><ul>\n<li><p>worker_processes 4</p>\n<blockquote>\n<p>nginx进程数，建议按照cpu数目来指定，一般跟cpu核数相同或为它的倍数。</p>\n</blockquote>\n</li>\n<li><p>worker_cpu_affinity 00000001 00000010 00000100 00001000 ;</p>\n<blockquote>\n<p>为每个进程分配cpu，上例中将4个进程分配到4个cpu，当然可以写多个，或者将一个进程分配到多个cpu。</p>\n</blockquote>\n</li>\n<li><p>worker_rlimit_nofile</p>\n<blockquote>\n<p>这个指令是指当一个nginx进程打开的最多文件描述符数目，理论值应该是系统的最多打开文件数（ulimit -n）与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与ulimit -n的值保持一致。</p>\n</blockquote>\n</li>\n<li><p>use epoll;</p>\n<blockquote>\n<p>使用epoll的I&#x2F;O模型，用这个模型来高效处理异步事件</p>\n</blockquote>\n</li>\n<li><p>worker_connections 65535;</p>\n<blockquote>\n<p>每个进程允许的最多连接数，理论上每台nginx服务器的最大连接数为worker_processes_worker_connections。这个值太小的后果就是你的系统会报：too many open files 等错误，导致你的系统死掉。一般给到服务器后最好通过 ulimit 命令结合修改 &#x2F;etc&#x2F;security&#x2F;limits.conf（增加_ soft nofile &#x3D; * hard nofile&#x3D;）两个配置值，将其设置的更大些。</p>\n</blockquote>\n</li>\n<li><p>keepalive_timeout 30;</p>\n<blockquote>\n<p>http连接超时时间，默认是60s，功能是使客户端到服务器端的连接在设定的时间内持续有效，当出现对服务器的后继请求时，该功能避免了建立或者重新建立连接。切记这个参数也不能设置过大！否则会导致许多无效的http连接占据着nginx的连接数，终nginx崩溃！</p>\n</blockquote>\n</li>\n<li><p>client_header_buffer_size 4k;</p>\n<blockquote>\n<p>客户端请求头部的缓冲区大小，这个可以根据你的系统分页大小来设置，一般一个请求的头部大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。分页大小可以用命令getconf PAGESIZE取得。</p>\n</blockquote>\n</li>\n<li><p>open_file_cache max&#x3D;102400 inactive&#x3D;20s;</p>\n<blockquote>\n<p>这个参数将为打开文件指定缓存，默认是没有启用的，max指定缓存数量，建议和打开文件数一致，inactive是指经过多长时间文件没被请求后删除缓存。</p>\n</blockquote>\n</li>\n<li><p>open_file_cache_valid 30s;</p>\n<blockquote>\n<p>指多长时间检查一次缓存的有效信息。</p>\n</blockquote>\n</li>\n<li><p>open_file_cache_min_uses 1</p>\n<blockquote>\n<p>open_file_cache指令中的inactive参数时间内文件的最少使用次数，如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个文件在inactive时间内一次没被使用，它将被移除。</p>\n</blockquote>\n</li>\n<li><p>sendfile on;</p>\n<blockquote>\n<p>sendfile()可以在磁盘和TCP socket之间互相拷贝数据(或任意两个文件描述符)。Pre-sendfile是传送数据之前在用户空间申请数据缓冲区。之后用read()将数据从文件拷贝到这个缓冲区，write()将缓冲区数据写入网络。sendfile()是立即将数据从磁盘读到OS缓存。因为这种拷贝是在内核完成的，sendfile()要比组合read()和write()以及打开关闭丢弃缓冲更加有效(更多有关于sendfile)。</p>\n</blockquote>\n</li>\n<li><p>tcp_nopush on;</p>\n<blockquote>\n<p>告诉nginx在一个数据包里发送所有头文件，而不一个接一个的发送。就是说数据包不会马上传送出去，等到数据包最大时，一次性的传输出去，这样有助于解决网络堵塞。</p>\n</blockquote>\n</li>\n<li><p>tcp_nodelay on;</p>\n<blockquote>\n<p>告诉nginx不要缓存数据，而是一段一段的发送–当需要及时发送数据时，就应该给应用设置这个属性，这样发送一小块数据信息时就不能立即得到返回值。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"upstream-容错配置说明\"><a href=\"#upstream-容错配置说明\" class=\"headerlink\" title=\"upstream 容错配置说明\"></a>upstream 容错配置说明</h2><ol>\n<li><p>判断节点失效状态 Nginx默认判断失败节点状态以connect refuse和time out状态为准，不以HTTP错误状态进行判断失败，因为HTTP只要能返回状态说明该节点还可以正常连接，所以nginx判断其还是存活状态；除非添加了proxy_next_upstream指令设置对404、502、503、504、500和time out等错误进行转到备机处理，在next_upstream过程中，会对fails进行累加，如果备用机处理还是错误则直接返回错误信息（但404不进行记录到错误数，如果不配置错误状态也不对其进行错误状态记录），综述，nginx记录错误数量只记录timeout 、connect refuse、502、500、503、504这6种状态，timeout和connect refuse是永远被记录错误状态，而502、500、503、504只有在配置proxy_next_upstream后nginx才会记录这4种HTTP错误到fails中，当fails大于等于max_fails时，则该节点失效；</p>\n</li>\n<li><p>nginx 处理节点失效和恢复的触发条件 nginx可以通过设置max_fails（最大尝试失败次数）和fail_timeout（失效时间，在到达最大尝试失败次数后，在fail_timeout的时间范围内节点被置为失效，除非所有节点都失效，否则该时间内，节点不进行恢复）对节点失败的尝试次数和失效时间进行设置，当超过最大尝试次数或失效时间未超过配置失效时间，则nginx会对节点状会置为失效状态，nginx不对该后端进行连接，<strong>直到超过失效时间或者所有节点都失效后，该节点重新置为有效，重新探测</strong>；</p>\n</li>\n<li><p>所有节点失效后nginx将重新恢复所有节点进行探测 如果探测所有节点均失效，备机也为失效时，那么nginx会对所有节点恢复为有效，重新尝试探测有效节点，如果探测到有效节点则返回正确节点内容，如果还是全部错误，那么继续探测下去，当没有正确信息时，节点失效时默认返回状态为502，但是下次访问节点时会继续探测正确节点，直到找到正确的为止。</p>\n</li>\n<li><p>通过proxy_next_upstream实现容灾和重复处理问题 ngx_http_proxy_module 模块中包括proxy_next_upstream指令 语法: proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504 http_404 off …; 默认值: proxy_next_upstream error timeout; 上下文: http, server, location</p>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">其中：</span><br><span class=\"line\">error   表示和后端服务器建立连接时，或者向后端服务器发送请求时，或者从后端服务器接收响应头时，出现错误。</span><br><span class=\"line\">timeout   表示和后端服务器建立连接时，或者向后端服务器发送请求时，或者从后端服务器接收响应头时，出现超时。</span><br><span class=\"line\">invalid_header   表示后端服务器返回空响应或者非法响应头</span><br><span class=\"line\">http_500   表示后端服务器返回的响应状态码为500</span><br><span class=\"line\">http_502   表示后端服务器返回的响应状态码为502</span><br><span class=\"line\">http_503   表示后端服务器返回的响应状态码为503</span><br><span class=\"line\">http_504   表示后端服务器返回的响应状态码为504</span><br><span class=\"line\">http_404   表示后端服务器返回的响应状态码为404</span><br><span class=\"line\">off   表示停止将请求发送给下一台后端服务器</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p><strong>常用 nginx 标准配置（仅供参考）</strong></p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">user</span>   <span class=\"string\">www www;</span></span><br><span class=\"line\"><span class=\"attr\">worker_processes</span> <span class=\"string\">8;</span></span><br><span class=\"line\"><span class=\"attr\">worker_cpu_affinity</span> <span class=\"string\">00000001 00000010 00000100 00001000 00010000 00100000 01000000;</span></span><br><span class=\"line\"><span class=\"attr\">error_log</span>   <span class=\"string\">/www/log/nginx_error.log   crit;</span></span><br><span class=\"line\"><span class=\"attr\">pid</span>         <span class=\"string\">/usr/local/nginx/nginx.pid;</span></span><br><span class=\"line\"><span class=\"attr\">worker_rlimit_nofile</span> <span class=\"string\">65535;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">events</span></span><br><span class=\"line\"><span class=\"attr\">&#123;</span></span><br><span class=\"line\">   <span class=\"attr\">use</span> <span class=\"string\">epoll;</span></span><br><span class=\"line\">   <span class=\"attr\">worker_connections</span> <span class=\"string\">65535;</span></span><br><span class=\"line\"><span class=\"attr\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">http</span></span><br><span class=\"line\"><span class=\"attr\">&#123;</span></span><br><span class=\"line\">   <span class=\"attr\">include</span>       <span class=\"string\">mime.types;</span></span><br><span class=\"line\">   <span class=\"attr\">default_type</span>   <span class=\"string\">application/octet-stream;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"attr\">charset</span>   <span class=\"string\">utf-8;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"attr\">server_names_hash_bucket_size</span> <span class=\"string\">128;</span></span><br><span class=\"line\">   <span class=\"attr\">client_header_buffer_size</span> <span class=\"string\">2k;</span></span><br><span class=\"line\">   <span class=\"attr\">large_client_header_buffers</span> <span class=\"string\">4 4k;</span></span><br><span class=\"line\">   <span class=\"attr\">client_max_body_size</span> <span class=\"string\">8m;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"attr\">sendfile</span> <span class=\"string\">on;</span></span><br><span class=\"line\">   <span class=\"attr\">tcp_nopush</span>     <span class=\"string\">on;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"attr\">keepalive_timeout</span> <span class=\"string\">60;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"attr\">fastcgi_cache_path</span> <span class=\"string\">/usr/local/nginx/fastcgi_cache levels=1:2</span></span><br><span class=\"line\">                 <span class=\"attr\">keys_zone</span>=<span class=\"string\">TEST:10m</span></span><br><span class=\"line\">                 <span class=\"attr\">inactive</span>=<span class=\"string\">5m;</span></span><br><span class=\"line\">   <span class=\"attr\">fastcgi_connect_timeout</span> <span class=\"string\">300;</span></span><br><span class=\"line\">   <span class=\"attr\">fastcgi_send_timeout</span> <span class=\"string\">300;</span></span><br><span class=\"line\">   <span class=\"attr\">fastcgi_read_timeout</span> <span class=\"string\">300;</span></span><br><span class=\"line\">   <span class=\"attr\">fastcgi_buffer_size</span> <span class=\"string\">16k;</span></span><br><span class=\"line\">   <span class=\"attr\">fastcgi_buffers</span> <span class=\"string\">16 16k;</span></span><br><span class=\"line\">   <span class=\"attr\">fastcgi_busy_buffers_size</span> <span class=\"string\">16k;</span></span><br><span class=\"line\">   <span class=\"attr\">fastcgi_temp_file_write_size</span> <span class=\"string\">16k;</span></span><br><span class=\"line\">   <span class=\"attr\">fastcgi_cache</span> <span class=\"string\">TEST;</span></span><br><span class=\"line\">   <span class=\"attr\">fastcgi_cache_valid</span> <span class=\"string\">200 302 1h;</span></span><br><span class=\"line\">   <span class=\"attr\">fastcgi_cache_valid</span> <span class=\"string\">301 1d;</span></span><br><span class=\"line\">   <span class=\"attr\">fastcgi_cache_valid</span> <span class=\"string\">any 1m;</span></span><br><span class=\"line\">   <span class=\"attr\">fastcgi_cache_min_uses</span> <span class=\"string\">1;</span></span><br><span class=\"line\">   <span class=\"attr\">fastcgi_cache_use_stale</span> <span class=\"string\">error timeout invalid_header http_500; </span></span><br><span class=\"line\">   <span class=\"attr\">open_file_cache</span> <span class=\"string\">max=204800 inactive=20s;</span></span><br><span class=\"line\">   <span class=\"attr\">open_file_cache_min_uses</span> <span class=\"string\">1;</span></span><br><span class=\"line\">   <span class=\"attr\">open_file_cache_valid</span> <span class=\"string\">30s; </span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"attr\">tcp_nodelay</span> <span class=\"string\">on;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"attr\">gzip</span> <span class=\"string\">on;</span></span><br><span class=\"line\">   <span class=\"attr\">gzip_min_length</span>   <span class=\"string\">1k;</span></span><br><span class=\"line\">   <span class=\"attr\">gzip_buffers</span>     <span class=\"string\">4 16k;</span></span><br><span class=\"line\">   <span class=\"attr\">gzip_http_version</span> <span class=\"string\">1.0;</span></span><br><span class=\"line\">   <span class=\"attr\">gzip_comp_level</span> <span class=\"string\">2;</span></span><br><span class=\"line\">   <span class=\"attr\">gzip_types</span>       <span class=\"string\">text/plain application/x-javascript text/css application/xml;</span></span><br><span class=\"line\">   <span class=\"attr\">gzip_vary</span> <span class=\"string\">on;</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"attr\">upstream</span>  <span class=\"string\">test &#123;</span></span><br><span class=\"line\">        <span class=\"attr\">server</span> <span class=\"string\">192.168.5.34:9083 max_fails=3  fail_timeout=5s;</span></span><br><span class=\"line\">        <span class=\"attr\">server</span> <span class=\"string\">192.168.5.35:9083 max_fails=3  fail_timeout=5s;</span></span><br><span class=\"line\">        <span class=\"attr\">server</span> <span class=\"string\">192.168.5.36:9083 max_fails=3  fail_timeout=5s;</span></span><br><span class=\"line\">    <span class=\"attr\">&#125;</span></span><br><span class=\"line\">   <span class=\"attr\">server</span></span><br><span class=\"line\">   <span class=\"attr\">&#123;</span></span><br><span class=\"line\">     <span class=\"attr\">listen</span>       <span class=\"string\">80;</span></span><br><span class=\"line\">     <span class=\"attr\">server_name</span>   <span class=\"string\">www.test.com;</span></span><br><span class=\"line\">     <span class=\"attr\">index</span> <span class=\"string\">index.php index.htm;</span></span><br><span class=\"line\">     <span class=\"attr\">root</span>   <span class=\"string\">/www/html/;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"attr\">location</span> <span class=\"string\">/</span></span><br><span class=\"line\">     <span class=\"attr\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">proxy_pass</span> <span class=\"string\">http://test;</span></span><br><span class=\"line\">            <span class=\"attr\">proxy_set_header</span>   <span class=\"string\">Host    $host;</span></span><br><span class=\"line\">            <span class=\"attr\">proxy_set_header</span>   <span class=\"string\">X-Real-IP   $remote_addr;</span></span><br><span class=\"line\">            <span class=\"attr\">proxy_set_header</span>   <span class=\"string\">X-Forwarded-For $proxy_add_x_forwarded_for;</span></span><br><span class=\"line\">     <span class=\"attr\">&#125;</span></span><br><span class=\"line\">     <span class=\"attr\">location</span> <span class=\"string\">/status</span></span><br><span class=\"line\">     <span class=\"attr\">&#123;</span></span><br><span class=\"line\">         <span class=\"attr\">stub_status</span> <span class=\"string\">on;</span></span><br><span class=\"line\">     <span class=\"attr\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"attr\">location</span> <span class=\"string\">~ .*\\.(phpphp5)?$</span></span><br><span class=\"line\">     <span class=\"attr\">&#123;</span></span><br><span class=\"line\">         <span class=\"attr\">fastcgi_pass</span> <span class=\"string\">127.0.0.1:9000;</span></span><br><span class=\"line\">         <span class=\"attr\">fastcgi_index</span> <span class=\"string\">index.php;</span></span><br><span class=\"line\">         <span class=\"attr\">include</span> <span class=\"string\">fcgi.conf;</span></span><br><span class=\"line\">     <span class=\"attr\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"attr\">location</span> <span class=\"string\">~ .*\\.(gifjpgjpegpngbmpswfjscss)$</span></span><br><span class=\"line\">     <span class=\"attr\">&#123;</span></span><br><span class=\"line\">       <span class=\"attr\">expires</span>       <span class=\"string\">30d;</span></span><br><span class=\"line\">     <span class=\"attr\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"attr\">log_format</span>   <span class=\"string\">access   &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class=\"line\">               <span class=\"attr\">&#x27;$status</span> <span class=\"string\">$body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class=\"line\">               <span class=\"attr\">&#x27;&quot;$http_user_agent&quot;</span> <span class=\"string\">$http_x_forwarded_for&#x27;;</span></span><br><span class=\"line\">     <span class=\"attr\">access_log</span>   <span class=\"string\">/www/log/access.log   access;</span></span><br><span class=\"line\">       <span class=\"attr\">&#125;</span></span><br><span class=\"line\"><span class=\"attr\">&#125;</span></span><br></pre></td></tr></table></figure>","categories":["skills"],"tags":["运维","记录","nginx"]},{"title":"记一次生产环境灰度发布调整","url":"/2020/08/17/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E7%81%B0%E5%BA%A6%E5%8F%91%E5%B8%83%E8%B0%83%E6%95%B4/","content":"<h1 id=\"灰度发布\"><a href=\"#灰度发布\" class=\"headerlink\" title=\"灰度发布\"></a>灰度发布</h1><h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>由于公司产品更新迭代快，每完成一部分新功能都要能及时上线给客户使用，但是上线过程中难免会出现一些问题，前期客户量不多的情况下影响不大，但到今年开始客户量剧增，只要服务一出现问题就会有各种投诉电话打到公司，于是从今年四月份开始准备调整服务发布流程为灰度发布，中间做了很多方案调整，一直到 7 月底才完成所有调整，特此简单记录下。</p>\n<span id=\"more\"></span>\n<h2 id=\"原有技术架构\"><a href=\"#原有技术架构\" class=\"headerlink\" title=\"原有技术架构\"></a>原有技术架构</h2><p>公司服务采用前后端分离，后端使用 Java，前端使用 nodeJs，后端为 SpringBoot 微服务架构，不同功能模块相互分离，服务发现与注册使用 zookeeper，消息队列使用 Rabbitmq，服务间调用使用 RPC 协议，缓存使用 Redis，数据库采用的是 MySQL，所有服务都是部署在阿里云上，原有拓扑图如下： <a href=\"https://i.loli.net/2020/08/17/LVrntNDk9zesEpx.jpg\"><img src=\"https://i.loli.net/2020/08/17/LVrntNDk9zesEpx.jpg\"></a> 客户端访问应用服务会先通过负载均衡，负载均衡将流量进行分配到各应用服务器，各应用服务器进行业务处理再将结果返回给客户端。</p>\n<h2 id=\"灰度发布调整\"><a href=\"#灰度发布调整\" class=\"headerlink\" title=\"灰度发布调整\"></a>灰度发布调整</h2><p>在进行灰度发布调整前，和开发进行讨论了多次，最后确认了方案如下： <a href=\"https://i.loli.net/2020/08/17/vgCrsBaRAV3ouKc.jpg\"><img src=\"https://i.loli.net/2020/08/17/vgCrsBaRAV3ouKc.jpg\"></a> 将整体服务分为两部分，命名为 A、B区域，客户端访问还是会通过负载均衡进行流量分发，但是此时负载均衡使用的是四层转发到两套 nginx 上，A、B区域连接同一个数据库和缓存，但是 zookeeper 和 Rabbitmq 为单独两套服务。</p>\n<h4 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h4><ol>\n<li>为什么使用负载均衡加 nginx 因为我们所有服务都是部署在阿里云上，阿里云上的 api 比较完善，采用负载均衡是为了作为一个开关使用，当进行发布时可以直接通过 api 将流量直接切换到对应环境而不用修改 nginx 对应配置</li>\n<li>为什么使用同一套缓存和数据库 先说数据库，如果采用两套数据库会涉及到数据同步问题，这样的工作量比较大，使用一套数据库只会涉及到增加序列化问题，这个只要增加 sql 审计即可解决。 缓存之前有讨论过使用两套，但是系统中部分功能如登陆态、认证状态都是暂存缓存中，使用两套会影响功能使用</li>\n<li>zookeeper 和 rabbitmq 使用两套 因为服务间的调用时使用 RPC 进行的，而且服务需要注册到 zookeeper 上，如果使用一个 zookeeper 就会涉及到调用时会有可能 A 区域的服务调用到 B 区域 使用两套 rabbitmq 因为 zookeeper 使用了两套，而服务进行消费消息时也是通过 zookeeper 进行调度的，因此也使用两套</li>\n</ol>\n<h2 id=\"灰度发布流程\"><a href=\"#灰度发布流程\" class=\"headerlink\" title=\"灰度发布流程\"></a>灰度发布流程</h2><ol>\n<li>通过 api 切换对应环境，只提供 A 环境给客户端进行访问</li>\n<li>升级 B 环境并进行测试</li>\n<li>通过 api 切换对应环境，只提供 B 环境给客户端进行访问</li>\n<li>升级 A 环境</li>\n<li>通过 api 切换对应环境，提供 A、B 环境同时提供服务</li>\n</ol>\n<h2 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><ol>\n<li>测试问题 由于域名只有一套，所以在测试时需要内部自建 DNS 解析以提供 公司内部测试时访问已升级的环境</li>\n<li>定时任务 由于系统定时任务时依靠 zookeeper 进行调度的，但是 zookeeper 有两套，这就会出现定时任务会重复执行两次的情况，严重影响业务如客户充值 100 元，但定时任务在入账时入了两次，导致客户账上有 200 元，这个问题是通过开发手段，修改开发配置使定时任务只连接一套 zookeeper。</li>\n<li>高并发问题 由于之前一直采用的是阿里云负载均衡进行流量分发，没有考虑过高并发问题，这次切换成 nginx 之后，很快就出现了并发量较大导致服务不肯用的情况，这里做的操作就是<a href=\"https://www.52ynn.top/index.php/2020/08/12/%e8%ae%b0%e4%b8%80%e6%ac%a1%e7%94%9f%e4%ba%a7%e7%8e%af%e5%a2%83-nginx-%e4%bc%98%e5%8c%96/\" title=\"优化 nginx 配置\">优化 nginx 配置</a></li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>这次调整断断续续做了三个月，期间也是出了很多问题，最后都逐个解决了，收获还是挺大的： 1. 做大调整时需要和开发测试进行详细的沟通 2. 要考虑到测试环境和生产环境的差异 3. 做好失败后的挽救措施准备 4. 多参考成熟的方案结合实际情况进行改善</p>\n","categories":["skills"],"tags":["运维","灰度发布"]},{"title":"监控工具 zabbix 实践","url":"/2020/08/18/%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7-zabbix-%E5%AE%9E%E8%B7%B5/","content":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>引用百度百科</p>\n<blockquote>\n<p>zabbix 是一个基于WEB界面的提供分布式系统监视以及网络监视功能的企业级的开源解决方案。 zabbix能监视各种网络参数，保证服务器系统的安全运营；并提供灵活的通知机制以让系统管理员快速定位&#x2F;解决存在的各种问题。 zabbix由2部分构成，zabbix server与可选组件zabbix agent。 zabbix server可以通过SNMP，zabbix agent，ping，端口监视等方法提供对远程服务器&#x2F;网络状态的监视，数据收集等功能，它可以运行在Linux，Solaris，HP-UX，AIX，Free BSD，Open BSD，OS X等平台上。</p>\n</blockquote>\n<span id=\"more\"></span>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>这里我用的机器是阿里云采购的 ECS，系统版本如下 <a href=\"https://i.loli.net/2020/08/18/NGFpVQa3q8Uz7T6.jpg\"><img src=\"https://i.loli.net/2020/08/18/NGFpVQa3q8Uz7T6.jpg\"></a> 使用的 zabbix 为目前最新版本，zabbix5.0，使用二进制包安装，数据库使用的位 mysql5.7。 <a href=\"https://i.loli.net/2020/08/18/c6bOi14uBNZkeaF.jpg\"><img src=\"https://i.loli.net/2020/08/18/c6bOi14uBNZkeaF.jpg\"></a></p>\n<h3 id=\"安装repository\"><a href=\"#安装repository\" class=\"headerlink\" title=\"安装repository\"></a>安装repository</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">rpm -Uvh https://repo.zabbix.com/zabbix/5.0/rhel/7/x86_64/zabbix-release-5.0-1.el7.noarch.rpm</span><br><span class=\"line\">yum clean all</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装-zabbix-server-和-agent\"><a href=\"#安装-zabbix-server-和-agent\" class=\"headerlink\" title=\"安装 zabbix server 和 agent\"></a>安装 zabbix server 和 agent</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install zabbix-server-mysql zabbix-agent</span><br></pre></td></tr></table></figure>\n\n<p>由于网络问题， yum 下载慢上述命令可能会报错 <a href=\"https://i.loli.net/2020/08/18/iFLs5SjabwREN29.jpg\"><img src=\"https://i.loli.net/2020/08/18/iFLs5SjabwREN29.jpg\"></a> 在服务器外部将 rpm 包下载好后上传至服务器进行安装 <a href=\"https://i.loli.net/2020/08/18/E2QJBzwjdR3pTaH.jpg\"><img src=\"https://i.loli.net/2020/08/18/E2QJBzwjdR3pTaH.jpg\"></a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 通过本地二进制包安装</span></span><br><span class=\"line\">yum install ./zabbix-* -y</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装-zabbix-frontend\"><a href=\"#安装-zabbix-frontend\" class=\"headerlink\" title=\"安装 zabbix frontend\"></a>安装 zabbix frontend</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 开启Red Hat Software Collections</span></span><br><span class=\"line\">yum install centos-release-scl</span><br><span class=\"line\"><span class=\"comment\"># 编辑 /etc/yum.repos.d/zabbix.repo</span></span><br><span class=\"line\">[zabbix-frontend]</span><br><span class=\"line\">...</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\"># 安装 frontend package</span></span><br><span class=\"line\">yum install zabbix-web-mysql-scl zabbix-nginx-conf-scl</span><br></pre></td></tr></table></figure>\n\n<p>这个步骤会有<code>zabbix-web-5.0.2-1.el7.noarch.rpm</code>下载失败的情况出现，这里也是服务器外部下载好上传至服务器安装。</p>\n<blockquote>\n<p>无法下载的 rpm 包链接: <a href=\"https://pan.baidu.com/s/1iZczDNB-4Sz52bUbPMowNw\">https://pan.baidu.com/s/1iZczDNB-4Sz52bUbPMowNw</a> 密码: ovr8</p>\n</blockquote>\n<h1 id=\"创建初始化数据库\"><a href=\"#创建初始化数据库\" class=\"headerlink\" title=\"创建初始化数据库\"></a>创建初始化数据库</h1><p>这里安装 mysql 服务就省略了，按照官网文档或者搜索引擎上有很多教程。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">登陆数据库</span></span><br><span class=\"line\">mysql -uroot -p</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建数据库</span></span><br><span class=\"line\">create database zabbix character set utf8 collate utf8_bin;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建用户</span></span><br><span class=\"line\"> create user zabbix@localhost identified by &#x27;password&#x27;;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">赋权</span></span><br><span class=\"line\">grant all privileges on zabbix.* to zabbix@localhost;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">退出 mysql 命令行</span></span><br><span class=\"line\">quit;</span><br></pre></td></tr></table></figure>\n\n<p>数据库创建完成后初始化数据库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">zcat /usr/share/doc/zabbix-server-mysql*/create.sql.gz  mysql -uzabbix -p zabbix</span><br></pre></td></tr></table></figure>\n\n<p>等待 1 分钟左右即可，查询数据库中部分表如下： <a href=\"https://i.loli.net/2020/08/18/bOlmG9rKe6xv24a.jpg\"><img src=\"https://i.loli.net/2020/08/18/bOlmG9rKe6xv24a.jpg\"></a></p>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><h3 id=\"为-zabbix-server-配置数据库\"><a href=\"#为-zabbix-server-配置数据库\" class=\"headerlink\" title=\"为 zabbix server 配置数据库\"></a>为 zabbix server 配置数据库</h3><p>编辑&#x2F;etc&#x2F;zabbix&#x2F;zabbix_server.conf</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># password 修改为自己设置的密码</span><br><span class=\"line\">DBPassword=password</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://i.loli.net/2020/08/18/lI5iqQu28KVeDnR.jpg\"><img src=\"https://i.loli.net/2020/08/18/lI5iqQu28KVeDnR.jpg\"></a> 如用户名、数据库名、数据库地址不一样也需要修改配置</p>\n<h3 id=\"为-zabbix-frontend-配置-PHP\"><a href=\"#为-zabbix-frontend-配置-PHP\" class=\"headerlink\" title=\"为 zabbix frontend 配置 PHP\"></a>为 zabbix frontend 配置 PHP</h3><p>编辑<code>/etc/opt/rh/rh-nginx116/nginx/conf.d/zabbix.conf</code> 将图示这两行注释去掉，server_name 改成自己的域名或者服务器 ip <a href=\"https://i.loli.net/2020/08/18/liTdkcI4JnsOePZ.jpg\"><img src=\"https://i.loli.net/2020/08/18/liTdkcI4JnsOePZ.jpg\"></a> 编辑<code>/etc/opt/rh/rh-php72/php-fpm.d/zabbix.conf</code>,在<code>listen.acl_users</code>行添加 nginx，并修改正确时区 <a href=\"https://i.loli.net/2020/08/18/BDdjoqPp28y6swZ.jpg\"><img src=\"https://i.loli.net/2020/08/18/BDdjoqPp28y6swZ.jpg\"></a></p>\n<h1 id=\"启动-server-和-agent\"><a href=\"#启动-server-和-agent\" class=\"headerlink\" title=\"启动 server 和 agent\"></a>启动 server 和 agent</h1><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动</span></span><br><span class=\"line\">systemctl restart zabbix-server zabbix-agent rh-nginx116-nginx rh-php72-php-fpm</span><br><span class=\"line\"><span class=\"comment\"># 设置开机自启</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> zabbix-server zabbix-agent rh-nginx116-nginx rh-php72-php-fpm</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"访问服务\"><a href=\"#访问服务\" class=\"headerlink\" title=\"访问服务\"></a>访问服务</h1><p>通过 ip 或者域名（前面配置的 server_name）访问 <strong>初始化页面</strong> <a href=\"https://i.loli.net/2020/08/18/jgW6yXkO4r5xnGH.jpg\"><img src=\"https://i.loli.net/2020/08/18/jgW6yXkO4r5xnGH.jpg\"></a> <strong>环境监测</strong> <a href=\"https://i.loli.net/2020/08/18/DItweYT2dk6aFKR.jpg\"><img src=\"https://i.loli.net/2020/08/18/DItweYT2dk6aFKR.jpg\"></a> <strong>数据库配置</strong> <a href=\"https://i.loli.net/2020/08/18/nGbVye1HxdTw43j.jpg\"><img src=\"https://i.loli.net/2020/08/18/nGbVye1HxdTw43j.jpg\"></a> <strong>设置服务名称</strong> <a href=\"https://i.loli.net/2020/08/18/KDoYn4ieyhTpBZ9.jpg\"><img src=\"https://i.loli.net/2020/08/18/KDoYn4ieyhTpBZ9.jpg\"></a> <strong>检查配置</strong> <a href=\"https://i.loli.net/2020/08/18/4cZsRHYfUzeNgOT.jpg\"><img src=\"https://i.loli.net/2020/08/18/4cZsRHYfUzeNgOT.jpg\"></a> <strong>安装完成</strong> <a href=\"https://i.loli.net/2020/08/18/nPtfirwkSOLZ8vU.jpg\"><img src=\"https://i.loli.net/2020/08/18/nPtfirwkSOLZ8vU.jpg\"></a> <strong>首次登陆</strong> 初始账号 <code>Admin</code>，初始密码<code>zabbix</code>（登陆之后第一时间修改密码） <a href=\"https://i.loli.net/2020/08/18/2qj7vZNUGRrhJud.jpg\"><img src=\"https://i.loli.net/2020/08/18/2qj7vZNUGRrhJud.jpg\"></a> <strong>修改语言（非必须）</strong> <a href=\"https://i.loli.net/2020/08/18/BLJubf4ly6wDdpx.jpg\"><img src=\"https://i.loli.net/2020/08/18/BLJubf4ly6wDdpx.jpg\"></a> 至此，安装已完成，下面配置一个简单的监控。</p>\n<h1 id=\"配置监控\"><a href=\"#配置监控\" class=\"headerlink\" title=\"配置监控\"></a>配置监控</h1><p>刚进入会有一个主机了，这个是 zabbix 服务器所在的主机，现在准备新建一个主机。 <a href=\"https://i.loli.net/2020/08/18/QXokuI48FRAMbZt.jpg\"><img src=\"https://i.loli.net/2020/08/18/QXokuI48FRAMbZt.jpg\"></a></p>\n<h3 id=\"在新主机上安装-agent\"><a href=\"#在新主机上安装-agent\" class=\"headerlink\" title=\"在新主机上安装 agent\"></a>在新主机上安装 agent</h3><p>下载<code>zabbix-agent-5.0.2-1.el7.x86_64.rpm</code>,上面的百度网盘的链接，上传至服务器 安装 agent</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install zabbix-agent-5.0.2-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置-agent\"><a href=\"#配置-agent\" class=\"headerlink\" title=\"配置 agent\"></a>配置 agent</h3><p>vi &#x2F;etc&#x2F;zabbix&#x2F;zabbix_agentd.conf</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">…</span><br><span class=\"line\">Server=172.16.177.24 <span class=\"comment\">#zabbix-server端IP</span></span><br><span class=\"line\">…</span><br><span class=\"line\">ServerActive=Server=172.16.177.24  <span class=\"comment\">#zabbix-server端IP</span></span><br><span class=\"line\">…</span><br><span class=\"line\">Hostname= swq_aliyun <span class=\"comment\">#主动模式IP要一致</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"web端配置\"><a href=\"#web端配置\" class=\"headerlink\" title=\"web端配置\"></a>web端配置</h3><p>添加主机 <a href=\"https://i.loli.net/2020/08/18/nM3hbDLywFpoG2j.jpg\"><img src=\"https://i.loli.net/2020/08/18/nM3hbDLywFpoG2j.jpg\"></a> 添加配置模板 <a href=\"https://i.loli.net/2020/08/18/qHbpKRF3y6IQovW.jpg\"><img src=\"https://i.loli.net/2020/08/18/qHbpKRF3y6IQovW.jpg\"></a> <a href=\"https://i.loli.net/2020/08/18/HQsyhobVgJUTrOW.jpg\"><img src=\"https://i.loli.net/2020/08/18/HQsyhobVgJUTrOW.jpg\"></a> 添加成功后即可看到数据 <a href=\"https://i.loli.net/2020/08/18/FKzCinHRm75I1qs.jpg\"><img src=\"https://i.loli.net/2020/08/18/FKzCinHRm75I1qs.jpg\"></a> <a href=\"https://i.loli.net/2020/08/18/sBThqApaG3x12DI.jpg\"><img src=\"https://i.loli.net/2020/08/18/sBThqApaG3x12DI.jpg\"></a> 表格字体乱码可在服务器上安装黑体即可解决。 至此，zabbix 安装及简单配置已完成，zabbix 功能很强大，更多的配置需要自己去摸索。</p>\n","categories":["skills"],"tags":["运维","zabbix","监控"]},{"title":"英语流利说面试记录","url":"/2020/08/26/%E8%8B%B1%E8%AF%AD%E6%B5%81%E5%88%A9%E8%AF%B4%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95/","content":"<h1 id=\"流利说\"><a href=\"#流利说\" class=\"headerlink\" title=\"流利说\"></a>流利说</h1><p>岗位：运维工程师 渠道：BOSS 直聘</p>\n<h1 id=\"第一轮电话面试（20min）\"><a href=\"#第一轮电话面试（20min）\" class=\"headerlink\" title=\"第一轮电话面试（20min）\"></a>第一轮电话面试（20min）</h1><p>问了一些现在的工作内容，为什么换工作这些问题</p>\n<span id=\"more\"></span>\n<h1 id=\"第二轮现场技术面试（20min）\"><a href=\"#第二轮现场技术面试（20min）\" class=\"headerlink\" title=\"第二轮现场技术面试（20min）\"></a>第二轮现场技术面试（20min）</h1><ol>\n<li>说说目前工作职责</li>\n<li>说一下灰度发布（简历上有写这个）的思路和步骤</li>\n<li>数据库有做过哪些备份策略</li>\n<li>怎么理解运维的岗位</li>\n<li>监控是怎么做的，zabbix 和阿里云的机器监控各有什么优缺点</li>\n<li>怎么做的持续集成、持续测试和持续发布</li>\n<li>如果有一个服务变更让你做，你有什么思路</li>\n<li>为什么换工作</li>\n<li>期望薪资，以及有什么想问的（我问了岗位职责、团队规模）</li>\n</ol>\n<h1 id=\"第三轮-HRBP-电话面试（30min）\"><a href=\"#第三轮-HRBP-电话面试（30min）\" class=\"headerlink\" title=\"第三轮 HRBP 电话面试（30min）\"></a>第三轮 HRBP 电话面试（30min）</h1><p>问了很多，记不大清了，大概记录了一些 1. 目前岗位职责 2. 换工作原因 3. 目前薪资期望薪资 4. 现在手里还有没有 offer，会怎么做选择 5. 对自己面试的岗位工作内容了不了解 6. 对自己以后的职业规划</p>\n<h1 id=\"第四轮确定薪资（20min）\"><a href=\"#第四轮确定薪资（20min）\" class=\"headerlink\" title=\"第四轮确定薪资（20min）\"></a>第四轮确定薪资（20min）</h1><ol>\n<li>详细询问了目前薪资构成，包括绩效年终奖等</li>\n<li>详细介绍了目前流利说的工资组成，五险一金缴纳情况</li>\n<li>说了下前几轮面试官对我的评价</li>\n<li>最后问了下自己期望薪资（我期望是目前薪资涨幅 20%） 问完之后加了 hr 微信，说第二天他们内部定薪之后给我打电话</li>\n</ol>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p>中午接到电话，给了我期望薪资</p>\n<h1 id=\"感受\"><a href=\"#感受\" class=\"headerlink\" title=\"感受\"></a>感受</h1><p>整体来说，流利说的整个面试流程效率很高，周一上午参加面试，周三中午就确定了。整体感受是为数不多的几次面试中较好的，技术面试官和 hr 都比较不错。 现在确定选择流利说了，一方面是薪资、另外一方面是互联网工作环境确实不错。还有一点担忧是，现在流利说一直在亏损，希望不是 49 年入国军，哈哈。 现在就等 offer 下来提离职了。</p>\n","categories":["Essay"],"tags":["面试","记录"]},{"title":"流利说工作一周体验","url":"/2020/09/15/%E6%B5%81%E5%88%A9%E8%AF%B4%E5%B7%A5%E4%BD%9C%E4%B8%80%E5%91%A8%E4%BD%93%E9%AA%8C/","content":"<h1 id=\"入职\"><a href=\"#入职\" class=\"headerlink\" title=\"入职\"></a>入职</h1><p>入职当天，根据offer邮件早上找到入职等待的区域，各个流程都是在手机上操作，入职信息填报&#x2F;门禁人脸上传&#x2F;合同签署&#x2F;账户开通，一切手续办完后领了一台mbp13作为工作电脑，等待几分钟部门leader就来带领我去工位。</p>\n<span id=\"more\"></span>\n<h1 id=\"工作一周体验\"><a href=\"#工作一周体验\" class=\"headerlink\" title=\"工作一周体验\"></a>工作一周体验</h1><p>一周整体来说事情比较少的，基本上看了一周文档，了解公司大概架构，昨天leader给我讲了下公司技术架构，公司氛围也蛮好的，用到的技术比上家公司完善很多，目前基本上流利说的体系比较完善来，以后看有做调整的时候看能不能接触点东西。整体感觉，技术氛围比较浓厚，用到的运维工具也很多，能学到的东西很多。 # 其他 找了一周的房子，还是比较累的，本来租了个自如的房子，住了一晚上太吵了给退了，亏了一千多😂，老婆重新找了个合租的，又便宜空间又大，以后省钱还是得看老婆</p>\n","categories":["Essay"],"tags":["个人","记录"]},{"title":"【Python3WebSpider04】selenium使用","url":"/2020/09/18/%E3%80%90python3webspider04%E3%80%91selenium%E4%BD%BF%E7%94%A8/","content":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>Selenium是一个自动化测试工具，利用它可以驱动浏览器执行特定的动作，如点击、下拉等操作，同时还可以获取浏览器当前呈现的页面的源代码，做到可见即可爬。</p>\n<span id=\"more\"></span>\n<h1 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h1><p>本文将以Chrome为例来讲解Selenium的使用，在使用之前需要先安装Chrome浏览器并配置好了ChromeDriver。并且需要正确安装好Python的Selenium库。</p>\n<h1 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h1><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.common.by <span class=\"keyword\">import</span> By</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.common.keys <span class=\"keyword\">import</span> Keys</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.support <span class=\"keyword\">import</span> expected_conditions <span class=\"keyword\">as</span> EC</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.support.wait <span class=\"keyword\">import</span> WebDriverWait</span><br><span class=\"line\"></span><br><span class=\"line\">browser = webdriver.Chrome()</span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    browser.get(<span class=\"string\">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">input</span> = browser.find_element_by_id(<span class=\"string\">&#x27;kw&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">input</span>.send_keys(<span class=\"string\">&#x27;Python&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">input</span>.send_keys(Keys.ENTER)</span><br><span class=\"line\">    wait = WebDriverWait(browser, <span class=\"number\">10</span>)</span><br><span class=\"line\">    wait.until(EC.presence_of_element_located((By.ID, <span class=\"string\">&#x27;content_left&#x27;</span>)))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(browser.current_url)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(browser.get_cookies())</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(browser.page_source)</span><br><span class=\"line\"><span class=\"keyword\">finally</span>:</span><br><span class=\"line\">    browser.close()</span><br></pre></td></tr></table></figure>\n\n<p>运行该代码之后，会自动弹出一个Chrome浏览器，浏览器首先会跳转到百度，然后在搜索框中输入Python，接着跳转到搜索结果页。 <a href=\"https://i.loli.net/2020/09/18/OlXhWfrm3ZaSL8q.jpg\"><img src=\"https://i.loli.net/2020/09/18/OlXhWfrm3ZaSL8q.jpg\"></a> 控制台会打印出当前的URL、当前的Cookies和网页源代码</p>\n<h1 id=\"详细讲解\"><a href=\"#详细讲解\" class=\"headerlink\" title=\"详细讲解\"></a>详细讲解</h1><h2 id=\"声明浏览器对象\"><a href=\"#声明浏览器对象\" class=\"headerlink\" title=\"声明浏览器对象\"></a>声明浏览器对象</h2><p>Selenium支持非常多的浏览器，如Chrome、Firefox、Edge等，还有Android、BlackBerry等手机端的浏览器。另外，也支持无界面浏览器PhantomJS 我们可以用如下方式初始化：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\"></span><br><span class=\"line\">browser = webdriver.Chrome()</span><br><span class=\"line\">browser = webdriver.Firefox()</span><br><span class=\"line\">browser = webdriver.Edge()</span><br><span class=\"line\">browser = webdriver.PhantomJS()</span><br><span class=\"line\">browser = webdriver.Safari()</span><br></pre></td></tr></table></figure>\n\n<p>这样就完成了浏览器对象的初始化并将其赋值为browser对象。接下来，我们要做的就是调用browser对象，让其执行各个动作以模拟浏览器操作。</p>\n<h2 id=\"访问页面\"><a href=\"#访问页面\" class=\"headerlink\" title=\"访问页面\"></a>访问页面</h2><p>可以使用<code>get()</code>方法来请求页面，参数传入要访问的链接即可。比如用<code>get()</code>方法来访问<code>Google</code>,然后打印出页面源代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\">browser = webdriver.Chrome()</span><br><span class=\"line\">browser.get(<span class=\"string\">&quot;https://www.google.com&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(browser.page_source)</span><br><span class=\"line\">browser.close()</span><br></pre></td></tr></table></figure>\n\n<p>运行之后，会打开一个Chrome页面并且自动访问Google，然后控制台输出Google首页源代码。</p>\n<h2 id=\"查找节点\"><a href=\"#查找节点\" class=\"headerlink\" title=\"查找节点\"></a>查找节点</h2><p>Selenium可以驱动浏览器完成各种操作，比如填充表单、模拟点击等。比如，我们想要完成向某个输入框输入文字的操作，总需要知道这个输入框在哪里吧？而Selenium提供了一系列查找节点的方法，我们可以用这些方法来获取想要的节点，以便下一步执行一些动作或者提取信息</p>\n<h4 id=\"单个节点\"><a href=\"#单个节点\" class=\"headerlink\" title=\"单个节点\"></a>单个节点</h4><p>比如想要从Google首页提取搜索框这个节点，首先要观察它的源代码。 <a href=\"https://i.loli.net/2020/09/18/NysA6f8Jt15EMiC.jpg\"><img src=\"https://i.loli.net/2020/09/18/NysA6f8Jt15EMiC.jpg\"></a> 可以发现，它的name是<code>q</code>。此外，还有许多其他属性，此时我们就可以用多种方式获取它了。比如，<code>find_element_by_name()</code>是根据name值获取，<code>find_element_by_id()</code>是根据id获取。另外，还有根据XPath、CSS选择器等获取的方式。 用代码实现一下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\">browser = webdriver.Chrome()</span><br><span class=\"line\">browser.get(<span class=\"string\">&quot;https://www.google.com&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">input</span> = browser.find_element_by_name(<span class=\"string\">&#x27;q&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">input</span>)</span><br><span class=\"line\">browser.close()</span><br></pre></td></tr></table></figure>\n\n<p>打印出结果为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;5f9629a45a89e0879c203f1bb568be19&quot;, element=&quot;470af759-e2bc-4346-bbc4-e54b1655d106&quot;)&gt;</span><br></pre></td></tr></table></figure>\n\n<p>下面列出所有获取单个节点 方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">find_element_by_id</span><br><span class=\"line\">find_element_by_name</span><br><span class=\"line\">find_element_by_xpath</span><br><span class=\"line\">find_element_by_link_text</span><br><span class=\"line\">find_element_by_partial_link_text</span><br><span class=\"line\">find_element_by_tag_name</span><br><span class=\"line\">find_element_by_class_name</span><br><span class=\"line\">find_element_by_css_selector</span><br></pre></td></tr></table></figure>\n\n<p>另外，selenium还提供了一个通用方法：<code>find_element()</code>,<code>find_element_by_id(id)</code>就等价于<code>find_element(By.ID, id)</code>，二者得到的结果完全一致。</p>\n<h4 id=\"多个节点\"><a href=\"#多个节点\" class=\"headerlink\" title=\"多个节点\"></a>多个节点</h4><p>如果查找的目标在网页中只有一个，那么完全可以用<code>find_element()</code>方法。但如果有多个节点，再用<code>find_element()</code>方法查找，就只能得到第一个节点了。如果要查找所有满足条件的节点，需要用<code>find_elements()</code>这样的方法。注意，在这个方法的名称中，element多了一个s，注意区分。 比如，查找京东左侧导航栏所有条目： <a href=\"https://i.loli.net/2020/09/18/EvJyupHZXthdFUl.jpg\"><img src=\"https://i.loli.net/2020/09/18/EvJyupHZXthdFUl.jpg\"></a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\">browser = webdriver.Chrome()</span><br><span class=\"line\">browser.get(<span class=\"string\">&quot;https://www.jd.com&quot;</span>)</span><br><span class=\"line\">lis = browser.find_elements_by_class_name(<span class=\"string\">&#x27;cate_menu_lk&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(lis)</span><br><span class=\"line\">browser.close()</span><br></pre></td></tr></table></figure>\n\n<p>运结果如下： <a href=\"https://i.loli.net/2020/09/18/jX7Z86IvSiQrpos.jpg\"><img src=\"https://i.loli.net/2020/09/18/jX7Z86IvSiQrpos.jpg\"></a> 其他获取多个节点的方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">find_elements_by_id</span><br><span class=\"line\">find_elements_by_name</span><br><span class=\"line\">find_elements_by_xpath</span><br><span class=\"line\">find_elements_by_link_text</span><br><span class=\"line\">find_elements_by_partial_link_text</span><br><span class=\"line\">find_elements_by_tag_name</span><br><span class=\"line\">find_elements_by_class_name</span><br><span class=\"line\">find_elements_by_css_selector</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"节点交互\"><a href=\"#节点交互\" class=\"headerlink\" title=\"节点交互\"></a>节点交互</h4><p>Selenium可以驱动浏览器来执行一些操作，也就是说可以让浏览器模拟执行一些动作。比较常见的用法有：输入文字时用send_keys()方法，清空文字时用clear()方法，点击按钮时用click()方法。示例如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.common.keys <span class=\"keyword\">import</span> Keys</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\">browser = webdriver.Chrome()</span><br><span class=\"line\">browser.get(<span class=\"string\">&quot;https://www.google.com&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">input</span> = browser.find_element_by_name(<span class=\"string\">&#x27;q&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">input</span>.send_keys(<span class=\"string\">&quot;Python 爬虫&quot;</span>)</span><br><span class=\"line\">time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">input</span>.clear()</span><br><span class=\"line\"><span class=\"built_in\">input</span>.send_keys(<span class=\"string\">&quot;Selenium 自动化&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">input</span>.send_keys(Keys.ENTER)</span><br><span class=\"line\">browser.close()</span><br></pre></td></tr></table></figure>\n\n<p>运行如下 <img src=\"https://i.loli.net/2020/09/18/VXq974pitzAYmRP.gif\" alt=\"2020-09-18 15.11.36.gif\"> 这里首先驱动浏览器打开google，然后用find_element_by_name()方法获取输入框，然后用send_keys()方法输入”Python 爬虫”文字，等待一秒后用clear()方法清空输入框，再次调用send_keys()方法输入”Selenium 自动化”文字，之后回车进行搜索</p>\n<h4 id=\"动作链\"><a href=\"#动作链\" class=\"headerlink\" title=\"动作链\"></a>动作链</h4><p>上面几个例子，一些交互动作都是基于某个节点执行的，比如对于输入框，我们就调用它的输入文字和清空文字方法；对于按钮，就调用它的点击方法。其实，还有另外一些操作，它们没有特定的执行对象，比如鼠标拖曳、键盘按键等，这些动作用另一种方式来执行，那就是动作链。 比如，现在实现一个节点的拖曳操作，将某个节点从一处拖曳到另外一处，可以这样实现：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver <span class=\"keyword\">import</span> ActionChains</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\">browser = webdriver.Chrome()</span><br><span class=\"line\">url = <span class=\"string\">&#x27;http://www.runoob.com/try/try.php?filename=jqueryui-api-droppable&#x27;</span> </span><br><span class=\"line\">browser.get(url)</span><br><span class=\"line\">browser.switch_to.frame(<span class=\"string\">&#x27;iframeResult&#x27;</span>)</span><br><span class=\"line\">source = browser.find_element_by_css_selector(<span class=\"string\">&#x27;#draggable&#x27;</span>)</span><br><span class=\"line\">target = browser.find_element_by_css_selector(<span class=\"string\">&#x27;#droppable&#x27;</span>)</span><br><span class=\"line\">actions = ActionChains(browser)</span><br><span class=\"line\">actions.drag_and_drop(source, target)</span><br><span class=\"line\">actions.perform()</span><br><span class=\"line\">browser.close()</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.loli.net/2020/09/18/SeVs3HTJG4NLW52.gif\" alt=\"2020-09-18 15.25.22.gif\"> 首先，打开网页中的一个拖曳实例，然后依次选中要拖曳的节点和拖曳到的目标节点，接着声明ActionChains对象并将其赋值为actions变量，然后通过调用actions变量的drag_and_drop()方法，再调用perform()方法执行动作，此时就完成了拖曳操作</p>\n<h4 id=\"获取节点信息\"><a href=\"#获取节点信息\" class=\"headerlink\" title=\"获取节点信息\"></a>获取节点信息</h4><p>前面说过，通过page_source属性可以获取网页的源代码，接着就可以使用解析库（如正则表达式、Beautiful Soup、pyquery等）来提取信息了。 不过，既然Selenium已经提供了选择节点的方法，返回的是WebElement类型，那么它也有相关的方法和属性来直接提取节点信息，如属性、文本等。这样的话，我们就可以不用通过解析源代码来提取信息了，非常方便 <strong>获取属性</strong> 我们可以使用get_attribute()方法来获取节点的属性，但是其前提是先选中这个节点，示例如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver <span class=\"keyword\">import</span> ActionChains</span><br><span class=\"line\"></span><br><span class=\"line\">browser = webdriver.Chrome()</span><br><span class=\"line\">url = <span class=\"string\">&#x27;https://www.zhihu.com/explore&#x27;</span></span><br><span class=\"line\">browser.get(url)</span><br><span class=\"line\">logo = browser.find_element_by_id(<span class=\"string\">&#x27;zh-top-link-logo&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(logo)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(logo.get_attribute(<span class=\"string\">&#x27;class&#x27;</span>))</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.loli.net/2020/09/18/zrcwMSXdCWTEiYk.gif\" alt=\"2020-09-18 15.39.45.gif\"> <strong>获取文本值</strong> 每个WebElement节点都有text属性，直接调用这个属性就可以得到节点内部的文本信息，这相当于Beautiful Soup的get_text()方法、pyquery的text()方法，示例如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\"></span><br><span class=\"line\">browser = webdriver.Chrome()</span><br><span class=\"line\">url = <span class=\"string\">&#x27;https://www.zhihu.com/explore&#x27;</span></span><br><span class=\"line\">browser.get(url)</span><br><span class=\"line\"><span class=\"built_in\">input</span> = browser.find_element_by_class_name(<span class=\"string\">&#x27;ExploreHomePage-specialsLoginDes&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">input</span>.text)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"前进和后退\"><a href=\"#前进和后退\" class=\"headerlink\" title=\"前进和后退\"></a>前进和后退</h4><p>平常使用浏览器时都有前进和后退功能，Selenium也可以完成这个操作，它使用back()方法后退，使用forward()方法前进。示例如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\"></span><br><span class=\"line\">browser = webdriver.Chrome()</span><br><span class=\"line\">browser.get(<span class=\"string\">&#x27;https://www.baidu.com/&#x27;</span>)</span><br><span class=\"line\">browser.get(<span class=\"string\">&#x27;https://www.taobao.com/&#x27;</span>)</span><br><span class=\"line\">browser.get(<span class=\"string\">&#x27;https://www.python.org/&#x27;</span>)</span><br><span class=\"line\">browser.back()</span><br><span class=\"line\">time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">browser.forward()</span><br><span class=\"line\">browser.close()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"cookies\"><a href=\"#cookies\" class=\"headerlink\" title=\"cookies\"></a>cookies</h4><p>使用Selenium，还可以方便地对Cookies进行操作，例如获取、添加、删除Cookies等。示例如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\"></span><br><span class=\"line\">browser = webdriver.Chrome()</span><br><span class=\"line\">browser.get(<span class=\"string\">&#x27;https://www.zhihu.com/explore&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(browser.get_cookies())</span><br><span class=\"line\">browser.add_cookie(&#123;<span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;domain&#x27;</span>: <span class=\"string\">&#x27;www.zhihu.com&#x27;</span>, <span class=\"string\">&#x27;value&#x27;</span>: <span class=\"string\">&#x27;germey&#x27;</span>&#125;)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(browser.get_cookies())</span><br><span class=\"line\">browser.delete_all_cookies()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(browser.get_cookies())</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"选项卡管理\"><a href=\"#选项卡管理\" class=\"headerlink\" title=\"选项卡管理\"></a>选项卡管理</h4><p>在访问网页的时候，会开启一个个选项卡。在Selenium中，我们也可以对选项卡进行操作。示例如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\"></span><br><span class=\"line\">browser = webdriver.Chrome()</span><br><span class=\"line\">browser.get(<span class=\"string\">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class=\"line\">browser.execute_script(<span class=\"string\">&#x27;window.open()&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(browser.window_handles)</span><br><span class=\"line\">browser.switch_to_window(browser.window_handles[<span class=\"number\">1</span>])</span><br><span class=\"line\">browser.get(<span class=\"string\">&#x27;https://www.taobao.com&#x27;</span>)</span><br><span class=\"line\">time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">browser.switch_to_window(browser.window_handles[<span class=\"number\">0</span>])</span><br><span class=\"line\">browser.get(<span class=\"string\">&#x27;https://python.org&#x27;</span>)</span><br></pre></td></tr></table></figure>","categories":["skills"],"tags":["Python","爬虫"]},{"title":"本地复现公司监控架构","url":"/2020/10/13/%E6%9C%AC%E5%9C%B0%E5%A4%8D%E7%8E%B0%E5%85%AC%E5%8F%B8%E7%9B%91%E6%8E%A7%E6%9E%B6%E6%9E%84/","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>由于本人对监控不是很了解，知其然不知其所以然，现在时间也比较充裕，所以萌生了自己本地模拟公司的架构搭建一套监控体系以补充这方面的不足。</p>\n<span id=\"more\"></span>\n<h1 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h1><p>目前公司的监控体系还是很完善的，我计划搭建一个简易的监控体系： 数据展示：grafana 数据源：zabbix、prometheus等 机器准备：</p>\n<p>名称</p>\n<p>ip</p>\n<p>配置</p>\n<p>用途</p>\n<p>数据库</p>\n<p>172.26.182.151</p>\n<p>1 vCPU 1 GiB</p>\n<p>安装数据库使用</p>\n<p>数据源</p>\n<p>172.26.182.152</p>\n<p>2 vCPU 4 GiB</p>\n<p>数据源服务器,安装zabbix&#x2F;promethues等</p>\n<p>展示</p>\n<p>172.26.182.153</p>\n<p>1 vCPU 2 GiB</p>\n<p>安装NGINX及grafana</p>\n<p><a href=\"https://i.loli.net/2020/10/13/aPdSzY4RqAGiFbp.jpg\"><img src=\"https://i.loli.net/2020/10/13/aPdSzY4RqAGiFbp.jpg\"></a></p>\n<h1 id=\"安装部署\"><a href=\"#安装部署\" class=\"headerlink\" title=\"安装部署\"></a>安装部署</h1><h2 id=\"安装zabbix\"><a href=\"#安装zabbix\" class=\"headerlink\" title=\"安装zabbix\"></a>安装zabbix</h2><p>zabbix安装之前有写过文档：<a href=\"https://www.52ynn.top/index.php/2020/08/18/%e7%9b%91%e6%8e%a7%e5%b7%a5%e5%85%b7-zabbix-%e5%ae%9e%e8%b7%b5/\" title=\"zabbix 安装\">zabbix 安装</a> 安装好后配置了三台主机 <a href=\"https://i.loli.net/2020/10/13/XqR2lzNYvEPOLo4.jpg\"><img src=\"https://i.loli.net/2020/10/13/XqR2lzNYvEPOLo4.jpg\"></a></p>\n<h2 id=\"安装prometheus\"><a href=\"#安装prometheus\" class=\"headerlink\" title=\"安装prometheus\"></a>安装prometheus</h2><p>下载安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载</span></span><br><span class=\"line\">wget https://github.com/prometheus/prometheus/releases/download/v2.22.0-rc.0/prometheus-2.22.0-rc.0.linux-amd64.tar.gz</span><br><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\">tar -zxvf prometheus-2.22.0-rc.0.linux-amd64.tar.gz</span><br><span class=\"line\"><span class=\"comment\"># 移动解压好的文件到安装目录</span></span><br><span class=\"line\"><span class=\"built_in\">mv</span> prometheus-2.22.0-rc.0.linux-amd64 /usr/local/prometheus</span><br><span class=\"line\"><span class=\"comment\"># 启动服务</span></span><br><span class=\"line\">/usr/local/prometheus/prometheus --config.file=<span class=\"string\">&quot;/usr/local/prometheus/prometheus.yml&quot;</span> &amp;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装grafana\"><a href=\"#安装grafana\" class=\"headerlink\" title=\"安装grafana\"></a>安装grafana</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget https://dl.grafana.com/oss/release/grafana-7.2.1-1.x86_64.rpm</span><br><span class=\"line\">sudo yum install grafana-7.2.1-1.x86_64.rpm</span><br><span class=\"line\"><span class=\"comment\"># 启动并设置开机自启</span></span><br><span class=\"line\">systemctl start grafana-server </span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> grafana-server </span><br></pre></td></tr></table></figure>\n\n<p>安装nginx</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install nginx </span><br><span class=\"line\"><span class=\"comment\"># 配置grafana域名</span></span><br><span class=\"line\">vim /etc/nginx/conf.d/grafana.conf</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name grafana.52ynn.top;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://127.0.0.1:3000;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>设置好域名解析访问grafana.52ynn.top： <a href=\"https://i.loli.net/2020/10/13/mClSX5PaOK2ixFo.jpg\"><img src=\"https://i.loli.net/2020/10/13/mClSX5PaOK2ixFo.jpg\"></a> 使用默认账号admin默认密码admin登录即可 <a href=\"https://i.loli.net/2020/10/13/IR8eASU7JQX2jWM.jpg\"><img src=\"https://i.loli.net/2020/10/13/IR8eASU7JQX2jWM.jpg\"></a></p>\n<h1 id=\"配置数据源\"><a href=\"#配置数据源\" class=\"headerlink\" title=\"配置数据源\"></a>配置数据源</h1><h2 id=\"添加promethues\"><a href=\"#添加promethues\" class=\"headerlink\" title=\"添加promethues\"></a>添加promethues</h2><p><a href=\"https://i.loli.net/2020/10/13/REGWioszmt7q8ZX.jpg\"><img src=\"https://i.loli.net/2020/10/13/REGWioszmt7q8ZX.jpg\"></a></p>\n","categories":["skills"],"tags":["运维","监控"]},{"title":"elk搭建实践","url":"/2020/11/05/elk%E6%90%AD%E5%BB%BA%E5%AE%9E%E8%B7%B5/","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>新公司生产环境 ELK 突然丢失了几天的日志，因为不是很了解 ELK 具体的架构所以花了很长时间才排查出问题，所以准备花点时间自己部署一套系统以便了解 elk 详细点。</p>\n<span id=\"more\"></span>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>ELK是三个开源软件的缩写，分别表示：Elasticsearch , Logstash, Kibana , 它们都是开源软件。新增了一个FileBeat，它是一个轻量级的日志收集处理工具(Agent)，Filebeat占用资源少，适合于在各个服务器上搜集日志后传输给Logstash，官方也推荐此工具。 Elasticsearch是个开源分布式搜索引擎，提供搜集、分析、存储数据三大功能。它的特点有：分布式，零配置，自动发现，索引自动分片，索引副本机制，restful风格接口，多数据源，自动搜索负载等。 Logstash 主要是用来日志的搜集、分析、过滤日志的工具，支持大量的数据获取方式。一般工作方式为c&#x2F;s架构，client端安装在需要收集日志的主机上，server端负责将收到的各节点日志进行过滤、修改等操作在一并发往elasticsearch上去。 Kibana 也是一个开源和免费的工具，Kibana可以为 Logstash 和 ElasticSearch 提供的日志分析友好的 Web 界面，可以帮助汇总、分析和搜索重要数据日志。 Filebeat隶属于Beats。目前Beats包含四种工具：</p>\n<ul>\n<li>Packetbeat（搜集网络流量数据）</li>\n<li>Topbeat（搜集系统、进程和文件系统级别的 CPU 和内存使用情况等数据）</li>\n<li>Filebeat（搜集文件数据）</li>\n<li>Winlogbeat（搜集 Windows 事件日志数据）</li>\n</ul>\n<p>简易架构图： <a href=\"https://i.loli.net/2020/11/05/oAkCymFtwscbg82.jpg\"><img src=\"https://i.loli.net/2020/11/05/oAkCymFtwscbg82.jpg\"></a> 这是最简单的一种ELK架构方式。优点是搭建简单，易于上手。缺点是Logstash耗资源较大，运行占用CPU和内存高。另外没有消息队列缓存，存在数据丢失隐患。 此架构由Logstash分布于各个节点上搜集相关日志、数据，并经过分析、过滤后发送给远端服务器上的Elasticsearch进行存储。Elasticsearch将数据以分片的形式压缩存储并提供多种API供用户查询，操作。用户亦可以更直观的通过配置Kibana Web方便的对日志查询，并根据数据生成报表。 下面我将搭建该架构进行测试。</p>\n<h1 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h1><h2 id=\"机器准备\"><a href=\"#机器准备\" class=\"headerlink\" title=\"机器准备\"></a>机器准备</h2><p>在阿里云上临时采购了一台测试机器 <a href=\"https://i.loli.net/2020/11/05/PnSicY5BrgtuZ9l.jpg\"><img src=\"https://i.loli.net/2020/11/05/PnSicY5BrgtuZ9l.jpg\"></a> 本地测试也可以使用本地虚拟机，我这边为了方便直接就使用了阿里云机器。</p>\n<h2 id=\"软件准备\"><a href=\"#软件准备\" class=\"headerlink\" title=\"软件准备\"></a>软件准备</h2><p>下载地址：<a href=\"https://www.elastic.co/downloads\">https://www.elastic.co/downloads</a> 下载如图三个： <a href=\"https://i.loli.net/2020/11/05/DeMOySr5G9mvAuC.jpg\"><img src=\"https://i.loli.net/2020/11/05/DeMOySr5G9mvAuC.jpg\"></a> 下载好如图： <a href=\"https://i.loli.net/2020/11/05/fM3H6jBGDAXTwCs.jpg\"><img src=\"https://i.loli.net/2020/11/05/fM3H6jBGDAXTwCs.jpg\"></a></p>\n<h2 id=\"安装目录准备\"><a href=\"#安装目录准备\" class=\"headerlink\" title=\"安装目录准备\"></a>安装目录准备</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /data/soft</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"部署配置\"><a href=\"#部署配置\" class=\"headerlink\" title=\"部署配置\"></a>部署配置</h1><h2 id=\"elasticsearch-部署配置\"><a href=\"#elasticsearch-部署配置\" class=\"headerlink\" title=\"elasticsearch 部署配置\"></a>elasticsearch 部署配置</h2><h3 id=\"安装-JDK\"><a href=\"#安装-JDK\" class=\"headerlink\" title=\"安装 JDK\"></a>安装 JDK</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install java</span><br></pre></td></tr></table></figure>\n\n<p>检验</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">java -version</span><br></pre></td></tr></table></figure>\n\n<p>出现如下就说明 jdk 安装成功 <a href=\"https://i.loli.net/2020/11/05/2kymIHZocdYTDjO.jpg\"><img src=\"https://i.loli.net/2020/11/05/2kymIHZocdYTDjO.jpg\"></a></p>\n<h3 id=\"4-1-2-部署elasticsearch\"><a href=\"#4-1-2-部署elasticsearch\" class=\"headerlink\" title=\"4.1.2 部署elasticsearch\"></a>4.1.2 部署elasticsearch</h3><p><strong>将压缩包解压至安装目录</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\">tar -zxvf /root/elasticsearch-7.9.3-linux-x86_64.tar.gz -C /data/soft/</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /data/soft</span><br><span class=\"line\"><span class=\"comment\"># 重命名</span></span><br><span class=\"line\"><span class=\"built_in\">mv</span> elasticsearch-7.9.3/ elasticsearch</span><br></pre></td></tr></table></figure>\n\n<p><strong>修改配置文件</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入文件夹</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /data/soft/elasticsearch</span><br><span class=\"line\"><span class=\"comment\"># 修改配置文件</span></span><br><span class=\"line\">vim config/elasticsearch.yml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改以下几项：</span></span><br><span class=\"line\">node.name: node-1 <span class=\"comment\"># 设置节点名</span></span><br><span class=\"line\">http.port: 9200</span><br><span class=\"line\">network.host: 0.0.0.0 <span class=\"comment\"># 允许外部 ip 访问</span></span><br><span class=\"line\">cluster.initial_master_nodes: [<span class=\"string\">&quot;node-1&quot;</span>] <span class=\"comment\"># 设置集群初始主节点</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改系统安全配置</span></span><br><span class=\"line\">vim /etc/security/limits.conf</span><br><span class=\"line\"><span class=\"comment\"># 添加以下四行</span></span><br><span class=\"line\">* soft nofile 65536</span><br><span class=\"line\">* hard nofile 131072</span><br><span class=\"line\">* soft <span class=\"built_in\">nproc</span> 2048</span><br><span class=\"line\">* hard <span class=\"built_in\">nproc</span> 4096</span><br><span class=\"line\"></span><br><span class=\"line\">vim /etc/sysctl.conf</span><br><span class=\"line\"><span class=\"comment\"># 添加下面一行</span></span><br><span class=\"line\">vm.max_map_count=655360</span><br><span class=\"line\"><span class=\"comment\"># 执行命令</span></span><br><span class=\"line\">sysctl -p</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>新建用户并赋权</strong> ES 为了安全考虑不允许使用 root 用户启动，所以需要新建一个普通用户启动程序</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 添加用户 es</span></span><br><span class=\"line\">useradd es</span><br><span class=\"line\"><span class=\"comment\"># 设置用户 es 的密码（需要输入两遍密码）</span></span><br><span class=\"line\"><span class=\"comment\"># （如果设置密码过于简单可能会提示 BAD PASSWORD: XXX ，如果是用 root 用户操作可忽略提示继续输入第二遍密码强制设置密码）</span></span><br><span class=\"line\">passwd es</span><br><span class=\"line\"><span class=\"comment\"># 将对应文件夹的权限赋予给 es</span></span><br><span class=\"line\"><span class=\"built_in\">chown</span> -R es:es /data/soft/elasticsearch</span><br></pre></td></tr></table></figure>\n\n<p>赋权后显示如下则说明成功 <a href=\"https://i.loli.net/2020/11/05/4TQHWzrk1nsoIRB.jpg\"><img src=\"https://i.loli.net/2020/11/05/4TQHWzrk1nsoIRB.jpg\"></a> <strong>切换用户启动 Elasticsearch</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 切换用户</span></span><br><span class=\"line\">su es</span><br><span class=\"line\"><span class=\"comment\"># 进入安装目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /data/soft/elasticsearch</span><br><span class=\"line\"><span class=\"comment\"># 启动服务（-d 表示后台启动）</span></span><br><span class=\"line\">./bin/elasticsearch -d</span><br></pre></td></tr></table></figure>\n\n<p><strong>验证</strong> 开放防火墙9200 端口，我这边使用的是阿里云机器测试，将安全组全部放开了 <a href=\"https://i.loli.net/2020/11/05/Ll8Q97ayNXxHfMS.jpg\"><img src=\"https://i.loli.net/2020/11/05/Ll8Q97ayNXxHfMS.jpg\"></a> 访问页面如下就说明成功 <a href=\"https://i.loli.net/2020/11/05/kqMcVCNTaFoEiB1.jpg\"><img src=\"https://i.loli.net/2020/11/05/kqMcVCNTaFoEiB1.jpg\"></a></p>\n<h2 id=\"Kibana-部署配置\"><a href=\"#Kibana-部署配置\" class=\"headerlink\" title=\"Kibana 部署配置\"></a>Kibana 部署配置</h2><h3 id=\"解压并移动到安装目录\"><a href=\"#解压并移动到安装目录\" class=\"headerlink\" title=\"解压并移动到安装目录\"></a>解压并移动到安装目录</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 解压前先退出 es 用户,切换至 root 用户</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span></span><br><span class=\"line\"><span class=\"comment\"># 解压至安装目录</span></span><br><span class=\"line\"> tar -zxvf  /root/kibana-7.9.3-linux-x86_64.tar.gz  -C /data/soft/</span><br><span class=\"line\"><span class=\"comment\"># 重命名</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /data/soft</span><br><span class=\"line\"><span class=\"built_in\">mv</span> kibana-7.9.3-linux-x86_64/ kibana</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /data/soft/kibana</span><br><span class=\"line\">vim ./config/kibana.yml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改如下</span></span><br><span class=\"line\"><span class=\"comment\"># 服务端口</span></span><br><span class=\"line\">server.port: 5601</span><br><span class=\"line\"><span class=\"comment\"># 服务器ip  本机</span></span><br><span class=\"line\">server.host: <span class=\"string\">&quot;0.0.0.0&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># Elasticsearch 服务地址</span></span><br><span class=\"line\">elasticsearch.hosts: [<span class=\"string\">&quot;http://localhost:9200&quot;</span>]</span><br><span class=\"line\"><span class=\"comment\"># 设置语言为中文</span></span><br><span class=\"line\">i18n.locale: <span class=\"string\">&quot;zh-CN&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"授权并切换用户\"><a href=\"#授权并切换用户\" class=\"headerlink\" title=\"授权并切换用户\"></a>授权并切换用户</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 授权</span></span><br><span class=\"line\"><span class=\"built_in\">chown</span> -R es:es /data/soft/kibana</span><br><span class=\"line\"><span class=\"comment\"># 切换用户</span></span><br><span class=\"line\">su es</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动-Kibana\"><a href=\"#启动-Kibana\" class=\"headerlink\" title=\"启动 Kibana\"></a>启动 Kibana</h3><p>注意： 启动 Kibana 之前要启动 Elasticsearch</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">nohup</span> ./bin/kibana &amp;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"访问验证\"><a href=\"#访问验证\" class=\"headerlink\" title=\"访问验证\"></a>访问验证</h3><p><a href=\"https://i.loli.net/2020/11/05/rL75RYbmNtKDl9n.jpg\"><img src=\"https://i.loli.net/2020/11/05/rL75RYbmNtKDl9n.jpg\"></a></p>\n<h2 id=\"Logstash-部署配置\"><a href=\"#Logstash-部署配置\" class=\"headerlink\" title=\"Logstash 部署配置\"></a>Logstash 部署配置</h2><h3 id=\"解压并移动到指定目录\"><a href=\"#解压并移动到指定目录\" class=\"headerlink\" title=\"解压并移动到指定目录\"></a>解压并移动到指定目录</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 退出 es 用户</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span></span><br><span class=\"line\"><span class=\"comment\"># 解压至安装目录</span></span><br><span class=\"line\">tar -zxvf /root/logstash-7.9.3.tar.gz -C /data/soft</span><br><span class=\"line\"><span class=\"comment\"># 重命名</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /data/soft</span><br><span class=\"line\"><span class=\"built_in\">mv</span> logstash-7.9.3/ logstash</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h3><p>由于国内无法访问默认的gem source，需要将gem source改为国内的源。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim Gemfile</span><br><span class=\"line\"><span class=\"comment\"># 将source这一行改成如下所示：</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> <span class=\"string\">&quot;https://gems.ruby-china.com/&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">./bin/logstash-plugin install logstash-codec-json_lines</span><br></pre></td></tr></table></figure>\n\n<p>安装成功如下： <a href=\"https://i.loli.net/2020/11/05/ujD7yediPAcVYmL.jpg\"><img src=\"https://i.loli.net/2020/11/05/ujD7yediPAcVYmL.jpg\"></a></p>\n<h1 id=\"配置-NGINX-日志\"><a href=\"#配置-NGINX-日志\" class=\"headerlink\" title=\"配置 NGINX 日志\"></a>配置 NGINX 日志</h1><h2 id=\"安装-NGINX\"><a href=\"#安装-NGINX\" class=\"headerlink\" title=\"安装 NGINX\"></a>安装 NGINX</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install -y nginx </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"修改-NGINX-日志格式\"><a href=\"#修改-NGINX-日志格式\" class=\"headerlink\" title=\"修改 NGINX 日志格式\"></a>修改 NGINX 日志格式</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">log_format main <span class=\"string\">&#x27;&#123;&quot;@timestamp&quot;:&quot;$time_iso8601&quot;,&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&quot;host&quot;:&quot;$server_addr&quot;,&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&quot;clientip&quot;:&quot;$remote_addr&quot;,&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&quot;request&quot;:&quot;$request&quot;,&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&quot;size&quot;:$body_bytes_sent,&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&quot;responsetime&quot;:$request_time,&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&quot;upstreamtime&quot;:&quot;$upstream_response_time&quot;,&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&quot;upstreamhost&quot;:&quot;$upstream_addr&quot;,&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&quot;http_host&quot;:&quot;$host&quot;,&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&quot;url&quot;:&quot;$uri&quot;,&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&quot;referer&quot;:&quot;$http_referer&quot;,&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&quot;agent&quot;:&quot;$http_user_agent&quot;,&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&quot;status&quot;:&quot;$status&quot;&#125;&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">access_log /var/log/nginx/access_test.log  main;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置-logstash\"><a href=\"#配置-logstash\" class=\"headerlink\" title=\"配置 logstash\"></a>配置 logstash</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /data/soft/logstash/config/logstash-nginx.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#如下</span></span><br><span class=\"line\">input &#123;</span><br><span class=\"line\">   file &#123;</span><br><span class=\"line\">        <span class=\"built_in\">type</span> =&gt; <span class=\"string\">&quot;nginx-access-log&quot;</span></span><br><span class=\"line\">        path =&gt; <span class=\"string\">&quot;/var/log/nginx/access_test.log&quot;</span></span><br><span class=\"line\">        start_position =&gt; <span class=\"string\">&quot;beginning&quot;</span></span><br><span class=\"line\">        stat_interval =&gt; <span class=\"string\">&quot;2&quot;</span></span><br><span class=\"line\">        codec =&gt; json</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">filter &#123;&#125;</span><br><span class=\"line\">output &#123;</span><br><span class=\"line\">  elasticsearch &#123;</span><br><span class=\"line\">    hosts =&gt; [<span class=\"string\">&quot;http://localhost:9200&quot;</span>]</span><br><span class=\"line\">    <span class=\"comment\">#index =&gt; &quot;%&#123;[@metadata][beat]&#125;-%&#123;[@metadata][version]&#125;-%&#123;+YYYY.MM.dd&#125;&quot;</span></span><br><span class=\"line\">    index =&gt; <span class=\"string\">&quot;logstash-nginx-access-log-%&#123;+YYYY.MM.dd&#125;&quot;</span></span><br><span class=\"line\">    <span class=\"comment\">#user =&gt; &quot;elastic&quot;</span></span><br><span class=\"line\">    <span class=\"comment\">#password =&gt; &quot;changeme&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  stdout &#123;</span><br><span class=\"line\">        codec =&gt; json_lines</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">nohup</span> ./bin/logstash -f ./config/logstash-nginx.conf</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置索引\"><a href=\"#配置索引\" class=\"headerlink\" title=\"配置索引\"></a>配置索引</h2><p>访问 kibana <a href=\"https://i.loli.net/2020/11/05/NzWQAhOTp8s2jyE.jpg\"><img src=\"https://i.loli.net/2020/11/05/NzWQAhOTp8s2jyE.jpg\"></a> 创建索引 <a href=\"https://i.loli.net/2020/11/05/6xUSnPEdDmBj3HK.jpg\"><img src=\"https://i.loli.net/2020/11/05/6xUSnPEdDmBj3HK.jpg\"></a> <a href=\"https://i.loli.net/2020/11/05/Viwj3PEpOIJzXfN.jpg\"><img src=\"https://i.loli.net/2020/11/05/Viwj3PEpOIJzXfN.jpg\"></a></p>\n<h2 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h2><p>访问 NGINX 页面 <a href=\"https://i.loli.net/2020/11/05/QxAkX1EPnWKUtO9.jpg\"><img src=\"https://i.loli.net/2020/11/05/QxAkX1EPnWKUtO9.jpg\"></a> 查看日志文件 <a href=\"https://i.loli.net/2020/11/05/2rtPleQNvIiH19T.jpg\"><img src=\"https://i.loli.net/2020/11/05/2rtPleQNvIiH19T.jpg\"></a> 查看 Kibana 页面 <a href=\"https://i.loli.net/2020/11/05/d5SI31Z7gK6eEnY.jpg\"><img src=\"https://i.loli.net/2020/11/05/d5SI31Z7gK6eEnY.jpg\"></a> 出现日志即完成</p>\n","categories":["skills"],"tags":["运维","教程","软件安装","ELK"]},{"title":"《vim 实用技巧》笔记","url":"/2020/11/14/%E3%80%8Avim-%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7%E3%80%8B%E7%AC%94%E8%AE%B0/","content":"<h1 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h1><p><code>vim</code> 从从事运维工作开始时就使用了，但是实话实说，实际用到的功能只是 <code>vim</code> 强大功能的一小部分，这次乘着“双十一”京东图书优惠，买了一本《vim 实用技巧》学习一下，本文就用作读书笔记记录。 <a href=\"https://i.loli.net/2020/11/14/6HIG91aNthKCemu.jpg\"><img src=\"https://i.loli.net/2020/11/14/6HIG91aNthKCemu.jpg\"></a></p>\n<span id=\"more\"></span>\n<h1 id=\"第一章-Vim-解决问题的方式-20201114\"><a href=\"#第一章-Vim-解决问题的方式-20201114\" class=\"headerlink\" title=\"第一章 Vim 解决问题的方式 (20201114)\"></a>第一章 Vim 解决问题的方式 (20201114)</h1><h2 id=\"技巧-1-认识-命令\"><a href=\"#技巧-1-认识-命令\" class=\"headerlink\" title=\"技巧 1 认识.命令\"></a>技巧 1 认识<code>.</code>命令</h2><p><code>.</code>命令作用是重复上次操作，如我在一个文本文件中输入一行字符，然后输入<code>.</code>命令，则会重复输入该行 <img src=\"https://i.loli.net/2020/11/14/mSG9RpFiau1kJtl.gif\" alt=\"2020-11-14 21.38.21.gif\"> <code>.</code>会记录从插入模式到返回普通模式的<strong>每一个</strong>按键操作，在输入<code>.</code>命令后会重新执行所有这些按键操作。这样可以将<code>.</code>当做一个很小的宏（<code>macro</code>）.</p>\n<h2 id=\"技巧-2-不要自我重复\"><a href=\"#技巧-2-不要自我重复\" class=\"headerlink\" title=\"技巧 2 不要自我重复\"></a>技巧 2 不要自我重复</h2><p>例如在所有行尾添加分号，<code>vim</code>提供了一个专门的命令，可以把两步操作合并成一步 <img src=\"https://i.loli.net/2020/11/14/JgDap3YTlRjENds.gif\" alt=\"2020-11-14 21.53.37.gif\"> 其中,<code>A</code>命令在当前行尾添加内容，通过该命令添加分号后，则可以使用<code>j.</code>（<code>j</code> 命令为下移）命令来给后续行添加分号提高效率。</p>\n<h2 id=\"技巧-3-以退为进\"><a href=\"#技巧-3-以退为进\" class=\"headerlink\" title=\"技巧 3 以退为进\"></a>技巧 3 以退为进</h2><p>这个技巧在编程过程中可以经常使用到，如在指定字符前后各添加一个空格 <img src=\"https://i.loli.net/2020/11/14/gVNcOPiRU37Bh6m.gif\" alt=\"2020-11-14 22.04.09.gif\"> 其中： <code>f&#123;char&#125;</code>命令让<code>vim</code>查找下一处指定字符出现的位置，如果找到了直接移到那里 <code>s</code>命令为两个操作合并为一个：先删除光标上的字符，然后进入插入模式。 <code>;</code>命令会重复查找上次<code>f</code>命令所查找的字符</p>\n<h2 id=\"技巧-4-执行、重复、后退\"><a href=\"#技巧-4-执行、重复、后退\" class=\"headerlink\" title=\"技巧 4 执行、重复、后退\"></a>技巧 4 执行、重复、后退</h2><p>上面几个重复操作很快捷，但是在执行过程中要很小心的按命令，输入错命令后可以执行撤回操作，下表例举了可重复的操作及如何后退</p>\n<p><strong>目的</strong></p>\n<p><strong>操作</strong></p>\n<p><strong>重复</strong></p>\n<p><strong>回退</strong></p>\n<p>作出一个修改</p>\n<p>{edit}</p>\n<p><code>.</code></p>\n<p><code>u</code></p>\n<p>在行内查找下一指定字符</p>\n<p><code>f&#123;char&#125;/t&#123;char&#125;</code></p>\n<p><code>;</code></p>\n<p><code>,</code></p>\n<p>在行内查找上一指定字符</p>\n<p><code>F&#123;char&#125;/T&#123;char&#125;</code></p>\n<p><code>;</code></p>\n<p><code>,</code></p>\n<p>在文档查找下一匹配项</p>\n<p><code>/pattern&lt;CR&gt;</code></p>\n<p><code>n</code></p>\n<p><code>N</code></p>\n<p>在文档查找上一匹配项</p>\n<p><code>?pattern&lt;CR&gt;</code></p>\n<p><code>n</code></p>\n<p><code>N</code></p>\n<p>执行替换</p>\n<p><code>:s/target/replacement</code></p>\n<p><code>&amp;</code></p>\n<p><code>u</code></p>\n<p>执行一系列修改</p>\n<p><code>qx&#123;change&#125;q</code></p>\n<p><code>@x</code></p>\n<p><code>u</code></p>\n<h2 id=\"技巧-5-查找并手动替换\"><a href=\"#技巧-5-查找并手动替换\" class=\"headerlink\" title=\"技巧 5 查找并手动替换\"></a>技巧 5 查找并手动替换</h2><p><code>:s/target/replacement</code>命令会替换文档中所有匹配项，但在实际场景中，我们可能只需要替换文档中某些字符，这时候就需要手动替换，如下操作为替换部分单词<code>content</code>为<code>copy</code> <img src=\"https://i.loli.net/2020/11/14/zRIqCPTBevyso3N.gif\" alt=\"2020-11-14 22.32.17.gif\"> 其中： <code>cw</code>命令会删除从光标位置到单词结尾的字符并进入插入模式</p>\n<h2 id=\"技巧-6-范式\"><a href=\"#技巧-6-范式\" class=\"headerlink\" title=\"技巧 6 . 范式\"></a>技巧 6 <code>.</code> 范式</h2><p>作者将这一操作称为<code>.</code>范式：即用一键移动，另一键执行。 上面几个技巧都是在编辑完之后执行一个移动操作在执行<code>.</code>命令来进行执行重复操作。</p>\n<h1 id=\"第二章-普通模式（20201115）\"><a href=\"#第二章-普通模式（20201115）\" class=\"headerlink\" title=\"第二章 普通模式（20201115）\"></a>第二章 普通模式（20201115）</h1><h2 id=\"技巧-7-停顿时请移开画笔\"><a href=\"#技巧-7-停顿时请移开画笔\" class=\"headerlink\" title=\"技巧 7 停顿时请移开画笔\"></a>技巧 7 停顿时请移开画笔</h2><p>普通模式是<code>Vim</code>的默认模式，<code>Vim</code>是程序员使用的工具，程序员只是花一小部份时间编写代码。在普通模式中有众多工具可以使用。</p>\n<h2 id=\"技巧-8-把撤销单元切成块\"><a href=\"#技巧-8-把撤销单元切成块\" class=\"headerlink\" title=\"技巧 8 把撤销单元切成块\"></a>技巧 8 把撤销单元切成块</h2><p><code>Vim</code>从进入插入模式开始，直到返回普通模式为止，在此期间输入或删除的任何内容都被当成一次修改。因此只要控制好对<code>&lt;Esc&gt;</code>键的使用，就可使撤销命令作用于单词、句子或段落。</p>\n<h2 id=\"技巧-9-构造可重复的修改\"><a href=\"#技巧-9-构造可重复的修改\" class=\"headerlink\" title=\"技巧 9 构造可重复的修改\"></a>技巧 9 构造可重复的修改</h2><p>做一次操作前思考后面会不会重复，或者说在执行操作前构造一个可以重复的操作以便后续操作时使用到。</p>\n<h2 id=\"技巧-10-用次数做简单的算术运算\"><a href=\"#技巧-10-用次数做简单的算术运算\" class=\"headerlink\" title=\"技巧 10 用次数做简单的算术运算\"></a>技巧 10 用次数做简单的算术运算</h2><p>利用普通模式命令在执行时指定次数进行简单的算术运算。 如下修改每行的数值等差变化 <img src=\"https://i.loli.net/2020/11/15/5X2YAfsBE9uvK8R.gif\" alt=\"2020-11-15 16.23.59.gif\"></p>\n<h2 id=\"技巧-11-能够重复，就别用次数\"><a href=\"#技巧-11-能够重复，就别用次数\" class=\"headerlink\" title=\"技巧 11 能够重复，就别用次数\"></a>技巧 11 能够重复，就别用次数</h2><p>如果要删除一行字符中连续的两个单词，有如下三种方式： <code>d2w</code>：删除两个单词 <code>2dw</code>：执行两次删除一个单词的操作 <code>dw.</code>：重复删除单词的操作 这三个操作建议使用最后一个，虽然操作都是按三个按键，但是最后一个可以节省统计删除的单词的个数，相对来说计算按键的次数更简单，另外重复操作在出现错误时可以退回某次操作之前而不是退回到所有的操作之前。 口诀：执行、重复、回退。</p>\n<h2 id=\"技巧-12-双剑合璧，天下无敌\"><a href=\"#技巧-12-双剑合璧，天下无敌\" class=\"headerlink\" title=\"技巧 12 双剑合璧，天下无敌\"></a>技巧 12 双剑合璧，天下无敌</h2><p>公式： 操作符 + 动作命令 &#x3D; 操作 <code>daw</code>中<code>d</code>为操作符，<code>aw</code>为动作命令，合在一起就是删除一个单词的操作。 其它操作如<code>gUaw</code>即为把一个单词转换为大写字母。 下表为 vim 的操作符命令</p>\n<p>命令</p>\n<p>用途</p>\n<p><code>c</code></p>\n<p>修改</p>\n<p><code>d</code></p>\n<p>删除</p>\n<p><code>y</code></p>\n<p>复制到寄存器中</p>\n<p><code>g~</code></p>\n<p>反转大小写</p>\n<p><code>gu</code></p>\n<p>转换为小写</p>\n<p><code>gU</code></p>\n<p>转换为大写</p>\n<p><code>&gt;</code></p>\n<p>增加缩进</p>\n<p><code>&lt;</code></p>\n<p>减小缩进</p>\n<p><code>！</code></p>\n<p>使用外部程序过滤{motion}所跨越的行</p>\n<h1 id=\"第三章-插入模式\"><a href=\"#第三章-插入模式\" class=\"headerlink\" title=\"第三章 插入模式\"></a>第三章 插入模式</h1>","categories":["skills"],"tags":["记录","vim","笔记"]},{"title":"2020年总结及 2021 年计划","url":"/2020/12/14/2020%E5%B9%B4%E6%80%BB%E7%BB%93%E5%8F%8A-2021-%E5%B9%B4%E8%AE%A1%E5%88%92/","content":"<h1 id=\"2021-计划\"><a href=\"#2021-计划\" class=\"headerlink\" title=\"2021 计划\"></a>2021 计划</h1><ol>\n<li>减肥（important）</li>\n<li>带自己父母和能能父母做次全身体检</li>\n<li>学英语</li>\n<li>提升专业技能</li>\n<li>提高存款（10w），争取回芜湖</li>\n<li><a href=\"https://www.52ynn.top/index.php/2021/01/06/2021-%e5%b9%b4%e8%af%bb%e4%b9%a6%e6%b8%85%e5%8d%95/\" title=\"读书清单\">读书清单</a></li>\n</ol>\n<hr>\n<h1 id=\"2020-总结\"><a href=\"#2020-总结\" class=\"headerlink\" title=\"2020 总结\"></a>2020 总结</h1><h2 id=\"一句话总结\"><a href=\"#一句话总结\" class=\"headerlink\" title=\"一句话总结\"></a>一句话总结</h2><p>2020年还剩半个月就要结束了，这一年在新冠疫情中度过了春节；这一年我当父亲了，有一个可爱到不行的女儿；这一年，我离开了工作了两年多的公司…</p>\n<span id=\"more\"></span>\n\n<h2 id=\"2020-年计划完成情况\"><a href=\"#2020-年计划完成情况\" class=\"headerlink\" title=\"2020 年计划完成情况\"></a>2020 年计划完成情况</h2><p>记得 20 年初的时候列了个计划，年底了完成的不甚理想。 <a href=\"https://i.loli.net/2020/12/14/zpPhCf3jMeNJgva.jpg\"><img src=\"https://i.loli.net/2020/12/14/zpPhCf3jMeNJgva.jpg\"></a> <strong>完成情况：</strong></p>\n<ol>\n<li>未完成</li>\n<li>未完成，疫情原因无法出国</li>\n<li>基本达成，入门</li>\n<li>完成，新工作与 k8s 有关，Python 自学了 Django</li>\n<li>基本完成，基本上每个月都回去至少一次</li>\n<li>未完成</li>\n<li>基本完成，<a href=\"https://www.52ynn.top/index.php/2020/01/06/2020-%e8%af%bb%e4%b9%a6%e6%b8%85%e5%8d%95/\" title=\"读书清单\">读书清单</a></li>\n<li>未完成，很惭愧啊又增重了</li>\n<li>完成</li>\n</ol>\n<h2 id=\"多说几句\"><a href=\"#多说几句\" class=\"headerlink\" title=\"多说几句\"></a>多说几句</h2><p>20 年的计划很少，但是只完成了一般左右，一部分原因是因为疫情，另外一部分则是自己还是有点懒。</p>\n<hr>\n<p><strong>生活方面</strong>，开始也说了，有了可爱的女儿，父母在家也多了点乐趣，爷爷也因为重孙女的出生健康情况变好了，同样的，家庭的支出也变多了，也算是个幸福的烦恼吧。</p>\n<hr>\n<p><strong>家人方面</strong>，家人的健康状况一直是我比较担心的，一直打算给父母做个全身检查，但是一直没有付出行动，这个一定要列在明年的计划中。</p>\n<hr>\n<p><strong>个人方面</strong>，考了一次公务员，失败了，还是挺难的；体重越来越重，脱发越来越严重，新的一年快要到来的时候还是要注意锻炼身体；另外自己的脾气也要有所收敛，容易伤害亲人。</p>\n<hr>\n<p><strong>工作方面</strong>，9 月份换了新工作，新工作相对之前来说轻松很多，有更多的时候学习，收入相对来说也增加了一点，希望以后越来越好吧。</p>\n","categories":["life"],"tags":["个人","总结","计划"]},{"title":"MacOS iTerm2 配置 lrzsz","url":"/2020/12/17/macos-iterm2-%E9%85%8D%E7%BD%AE-lrzsz/","content":"<h1 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h1><p>公司换过好几次电脑，每次配置 iTerm2 都要查教程配置，自己记录下以备不时之需。</p>\n<h1 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h1><p>Mac OS 11.1.0 ITerm2 3.4.3</p>\n<h1 id=\"安装-ITerm2\"><a href=\"#安装-ITerm2\" class=\"headerlink\" title=\"安装 ITerm2\"></a>安装 ITerm2</h1><p><a href=\"https://iterm2.com/\" title=\"官网\">官网</a>下载安装就可以了，不赘述了.</p>\n<h1 id=\"安装-rz-sz\"><a href=\"#安装-rz-sz\" class=\"headerlink\" title=\"安装 rz sz\"></a>安装 rz sz</h1><span id=\"more\"></span>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 需要先安装 homebrew</span></span><br><span class=\"line\">brew install lrzsz</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"配置-rz-sz\"><a href=\"#配置-rz-sz\" class=\"headerlink\" title=\"配置 rz sz\"></a>配置 rz sz</h1><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim iterm2-recv-zmodem.sh</span><br></pre></td></tr></table></figure>\n\n<p>输入以下内容</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Author: Matt Mastracci (matthew@mastracci.com)</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">licensed under cc-wiki with attribution required</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Remainder of script public domain</span></span><br><span class=\"line\"></span><br><span class=\"line\">osascript -e &#x27;tell application &quot;iTerm2&quot; to version&#x27; &gt; /dev/null 2&gt;&amp;1 &amp;&amp; NAME=iTerm2  NAME=iTerm</span><br><span class=\"line\">if [[ $NAME = &quot;iTerm&quot; ]]; then</span><br><span class=\"line\">    FILE=`osascript -e &#x27;tell application &quot;iTerm&quot; to activate&#x27; -e &#x27;tell application &quot;iTerm&quot; to set thefile to choose folder with prompt &quot;Choose a folder to place received files in&quot;&#x27; -e &quot;do shell script (\\&quot;echo \\&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\\&quot;\\&quot;)&quot;`</span><br><span class=\"line\">else</span><br><span class=\"line\">    FILE=`osascript -e &#x27;tell application &quot;iTerm2&quot; to activate&#x27; -e &#x27;tell application &quot;iTerm2&quot; to set thefile to choose folder with prompt &quot;Choose a folder to place received files in&quot;&#x27; -e &quot;do shell script (\\&quot;echo \\&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\\&quot;\\&quot;)&quot;`</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">if [[ $FILE = &quot;&quot; ]]; then</span><br><span class=\"line\">    echo Cancelled.</span><br><span class=\"line\">    # Send ZModem cancel</span><br><span class=\"line\">    echo -e \\\\x18\\\\x18\\\\x18\\\\x18\\\\x18</span><br><span class=\"line\">    sleep 1</span><br><span class=\"line\">    echo</span><br><span class=\"line\">    echo \\# Cancelled transfer</span><br><span class=\"line\">else</span><br><span class=\"line\">    cd &quot;$FILE&quot;</span><br><span class=\"line\">    /usr/local/bin/rz -E -e -b</span><br><span class=\"line\">    sleep 1</span><br><span class=\"line\">    echo</span><br><span class=\"line\">    echo</span><br><span class=\"line\">    echo \\# Sent \\-\\&gt; $FILE</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n\n<p>保存退出，配置 send</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim iterm2-send-zmodem.sh</span><br></pre></td></tr></table></figure>\n\n<p>输入以下内容</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Author: Matt Mastracci (matthew@mastracci.com)</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">licensed under cc-wiki with attribution required</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Remainder of script public domain</span></span><br><span class=\"line\"></span><br><span class=\"line\">osascript -e &#x27;tell application &quot;iTerm2&quot; to version&#x27; &gt; /dev/null 2&gt;&amp;1 &amp;&amp; NAME=iTerm2  NAME=iTerm</span><br><span class=\"line\">if [[ $NAME = &quot;iTerm&quot; ]]; then</span><br><span class=\"line\">    FILE=`osascript -e &#x27;tell application &quot;iTerm&quot; to activate&#x27; -e &#x27;tell application &quot;iTerm&quot; to set thefile to choose file with prompt &quot;Choose a file to send&quot;&#x27; -e &quot;do shell script (\\&quot;echo \\&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\\&quot;\\&quot;)&quot;`</span><br><span class=\"line\">else</span><br><span class=\"line\">    FILE=`osascript -e &#x27;tell application &quot;iTerm2&quot; to activate&#x27; -e &#x27;tell application &quot;iTerm2&quot; to set thefile to choose file with prompt &quot;Choose a file to send&quot;&#x27; -e &quot;do shell script (\\&quot;echo \\&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\\&quot;\\&quot;)&quot;`</span><br><span class=\"line\">fi</span><br><span class=\"line\">if [[ $FILE = &quot;&quot; ]]; then</span><br><span class=\"line\">    echo Cancelled.</span><br><span class=\"line\">    # Send ZModem cancel</span><br><span class=\"line\">    echo -e \\\\x18\\\\x18\\\\x18\\\\x18\\\\x18</span><br><span class=\"line\">    sleep 1</span><br><span class=\"line\">    echo</span><br><span class=\"line\">    echo \\# Cancelled transfer</span><br><span class=\"line\">else</span><br><span class=\"line\">    /usr/local/bin/sz &quot;$FILE&quot; -e -b</span><br><span class=\"line\">    sleep 1</span><br><span class=\"line\">    echo</span><br><span class=\"line\">    echo \\# Received $FILE</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n\n<p>保存退出，并修改权限</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">chmof +x iterm2-*</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"iTerm2-配置添加rz-sz-功能\"><a href=\"#iTerm2-配置添加rz-sz-功能\" class=\"headerlink\" title=\"iTerm2 配置添加rz sz 功能\"></a>iTerm2 配置添加rz sz 功能</h1><p>点击 iTerm2 的设置界面 Perference-&gt; Profiles -&gt; Default -&gt; Advanced -&gt; Triggers 的 Edit 按钮 <a href=\"https://i.loli.net/2020/12/17/XjG1nqtLIpeK9Yy.jpg\"><img src=\"https://i.loli.net/2020/12/17/XjG1nqtLIpeK9Yy.jpg\"></a> 添加两个 Triggers 内容如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">Regular expression: rz waiting to receive.\\*\\*B0100</span><br><span class=\"line\">Action: Run Silent Coprocess</span><br><span class=\"line\">Parameters: /usr/local/bin/iterm2-send-zmodem.sh</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Regular expression: \\*\\*B00000000000000</span><br><span class=\"line\">Action: Run Silent Coprocess</span><br><span class=\"line\">Parameters: /usr/local/bin/iterm2-recv-zmodem.sh</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>添加完成后如下 <a href=\"https://i.loli.net/2020/12/17/r7kiqIyaVbum3x9.jpg\"><img src=\"https://i.loli.net/2020/12/17/r7kiqIyaVbum3x9.jpg\"></a> 至此就完成了配置，可以在服务器上使用 rz sz 命令上传下载文件了。 备注： 服务器上也要安装 lrzsz</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># centos </span></span><br><span class=\"line\">yum install lrzsz</span><br><span class=\"line\"><span class=\"comment\">#ubuntu</span></span><br><span class=\"line\">apt-get install lrzsz</span><br></pre></td></tr></table></figure>","categories":["skills"],"tags":["记录","Mac"]},{"title":"gitlab 跨版本升级过程12.10.11->13.7.0","url":"/2021/01/05/gitlab-%E8%B7%A8%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7%E8%BF%87%E7%A8%8B12-10-11-13-7-0/","content":"<h1 id=\"文档\"><a href=\"#文档\" class=\"headerlink\" title=\"文档\"></a>文档</h1><p><a href=\"https://docs.gitlab.com/ee/update/README.html\" title=\"官方文档\">官方文档</a> <a href=\"https://gitlab.com/gitlab-org/gitlab/-/blob/master/CHANGELOG.md\" title=\"ChangeLog\">ChangeLog</a></p>\n<h1 id=\"升级注意点\"><a href=\"#升级注意点\" class=\"headerlink\" title=\"升级注意点\"></a>升级注意点</h1><p>因为安装都是使用 yum 安装的，所以无需升级 git 及 ruby <strong>官方推荐的升级路径</strong>： 12.10.14 -&gt; 13.0.14 -&gt; 13.1.11 - &gt; 13.5.3 - &gt; 13.6.0 - &gt; 13.7.0 <strong>需要特殊注意的版本</strong>: - 13.0.x: 升级到13.0x 需要删除rack_attack_protected_paths配置 <strong>数据库版本：</strong> 当前<code>PostgreSQL</code>版本为 <code>10.0</code>,需要升级最低版本至 11，建议 12.4</p>\n<span id=\"more\"></span>\n<h1 id=\"升级步骤\"><a href=\"#升级步骤\" class=\"headerlink\" title=\"升级步骤\"></a>升级步骤</h1><h4 id=\"停止服务\"><a href=\"#停止服务\" class=\"headerlink\" title=\"停止服务\"></a>停止服务</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo gitlab-ctl stop</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"执行备份\"><a href=\"#执行备份\" class=\"headerlink\" title=\"执行备份\"></a>执行备份</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo gitlab-rake gitlab:backup:create STRATEGY=copy</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"阿里云创建PostgreSQL-13-0-实例\"><a href=\"#阿里云创建PostgreSQL-13-0-实例\" class=\"headerlink\" title=\"阿里云创建PostgreSQL 13.0 实例\"></a>阿里云创建<code>PostgreSQL 13.0</code> 实例</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">创建用户及数据库</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"迁移数据库（25min）\"><a href=\"#迁移数据库（25min）\" class=\"headerlink\" title=\"迁移数据库（25min）\"></a>迁移数据库（25min）</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 导出 sql</span></span><br><span class=\"line\">pg_dump -h host -p port -Ugit  gitlabhq_production &gt; ./gitlabhq_production.sql</span><br><span class=\"line\"><span class=\"comment\"># 导入 sql 至新版本数据库</span></span><br><span class=\"line\">psql -h host -p port -Ugit -d gitlabhq_production -f gitlabhq_production.sql</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改配置文件数据库链接\"><a href=\"#修改配置文件数据库链接\" class=\"headerlink\" title=\"修改配置文件数据库链接\"></a>修改配置文件数据库链接</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/gitlab/gitlab.rb</span><br><span class=\"line\"><span class=\"comment\"># 修改如下配置（如新数据库密码修改则要修改密码配置）</span></span><br><span class=\"line\">gitlab_rails[<span class=\"string\">&#x27;db_host&#x27;</span>] = <span class=\"string\">&quot;pgm-uf69431i19dl98er167590.pg.rds.aliyuncs.com&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"启动服务检查功能\"><a href=\"#启动服务检查功能\" class=\"headerlink\" title=\"启动服务检查功能\"></a>启动服务检查功能</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo gitlab-ctl start</span><br><span class=\"line\"><span class=\"comment\"># 启动服务，检查新数据库是否报错</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"升级（40min）\"><a href=\"#升级（40min）\" class=\"headerlink\" title=\"升级（40min）\"></a>升级（40min）</h4><p>为了减少时间，可以先将安装包下载到本地</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看版本号</span></span><br><span class=\"line\">sudo yum --showduplicates list gitlab-ee</span><br><span class=\"line\"><span class=\"comment\">### 3.2.2 分步升级对应版本(建议升级一个版本后检查下功能是否可用)</span></span><br><span class=\"line\">sudo yum install gitlab-ee-13.0.4-ee.0.el7<span class=\"comment\"># 升级前注释rack_attack_protected_paths配置</span></span><br><span class=\"line\">sudo yum install gitlab-ee-13.1.11-ee.0.el7</span><br><span class=\"line\">sudo yum install gitlab-ee-13.5.3-ee.0.el7</span><br><span class=\"line\">sudo yum install gitlab-ee-13.6.0-ee.0.el7</span><br><span class=\"line\">sudo yum install gitlab-ee-13.7.0-ee.0.el7</span><br></pre></td></tr></table></figure>","categories":["skills"],"tags":["运维","gitlab"]},{"title":"2021 年读书清单","url":"/2021/01/06/2021-%E5%B9%B4%E8%AF%BB%E4%B9%A6%E6%B8%85%E5%8D%95/","content":"<h1 id=\"阅读记录\"><a href=\"#阅读记录\" class=\"headerlink\" title=\"阅读记录\"></a>阅读记录</h1><p>书名</p>\n<p>开始日期</p>\n<p>结束日期</p>\n<p>备注</p>\n<p>《我的二本学生》</p>\n<p>2021 年 1 月 6 日</p>\n<span id=\"more\"></span>\n<p>2021 年 1 月 7 日</p>\n<p>《中华人民共和国民法典》</p>\n<p>2021 年 1 月 7 日</p>\n<p>2021年 1 月 21 日</p>\n<p>简略看了一遍</p>\n<p>《干法》</p>\n<p>2021 年 1 月 21 日</p>\n<p>2021年 1 月 27 日</p>\n<p>《指数基金投资指南》</p>\n<p>2021 年 1 月 27 日</p>\n<p>2021 年 3 月 3 日</p>\n<p><a href=\"https://www.52ynn.top/index.php/2021/01/29/%e3%80%8a%e6%8c%87%e6%95%b0%e5%9f%ba%e9%87%91%e6%8a%95%e8%b5%84%e6%8c%87%e5%8d%97%e3%80%8b%e7%ac%94%e8%ae%b0/\" title=\"笔记\">笔记</a></p>\n<p>《毛泽东传》</p>\n<p>2021 年 2 月 4 日</p>\n<p>《如何阅读一本书》</p>\n<p>2021 年 3 月 15 日</p>\n<p>《Kubernetes 权威指南》</p>\n<p>2021 年 3 月 15 日</p>\n<p>2021 年 4 月 14 日</p>\n<p>《每天演好一个情绪稳定的成年人》</p>\n<p>2021 年 4 月 2 日</p>\n<p>2021 年 4 月 10 日</p>\n<p>《Prometheus云原生监控》</p>\n<p>2021 年 4 月 14 日</p>\n<h1 id=\"书单\"><a href=\"#书单\" class=\"headerlink\" title=\"书单\"></a>书单</h1><p><a href=\"https://i.loli.net/2021/01/06/lNKE1hFa8UYnJGX.jpg\"><img src=\"https://i.loli.net/2021/01/06/lNKE1hFa8UYnJGX.jpg\"></a></p>\n","categories":["life"],"tags":["清单","读书"]},{"title":"2021 年电影清单","url":"/2021/01/08/2021-%E5%B9%B4%E7%94%B5%E5%BD%B1%E6%B8%85%E5%8D%95/","content":"<p><a href=\"https://movie.douban.com/top250\" title=\"豆瓣 Top 250\">豆瓣 Top 250</a><span id=\"more\"></span></p>\n","categories":["life"],"tags":["清单","电影"]},{"title":"近期关于工作的一些胡思乱想","url":"/2021/01/17/%E8%BF%91%E6%9C%9F%E5%85%B3%E4%BA%8E%E5%B7%A5%E4%BD%9C%E7%9A%84%E4%B8%80%E4%BA%9B%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/","content":"<h1 id=\"Why？\"><a href=\"#Why？\" class=\"headerlink\" title=\"Why？\"></a>Why？</h1><p>近期不管是外部新闻、内部会议还是脉脉上的匿名讨论，都反应出近期公司的境遇不甚乐观，所以最近一周一直在思考一个问题：我当时做换工作的决定是利大于弊还是弊大于利？ 其实在拿到流利说 offer 之后就已经搜索过相关的资讯，所以心理还是有些预期的，写这个文章的原因也是想下记录下目前的状态。</p>\n<h1 id=\"Gains-amp-Losses\"><a href=\"#Gains-amp-Losses\" class=\"headerlink\" title=\"Gains &amp; Losses\"></a>Gains &amp; Losses</h1><span id=\"more\"></span>\n<p>在换工作至今，说实话一直没有后悔过，一方面我是真的喜欢目前的工作氛围及状态，另外一方面是之前的工作相对来说有点累。 我其实是一个熟悉一个环境之后就不太想改变的人，当时换工作主要有多方面原因： 1. 首先是收入问题，因为有了小孩，加上房贷等综合因素，一个人的收入确实有点难以支撑整个家庭，因此萌生了换工作的想法。 2. 工作内容问题，感觉自己的能力以及到了瓶颈，技术权限小，没有新的点让自己去尝试。 3. 工作强度较大，压力较大。 做这个决定也是有得有失</p>\n<h2 id=\"Losses\"><a href=\"#Losses\" class=\"headerlink\" title=\"Losses\"></a>Losses</h2><p><a href=\"https://www.52ynn.top/wp-content/uploads/2021/01/2f44e0fe2da3551207d51fc9d0db2429.jpeg\"><img src=\"https://www.52ynn.top/wp-content/uploads/2021/01/2f44e0fe2da3551207d51fc9d0db2429.jpeg\"></a> 契约锁作为自己毕业后的第一份工作并且工作了两年多，其实还是有很多感情的，随着公司的发展自己从零到一。 1. 发展机会（目前公司近况恨不乐观，前公司发展势头强劲） 2. 朋友关系，很多都是认识好几年的朋友，不是普通的同事关系。</p>\n<h2 id=\"Gains\"><a href=\"#Gains\" class=\"headerlink\" title=\"Gains\"></a>Gains</h2><p><a href=\"https://www.52ynn.top/wp-content/uploads/2020/08/v2-22685447017e43887d0bc7a396582c4b_1200x500.jpg\"><img src=\"https://www.52ynn.top/wp-content/uploads/2020/08/v2-22685447017e43887d0bc7a396582c4b_1200x500.jpg\"></a> 1. 更高的收入，这点对我现在很重要 2. 更大的公司，见识到更完善的体系 3. 更好的简历经历</p>\n<h1 id=\"All-in-one\"><a href=\"#All-in-one\" class=\"headerlink\" title=\"All in one\"></a>All in one</h1><p>总的来说，利还是大于弊的，没有说贬低哪一个，就我现在的状况而言。如果我是单独一个人，我肯定还是愿意留在之前公司，但是现在情况不允许。 现在也希望流利说能振作起来吧！</p>\n","categories":["Essay"],"tags":["个人","胡思乱想"]},{"title":"高可用Kubernetes集群搭建教程-HAProxy负载均衡实现","url":"/2021/01/17/%E9%AB%98%E5%8F%AF%E7%94%A8kubernetes%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B-haproxy%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%AE%9E%E7%8E%B0/","content":"<p>集群架构图 <a href=\"https://i.loli.net/2021/01/18/4wXgi7UOGJWP1rd.jpg\"><img src=\"https://i.loli.net/2021/01/18/4wXgi7UOGJWP1rd.jpg\"></a></p>\n<h2 id=\"准备机器列表如下\"><a href=\"#准备机器列表如下\" class=\"headerlink\" title=\"准备机器列表如下\"></a>准备机器列表如下</h2><p>机器列表如下：</p>\n<p>IP地址</p>\n<p>hostname</p>\n<p>10.158.1.9<span id=\"more\"></span></p>\n<p>k8s-master-03</p>\n<p>10.158.1.8</p>\n<p>k8s-master-02</p>\n<p>10.158.1.7</p>\n<p>k8s-master-01</p>\n<p>10.158.1.5</p>\n<p>k8s-worker-05</p>\n<p>10.158.1.4</p>\n<p>k8s-worker-04</p>\n<p>10.158.1.3</p>\n<p>k8s-worker-03</p>\n<p>10.158.1.2</p>\n<p>k8s-worker-02</p>\n<p>10.158.1.1</p>\n<p>k8s-worker-01</p>\n<h2 id=\"准备Etcd环境\"><a href=\"#准备Etcd环境\" class=\"headerlink\" title=\"准备Etcd环境\"></a>准备Etcd环境</h2><p><a href=\"https://www.52ynn.top/index.php/2021/01/18/etcd%e9%9b%86%e7%be%a4%e5%ae%89%e8%a3%85-3-4-3/\" title=\"见Etcd安装教程 \">见Etcd安装教程</a></p>\n<h2 id=\"节点准备kubeadm基本环境\"><a href=\"#节点准备kubeadm基本环境\" class=\"headerlink\" title=\"节点准备kubeadm基本环境\"></a>节点准备kubeadm基本环境</h2><p>每个节点需要安装的软件</p>\n<p>软件包</p>\n<p>版本</p>\n<p>kubeadm</p>\n<p>1.16.1</p>\n<p>docker</p>\n<p>19.03.5</p>\n<p>kubelet</p>\n<p>1.16.1</p>\n<p>kubectl</p>\n<p>1.16.1</p>\n<ul>\n<li><code>kubeadm</code>: 部署集群用的命令</li>\n<li><code>kubelet</code>: 在集群中每台机器上都要运行的组件，负责管理pod、容器的生命周期</li>\n<li><code>kubectl</code>: 集群管理工具（可选，只要在控制集群的节点上安装即可）</li>\n</ul>\n<p>添加<code>yum源</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt;EOF  sudo tee /etc/yum.repos.d/kubernetes.repo</span><br><span class=\"line\">[kubernetes]</span><br><span class=\"line\">name=Kubernetes</span><br><span class=\"line\">baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgcheck=0</span><br><span class=\"line\">repo_gpgcheck=0</span><br><span class=\"line\">gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span><br><span class=\"line\">       http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"># 找到要安装的版本号，目前最新为1.16.1</span><br><span class=\"line\">yum list kubeadm --showduplicates  sort -r</span><br><span class=\"line\"># 安装指定版本1.16.1</span><br><span class=\"line\">yum install -y kubeadm-1.16.1-0 kubelet-1.16.1-0 kubectl-1.16.1-0 --disableexcludes=kubernetes</span><br><span class=\"line\"></span><br><span class=\"line\"># 设置kubelet的cgroupdriver（kubelet的cgroupdriver默认为systemd，如果上面没有设置docker的exec-opts为systemd，这里就需要将kubelet的设置为cgroupfs）</span><br><span class=\"line\"># 这里我上面设置了docker的exec-opts为systemd，所以跳过这一步</span><br><span class=\"line\">sed -i &quot;s/cgroup-driver=systemd/cgroup-driver=cgroupfs/g&quot; /etc/systemd/system/kubelet.service.d/10-kubeadm.conf</span><br><span class=\"line\"></span><br><span class=\"line\"># 启动kubelet</span><br><span class=\"line\">systemctl enable kubelet &amp;&amp; systemctl start kubelet</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装HAProxy\"><a href=\"#安装HAProxy\" class=\"headerlink\" title=\"安装HAProxy\"></a>安装HAProxy</h2><p><code>haproxy</code>为<code>kube-apiserver</code>提供反向代理，<code>haproxy</code>将所有请求轮询转发到每个<code>master</code>节点上。相对于仅仅使用<code>keepalived</code>主备模式仅单个<code>master</code>节点承载流量，这种方式更加合理、健壮。 <strong>yum方式安装haproxy</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install -y haproxy</span><br></pre></td></tr></table></figure>\n\n<p><strong>编辑haproxy配置</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt;EOF  sudo tee /etc/haproxy/haproxy.cfg</span><br><span class=\"line\">#---------------------------------------------------------------------</span><br><span class=\"line\"># Global settings</span><br><span class=\"line\">#---------------------------------------------------------------------</span><br><span class=\"line\">global</span><br><span class=\"line\">    # to have these messages end up in /var/log/haproxy.log you will</span><br><span class=\"line\">    # need to:</span><br><span class=\"line\">    #</span><br><span class=\"line\">    # 1) configure syslog to accept network log events.  This is done</span><br><span class=\"line\">    #    by adding the &#x27;-r&#x27; option to the SYSLOGD_OPTIONS in</span><br><span class=\"line\">    #    /etc/sysconfig/syslog</span><br><span class=\"line\">    #</span><br><span class=\"line\">    # 2) configure local2 events to go to the /var/log/haproxy.log</span><br><span class=\"line\">    #   file. A line like the following can be added to</span><br><span class=\"line\">    #   /etc/sysconfig/syslog</span><br><span class=\"line\">    #</span><br><span class=\"line\">    #    local2.*                       /var/log/haproxy.log</span><br><span class=\"line\">    #</span><br><span class=\"line\">    log         127.0.0.1 local2</span><br><span class=\"line\"></span><br><span class=\"line\">    chroot      /var/lib/haproxy</span><br><span class=\"line\">    pidfile     /var/run/haproxy.pid</span><br><span class=\"line\">    maxconn     4000</span><br><span class=\"line\">    user        haproxy</span><br><span class=\"line\">    group       haproxy</span><br><span class=\"line\">    daemon</span><br><span class=\"line\"></span><br><span class=\"line\">    # turn on stats unix socket</span><br><span class=\"line\">    stats socket /var/lib/haproxy/stats</span><br><span class=\"line\"></span><br><span class=\"line\">#---------------------------------------------------------------------</span><br><span class=\"line\"># common defaults that all the &#x27;listen&#x27; and &#x27;backend&#x27; sections will</span><br><span class=\"line\"># use if not designated in their block</span><br><span class=\"line\">#---------------------------------------------------------------------</span><br><span class=\"line\">defaults</span><br><span class=\"line\">    mode                    http</span><br><span class=\"line\">    log                     global</span><br><span class=\"line\">    option                  httplog</span><br><span class=\"line\">    option                  dontlognull</span><br><span class=\"line\">    option http-server-close</span><br><span class=\"line\">    option forwardfor       except 127.0.0.0/8</span><br><span class=\"line\">    option                  redispatch</span><br><span class=\"line\">    retries                 3</span><br><span class=\"line\">    timeout http-request    10s</span><br><span class=\"line\">    timeout queue           1m</span><br><span class=\"line\">    timeout connect         10s</span><br><span class=\"line\">    timeout client          5m</span><br><span class=\"line\">    timeout server          1m</span><br><span class=\"line\">    timeout http-keep-alive 10s</span><br><span class=\"line\">    timeout check           10s</span><br><span class=\"line\">    maxconn                 3000</span><br><span class=\"line\"></span><br><span class=\"line\">#---------------------------------------------------------------------</span><br><span class=\"line\"># kubernetes apiserver frontend which proxys to the backends</span><br><span class=\"line\">#---------------------------------------------------------------------</span><br><span class=\"line\">frontend kubernetes-apiserver</span><br><span class=\"line\">    mode                 tcp</span><br><span class=\"line\">    bind                 *:16443</span><br><span class=\"line\">    option               tcplog</span><br><span class=\"line\">    default_backend      kubernetes-apiserver</span><br><span class=\"line\"></span><br><span class=\"line\">#---------------------------------------------------------------------</span><br><span class=\"line\"># round robin balancing between the various backends</span><br><span class=\"line\">#---------------------------------------------------------------------</span><br><span class=\"line\">backend kubernetes-apiserver</span><br><span class=\"line\">    mode        tcp</span><br><span class=\"line\">    balance     roundrobin</span><br><span class=\"line\">    server  k8s-master-01 10.158.1.7:6443 check</span><br><span class=\"line\">    server  k8s-master-02 10.158.1.8:6443 check</span><br><span class=\"line\">    server  k8s-master-03 10.158.1.9:6443 check</span><br><span class=\"line\"></span><br><span class=\"line\">#---------------------------------------------------------------------</span><br><span class=\"line\"># collection haproxy statistics message</span><br><span class=\"line\">#---------------------------------------------------------------------</span><br><span class=\"line\">listen stats</span><br><span class=\"line\">    bind                 *:1080</span><br><span class=\"line\">    stats auth           admin:awesomePassword</span><br><span class=\"line\">    stats refresh        5s</span><br><span class=\"line\">    stats realm          HAProxy\\ Statistics</span><br><span class=\"line\">    stats uri            /admin?stats</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<p><strong>启动并检测</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl enable haproxy.service </span><br><span class=\"line\">systemctl start haproxy.service </span><br><span class=\"line\">systemctl status haproxy.service </span><br><span class=\"line\">ss -lnt  grep -E &quot;164431080&quot;</span><br><span class=\"line\">LISTEN     0      128          *:1080                     *:*                  </span><br><span class=\"line\">LISTEN     0      128          *:16443                    *:*</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"kubeadm-init指令初始化\"><a href=\"#kubeadm-init指令初始化\" class=\"headerlink\" title=\"kubeadm init指令初始化\"></a>kubeadm init指令初始化</h2><p><code>config.yaml</code>文件如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">apiVersion: kubeadm.k8s.io/v1beta2</span><br><span class=\"line\">kind: ClusterConfiguration</span><br><span class=\"line\">kubernetesVersion: v1.16.1</span><br><span class=\"line\">apiServer:</span><br><span class=\"line\">  certSANs:</span><br><span class=\"line\">  - 10.158.1.9</span><br><span class=\"line\">  - 127.0.0.1</span><br><span class=\"line\">controlPlaneEndpoint: &quot;10.158.1.9:16443&quot;</span><br><span class=\"line\">etcd:</span><br><span class=\"line\">  external:</span><br><span class=\"line\">    endpoints:</span><br><span class=\"line\">    - https://10.158.1.9:2379</span><br><span class=\"line\">    - https://10.158.1.8:2379</span><br><span class=\"line\">    - https://10.158.1.7:2379</span><br><span class=\"line\">    caFile: /etc/etcd/ca.pem</span><br><span class=\"line\">    certFile: /etc/etcd/kubernetes.pem</span><br><span class=\"line\">    keyFile: /etc/etcd/kubernetes-key.pem</span><br><span class=\"line\">networking:</span><br><span class=\"line\">  podSubnet: 10.244.0.0/16</span><br><span class=\"line\">imageRepository: registry.aliyuncs.com/google_containers</span><br><span class=\"line\">apiServerExtraArgs:</span><br><span class=\"line\">  apiserver-count: &quot;3&quot;</span><br></pre></td></tr></table></figure>\n\n<p>初始化第一个master节点</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo kubeadm init --config config.yaml --v=5 --ignore-preflight-errors=all </span><br></pre></td></tr></table></figure>\n\n<p>安装成功输出大概如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Your Kubernetes control-plane has initialized successfully!</span><br><span class=\"line\"></span><br><span class=\"line\">To start using your cluster, you need to run the following as a regular user:</span><br><span class=\"line\"></span><br><span class=\"line\">  mkdir -p $HOME/.kube</span><br><span class=\"line\">  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class=\"line\">  sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br><span class=\"line\"></span><br><span class=\"line\">You should now deploy a pod network to the cluster.</span><br><span class=\"line\">Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:</span><br><span class=\"line\">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class=\"line\"></span><br><span class=\"line\">You can now join any number of control-plane nodes by copying certificate authorities </span><br><span class=\"line\">and service account keys on each node and then running the following as root:</span><br><span class=\"line\"></span><br><span class=\"line\">  kubeadm join 10.158.1.9:16443 --token xxxx \\</span><br><span class=\"line\">    --discovery-token-ca-cert-hash xxx \\</span><br><span class=\"line\">    --control-plane       </span><br><span class=\"line\"></span><br><span class=\"line\">Then you can join any number of worker nodes by running the following on each as root:</span><br><span class=\"line\"></span><br><span class=\"line\">kubeadm join 10.158.1.9:16443 --token xxx \\</span><br><span class=\"line\">    --discovery-token-ca-cert-hash xxxx </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装网络插件flannel\"><a href=\"#安装网络插件flannel\" class=\"headerlink\" title=\"安装网络插件flannel\"></a>安装网络插件flannel</h2><p>配置文件如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt;EOF  sudo tee kube-flannel.yaml</span><br><span class=\"line\">---</span><br><span class=\"line\">kind: ClusterRole</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1beta1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: flannel</span><br><span class=\"line\">rules:</span><br><span class=\"line\">  - apiGroups:</span><br><span class=\"line\">      - &quot;&quot;</span><br><span class=\"line\">    resources:</span><br><span class=\"line\">      - pods</span><br><span class=\"line\">    verbs:</span><br><span class=\"line\">      - get</span><br><span class=\"line\">  - apiGroups:</span><br><span class=\"line\">      - &quot;&quot;</span><br><span class=\"line\">    resources:</span><br><span class=\"line\">      - nodes</span><br><span class=\"line\">    verbs:</span><br><span class=\"line\">      - list</span><br><span class=\"line\">      - watch</span><br><span class=\"line\">  - apiGroups:</span><br><span class=\"line\">      - &quot;&quot;</span><br><span class=\"line\">    resources:</span><br><span class=\"line\">      - nodes/status</span><br><span class=\"line\">    verbs:</span><br><span class=\"line\">      - patch</span><br><span class=\"line\">---</span><br><span class=\"line\">kind: ClusterRoleBinding</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1beta1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: flannel</span><br><span class=\"line\">roleRef:</span><br><span class=\"line\">  apiGroup: rbac.authorization.k8s.io</span><br><span class=\"line\">  kind: ClusterRole</span><br><span class=\"line\">  name: flannel</span><br><span class=\"line\">subjects:</span><br><span class=\"line\">- kind: ServiceAccount</span><br><span class=\"line\">  name: flannel</span><br><span class=\"line\">  namespace: kube-system</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: ServiceAccount</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: flannel</span><br><span class=\"line\">  namespace: kube-system</span><br><span class=\"line\">---</span><br><span class=\"line\">kind: ConfigMap</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: kube-flannel-cfg</span><br><span class=\"line\">  namespace: kube-system</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    tier: node</span><br><span class=\"line\">    app: flannel</span><br><span class=\"line\">data:</span><br><span class=\"line\">  cni-conf.json: </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;name&quot;: &quot;cbr0&quot;,</span><br><span class=\"line\">      &quot;plugins&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          &quot;type&quot;: &quot;flannel&quot;,</span><br><span class=\"line\">          &quot;delegate&quot;: &#123;</span><br><span class=\"line\">            &quot;hairpinMode&quot;: true,</span><br><span class=\"line\">            &quot;isDefaultGateway&quot;: true</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          &quot;type&quot;: &quot;portmap&quot;,</span><br><span class=\"line\">          &quot;capabilities&quot;: &#123;</span><br><span class=\"line\">            &quot;portMappings&quot;: true</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  net-conf.json: </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;Network&quot;: &quot;10.244.0.0/16&quot;,</span><br><span class=\"line\">      &quot;Backend&quot;: &#123;</span><br><span class=\"line\">        &quot;Type&quot;: &quot;vxlan&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: extensions/v1beta1</span><br><span class=\"line\">kind: DaemonSet</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: kube-flannel-ds-amd64</span><br><span class=\"line\">  namespace: kube-system</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    tier: node</span><br><span class=\"line\">    app: flannel</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  template:</span><br><span class=\"line\">    metadata:</span><br><span class=\"line\">      labels:</span><br><span class=\"line\">        tier: node</span><br><span class=\"line\">        app: flannel</span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      hostNetwork: true</span><br><span class=\"line\">      nodeSelector:</span><br><span class=\"line\">        beta.kubernetes.io/arch: amd64</span><br><span class=\"line\">      tolerations:</span><br><span class=\"line\">      - operator: Exists</span><br><span class=\"line\">        effect: NoSchedule</span><br><span class=\"line\">      serviceAccountName: flannel</span><br><span class=\"line\">      initContainers:</span><br><span class=\"line\">      - name: install-cni</span><br><span class=\"line\">        image: registry.cn-shenzhen.aliyuncs.com/cp_m/flannel:v0.10.0-amd64</span><br><span class=\"line\">        command:</span><br><span class=\"line\">        - cp</span><br><span class=\"line\">        args:</span><br><span class=\"line\">        - -f</span><br><span class=\"line\">        - /etc/kube-flannel/cni-conf.json</span><br><span class=\"line\">        - /etc/cni/net.d/10-flannel.conflist</span><br><span class=\"line\">        volumeMounts:</span><br><span class=\"line\">        - name: cni</span><br><span class=\"line\">          mountPath: /etc/cni/net.d</span><br><span class=\"line\">        - name: flannel-cfg</span><br><span class=\"line\">          mountPath: /etc/kube-flannel/</span><br><span class=\"line\">      containers:</span><br><span class=\"line\">      - name: kube-flannel</span><br><span class=\"line\">        image: registry.cn-shenzhen.aliyuncs.com/cp_m/flannel:v0.10.0-amd64</span><br><span class=\"line\">        command:</span><br><span class=\"line\">        - /opt/bin/flanneld</span><br><span class=\"line\">        args:</span><br><span class=\"line\">        - --ip-masq</span><br><span class=\"line\">        - --kube-subnet-mgr</span><br><span class=\"line\">        resources:</span><br><span class=\"line\">          requests:</span><br><span class=\"line\">            cpu: &quot;100m&quot;</span><br><span class=\"line\">            memory: &quot;50Mi&quot;</span><br><span class=\"line\">          limits:</span><br><span class=\"line\">            cpu: &quot;100m&quot;</span><br><span class=\"line\">            memory: &quot;50Mi&quot;</span><br><span class=\"line\">        securityContext:</span><br><span class=\"line\">          privileged: true</span><br><span class=\"line\">        env:</span><br><span class=\"line\">        - name: POD_NAME</span><br><span class=\"line\">          valueFrom:</span><br><span class=\"line\">            fieldRef:</span><br><span class=\"line\">              fieldPath: metadata.name</span><br><span class=\"line\">        - name: POD_NAMESPACE</span><br><span class=\"line\">          valueFrom:</span><br><span class=\"line\">            fieldRef:</span><br><span class=\"line\">              fieldPath: metadata.namespace</span><br><span class=\"line\">        volumeMounts:</span><br><span class=\"line\">        - name: run</span><br><span class=\"line\">          mountPath: /run</span><br><span class=\"line\">        - name: flannel-cfg</span><br><span class=\"line\">          mountPath: /etc/kube-flannel/</span><br><span class=\"line\">      volumes:</span><br><span class=\"line\">        - name: run</span><br><span class=\"line\">          hostPath:</span><br><span class=\"line\">            path: /run</span><br><span class=\"line\">        - name: cni</span><br><span class=\"line\">          hostPath:</span><br><span class=\"line\">            path: /etc/cni/net.d</span><br><span class=\"line\">        - name: flannel-cfg</span><br><span class=\"line\">          configMap:</span><br><span class=\"line\">            name: kube-flannel-cfg</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<p>安装指令如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl apply -f kube-flannel.yaml</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>“Network”: “10.244.0.0&#x2F;16”要和kubeadm-config.yaml配置文件中podSubnet: 10.244.0.0&#x2F;16相同</p>\n</blockquote>\n<h2 id=\"k8s-master-01和k8s-master-02节点准备证书\"><a href=\"#k8s-master-01和k8s-master-02节点准备证书\" class=\"headerlink\" title=\"k8s-master-01和k8s-master-02节点准备证书\"></a>k8s-master-01和k8s-master-02节点准备证书</h2><p>在两个节点分别创建<code>/etc/kubernetes/pki/etcd</code>目录</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir -p /etc/kubernetes/pki/etcd</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">scp /etc/kubernetes/admin.conf it@k8s-master-02:/etc/kubernetes</span><br><span class=\"line\"></span><br><span class=\"line\">scp /etc/kubernetes/pki/&#123;ca.*,sa.*,front-proxy-ca.*&#125; it@k8s-master-02:/etc/kubernetes/pki</span><br><span class=\"line\"></span><br><span class=\"line\">scp /etc/kubernetes/pki/etcd/ca.* it@k8s-master-02:/etc/kubernetes/pki/etcd</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动k8s-master-01和k8s-master-02\"><a href=\"#启动k8s-master-01和k8s-master-02\" class=\"headerlink\" title=\"启动k8s-master-01和k8s-master-02\"></a>启动k8s-master-01和k8s-master-02</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo kubeadm join 10.158.1.9:16443 --token xxxx \\</span><br><span class=\"line\">    --discovery-token-ca-cert-hash xxxx \\</span><br><span class=\"line\">    --control-plane --v=5 --ignore-preflight-errors=all</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动k8s-worker节点\"><a href=\"#启动k8s-worker节点\" class=\"headerlink\" title=\"启动k8s-worker节点\"></a>启动k8s-worker节点</h2><p>在五个Worker节点分别运行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo kubeadm join 10.158.1.9:16443 --token xxx \\</span><br><span class=\"line\">    --discovery-token-ca-cert-hash xxxxx --v=5 --ignore-preflight-errors=all</span><br></pre></td></tr></table></figure>","categories":["skills"],"tags":["运维","教程","k8s"]},{"title":"Etcd集群安装-3.4.3","url":"/2021/01/18/etcd%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85-3-4-3/","content":"<h2 id=\"集群机器列表\"><a href=\"#集群机器列表\" class=\"headerlink\" title=\"集群机器列表\"></a>集群机器列表</h2><p>IP地址</p>\n<p>hostname</p>\n<p>10.158.1.9</p>\n<p>k8s-master-03</p>\n<p>10.158.1.8</p>\n<p>k8s-master-02</p>\n<p>10.158.1.7</p>\n<p>k8s-master-01</p>\n<p>分别在三台机器上，执行如下操作</p>\n<span id=\"more\"></span>\n<h2 id=\"1-配置CA证书\"><a href=\"#1-配置CA证书\" class=\"headerlink\" title=\"1.配置CA证书\"></a>1.配置CA证书</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo mkdir /etc/etcd /var/lib/etcd</span><br><span class=\"line\">sudo mv ca.pem kubernetes.pem kubernetes-key.pem /etc/etcd</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>sudo rm -rf &#x2F;etc&#x2F;etcd &#x2F;var&#x2F;lib&#x2F;etcd</p>\n</blockquote>\n<h2 id=\"2-下载Etcd二进制安装包\"><a href=\"#2-下载Etcd二进制安装包\" class=\"headerlink\" title=\"2.下载Etcd二进制安装包\"></a>2.下载Etcd二进制安装包</h2><p>我们安装的<code>Etcd</code>版本是<code>v3.4.300</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget https://github.com/etcd-io/etcd/releases/download/v3.4.3/etcd-v3.4.3-linux-amd64.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p>解压并把<code>Etcd</code>二进制包拷贝到<code>/usr/local/bin</code>目录下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">tar xvzf etcd-v3.4.3-linux-amd64.tar.gz</span><br><span class=\"line\">sudo mv etcd-v3.4.3-linux-amd64/etcd* /usr/local/bin/</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-创建etcd-service\"><a href=\"#3-创建etcd-service\" class=\"headerlink\" title=\"3.创建etcd.service\"></a>3.创建etcd.service</h2><p>分别在<code>k8s-master-03, k8s-master-02, k8s-master-01</code>三台机器上生成systemd配置文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">INTERNAL_IP=10.158.1.9</span><br><span class=\"line\">ETCD_NAME=k8s-master-03</span><br><span class=\"line\"></span><br><span class=\"line\">INTERNAL_IP=10.158.1.8</span><br><span class=\"line\">ETCD_NAME=k8s-master-02</span><br><span class=\"line\"></span><br><span class=\"line\">INTERNAL_IP=10.158.1.7</span><br><span class=\"line\">ETCD_NAME=k8s-master-01</span><br><span class=\"line\"></span><br><span class=\"line\">cat &lt;&lt;EOF  sudo tee /etc/systemd/system/etcd.service</span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=etcd</span><br><span class=\"line\">Documentation=https://github.com/coreos</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=notify</span><br><span class=\"line\">ExecStart=/usr/local/bin/etcd \\\\</span><br><span class=\"line\">  --name $&#123;ETCD_NAME&#125; \\\\</span><br><span class=\"line\">  --cert-file=/etc/etcd/kubernetes.pem \\\\</span><br><span class=\"line\">  --key-file=/etc/etcd/kubernetes-key.pem \\\\</span><br><span class=\"line\">  --peer-cert-file=/etc/etcd/kubernetes.pem \\\\</span><br><span class=\"line\">  --peer-key-file=/etc/etcd/kubernetes-key.pem \\\\</span><br><span class=\"line\">  --trusted-ca-file=/etc/etcd/ca.pem \\\\</span><br><span class=\"line\">  --peer-trusted-ca-file=/etc/etcd/ca.pem \\\\</span><br><span class=\"line\">  --peer-client-cert-auth \\\\</span><br><span class=\"line\">  --client-cert-auth \\\\</span><br><span class=\"line\">  --initial-advertise-peer-urls https://$&#123;INTERNAL_IP&#125;:2380 \\\\</span><br><span class=\"line\">  --listen-peer-urls https://$&#123;INTERNAL_IP&#125;:2380 \\\\</span><br><span class=\"line\">  --listen-client-urls https://$&#123;INTERNAL_IP&#125;:2379,https://127.0.0.1:2379 \\\\</span><br><span class=\"line\">  --advertise-client-urls https://$&#123;INTERNAL_IP&#125;:2379 \\\\</span><br><span class=\"line\">  --initial-cluster-token etcd-cluster-0 \\\\</span><br><span class=\"line\">  --initial-cluster k8s-master-03=https://10.158.1.9:2380,k8s-master-02=https://10.158.1.8:2380,k8s-master-01=https://10.158.1.7:2380 \\\\</span><br><span class=\"line\">  --initial-cluster-state new \\\\</span><br><span class=\"line\">  --data-dir=/var/lib/etcd</span><br><span class=\"line\">Restart=on-failure</span><br><span class=\"line\">RestartSec=5</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<p>不需要认证的<code>etcd</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">INTERNAL_IP=10.158.1.7</span><br><span class=\"line\">ETCD_NAME=k8s-master-01</span><br><span class=\"line\"></span><br><span class=\"line\">INTERNAL_IP=10.158.1.8</span><br><span class=\"line\">ETCD_NAME=k8s-master-02</span><br><span class=\"line\"></span><br><span class=\"line\">INTERNAL_IP=10.158.1.9</span><br><span class=\"line\">ETCD_NAME=k8s-master-03</span><br><span class=\"line\"></span><br><span class=\"line\">cat &lt;&lt;EOF  sudo tee /etc/systemd/system/etcd.service</span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=etcd key-value store</span><br><span class=\"line\">Documentation=https://github.com/coreos/etcd</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=notify</span><br><span class=\"line\">ExecStart=/usr/local/bin/etcd \\\\</span><br><span class=\"line\"> --name $&#123;ETCD_NAME&#125; \\\\</span><br><span class=\"line\"> --data-dir /var/lib/etcd \\\\</span><br><span class=\"line\"> --initial-advertise-peer-urls http://$&#123;INTERNAL_IP&#125;:2380 \\\\</span><br><span class=\"line\"> --listen-peer-urls http://$&#123;INTERNAL_IP&#125;:2380 \\\\</span><br><span class=\"line\"> --listen-client-urls http://$&#123;INTERNAL_IP&#125;:2379,http://127.0.0.1:2379,http://$&#123;INTERNAL_IP&#125;:4001 \\\\</span><br><span class=\"line\"> --advertise-client-urls http://$&#123;INTERNAL_IP&#125;:2379,http://$&#123;INTERNAL_IP&#125;:4001 \\\\</span><br><span class=\"line\"> --initial-cluster-token etcd-cluster-0 \\\\</span><br><span class=\"line\"> --initial-cluster k8s-master-03=https://10.158.1.9:2380,k8s-master-02=https://10.158.1.8:2380,k8s-master-01=https://10.158.1.7:2380 \\\\</span><br><span class=\"line\"> --initial-cluster-state new \\\\</span><br><span class=\"line\"> --heartbeat-interval 1000 \\\\</span><br><span class=\"line\"> --election-timeout 5000</span><br><span class=\"line\">Restart=on-failure</span><br><span class=\"line\">RestartSec=5</span><br><span class=\"line\">LimitNOFILE=40000</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-启动和检测Etcd服务是否正常\"><a href=\"#4-启动和检测Etcd服务是否正常\" class=\"headerlink\" title=\"4.启动和检测Etcd服务是否正常\"></a>4.启动和检测Etcd服务是否正常</h2><p>启动服务</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl enable etcd</span><br><span class=\"line\">sudo systemctl start etcd</span><br><span class=\"line\">sudo systemctl status etcd  </span><br></pre></td></tr></table></figure>\n\n<p>查看集群节点</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo ETCDCTL_API=3 etcdctl member list \\</span><br><span class=\"line\">  --endpoints=https://127.0.0.1:2379 \\</span><br><span class=\"line\">  --cacert=/etc/etcd/ca.pem \\</span><br><span class=\"line\">  --cert=/etc/etcd/kubernetes.pem \\</span><br><span class=\"line\">  --key=/etc/etcd/kubernetes-key.pem</span><br></pre></td></tr></table></figure>\n\n<p>插入一个值看看能否成功</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo ETCDCTL_API=3 etcdctl put /dev/key v1 \\</span><br><span class=\"line\">  --endpoints=https://127.0.0.1:2379 \\</span><br><span class=\"line\">  --cacert=/etc/etcd/ca.pem \\</span><br><span class=\"line\">  --cert=/etc/etcd/kubernetes.pem \\</span><br><span class=\"line\">  --key=/etc/etcd/kubernetes-key.pem</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo ETCDCTL_API=3 etcdctl cluster-health \\</span><br><span class=\"line\">  --endpoints=https://127.0.0.1:2379 \\</span><br><span class=\"line\">  --cacert=/etc/etcd/ca.pem \\</span><br><span class=\"line\">  --cert=/etc/etcd/kubernetes.pem \\</span><br><span class=\"line\">  --key=/etc/etcd/kubernetes-key.pem</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常见安装问题\"><a href=\"#常见安装问题\" class=\"headerlink\" title=\"常见安装问题\"></a>常见安装问题</h2>","categories":["skills"],"tags":["运维","k8s","Etcd"]},{"title":"基于 kubernetes 的分布式构建平台","url":"/2021/01/18/%E5%9F%BA%E4%BA%8E-kubernetes-%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%84%E5%BB%BA%E5%B9%B3%E5%8F%B0/","content":"<h2 id=\"分布式构建系统架构\"><a href=\"#分布式构建系统架构\" class=\"headerlink\" title=\"分布式构建系统架构\"></a>分布式构建系统架构</h2><p>一个是<code>Jenkins</code>，一个流行的持续集成&#x2F;发布的工具，另一个是<code>Kubernetes</code>，一个流行的容器编排引擎。持续构建与发布是我们日常工作中必不可少的一个步骤，目前大多公司都采用 Jenkins 集群来搭建符合需求的 CI&#x2F;CD 流程，然而传统的 Jenkins Slave 一主多从方式会存在一些痛点: 1. 主 Master 发生单点故障时，整个流程都不可用了； 1. 每个 Slave 的配置环境不一样，来完成不同语言的编译打包等操作，但是这些差异化的配置导致管理起来非常不方便，维护起来也是比较费劲； 1. 资源分配不均衡，有的 Slave要运行的job出现排队等待，而有Slave处于空闲状态；最后资源有浪费，每台 Slave 可能是实体机或者VM，当Slave处于空闲状态时，也不会完全释放掉资源。 针对这些痛点，我们引入了<code>kubernetes-plugin插件</code></p>\n<span id=\"more\"></span>\n<h4 id=\"kubernetes-plugin插件使用\"><a href=\"#kubernetes-plugin插件使用\" class=\"headerlink\" title=\"kubernetes-plugin插件使用\"></a>kubernetes-plugin插件使用</h4><p><img src=\"https://www.kubernetes.org.cn/img/2017/10/20171025111340.jpg\" alt=\"image\"></p>\n<ol>\n<li><strong>服务高可用</strong>，当 Jenkins Master 出现故障时，Kubernetes 会自动创建一个新的 Jenkins Master 容器，并且将 Volume 分配给新创建的容器，保证数据不丢失，从而达到集群服务高可用。</li>\n<li><strong>动态伸缩，合理使用资源</strong>，每次运行 Job 时，会自动创建一个 Jenkins Slave，Job 完成后，Slave 自动注销并删除容器，资源自动释放，而且 Kubernetes 会根据每个资源的使用情况，动态分配 Slave 到空闲的节点上创建，降低出现因某节点资源利用率高，还排队等待在该节点的情况。</li>\n<li><strong>扩展性好</strong>，当 Kubernetes 集群的资源严重不足而导致 Job 排队等待时，可以很容易的添加一个 Kubernetes Node 到集群中，从而实现扩展。</li>\n</ol>\n<h2 id=\"搭建Kuberntes集群\"><a href=\"#搭建Kuberntes集群\" class=\"headerlink\" title=\"搭建Kuberntes集群\"></a>搭建Kuberntes集群</h2><p>kubeadm进行搭建</p>\n<h2 id=\"搭建Jenkins集群\"><a href=\"#搭建Jenkins集群\" class=\"headerlink\" title=\"搭建Jenkins集群\"></a>搭建Jenkins集群</h2><p>kubernetes集群搭建好了以后，可以通过kubectl进行远程安装。具体的安装的<code>yaml</code>文件如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">--- yaml</span><br><span class=\"line\">apiVersion: extensions/v1beta1</span><br><span class=\"line\">kind: Deployment</span><br><span class=\"line\">metadata:</span><br><span class=\"line\"> name: jenkins-dev</span><br><span class=\"line\">spec:</span><br><span class=\"line\"> replicas: 1</span><br><span class=\"line\"> template:</span><br><span class=\"line\">  metadata:</span><br><span class=\"line\">   labels:</span><br><span class=\"line\">    app: jenkins-dev-test</span><br><span class=\"line\">  spec:</span><br><span class=\"line\">   securityContext:</span><br><span class=\"line\">     fsGroup: 1000</span><br><span class=\"line\">     runAsUser: 0</span><br><span class=\"line\">   containers:</span><br><span class=\"line\">   - name: jenkins</span><br><span class=\"line\">     imagePullPolicy: IfNotPresent</span><br><span class=\"line\">     image: jenkins/jenkins:lts</span><br><span class=\"line\">     ports:</span><br><span class=\"line\">     - containerPort: 8080</span><br><span class=\"line\">     volumeMounts:  </span><br><span class=\"line\">       - mountPath: /var/jenkins_home</span><br><span class=\"line\">         name: jenkins-home </span><br><span class=\"line\">   volumes: </span><br><span class=\"line\">     - name: jenkins-home</span><br><span class=\"line\">       persistentVolumeClaim: </span><br><span class=\"line\">         claimName: jenkins-claim</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Service</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: jenkins-dev</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  # type: LoadBalancer</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    app: jenkins-dev-test</span><br><span class=\"line\">  # ensure the client ip is propagated to avoid the invalid crumb issue when using LoadBalancer (k8s &gt;=1.7)</span><br><span class=\"line\">  #externalTrafficPolicy: Local</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">    - port: 8080</span><br><span class=\"line\">      name: web</span><br><span class=\"line\">      targetPort: 8080</span><br><span class=\"line\">    - port: 50000</span><br><span class=\"line\">      name: agent</span><br><span class=\"line\">      targetPort: 50000</span><br></pre></td></tr></table></figure>\n\n<p>把jenkins的工作目录<code>/var/jenkins_home</code>挂载到了openebs管理的硬盘上。</p>\n<h2 id=\"构建镜像环境准备\"><a href=\"#构建镜像环境准备\" class=\"headerlink\" title=\"构建镜像环境准备\"></a>构建镜像环境准备</h2><p>Maven的DockerInDocker镜像dockerfile</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">FROM cnych/jenkins:jnlp6</span><br><span class=\"line\">MAINTAINER Stanley Huang &lt;xinyu.huang02@liulishuo.com&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">USER root</span><br><span class=\"line\">RUN apt-get update &amp;&amp; apt-get install -y libltdl7.*</span><br><span class=\"line\">RUN apt-get install maven -y</span><br></pre></td></tr></table></figure>\n\n<p>Gradle的DockerInDockerDockerfile</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">FROM cnych/jenkins:jnlp6</span><br><span class=\"line\">MAINTAINER Stanley Huang &lt;xinyu.huang02@liulishuo.com&gt;</span><br><span class=\"line\">ARG GRADLE_VERSION=5.6.1</span><br><span class=\"line\"></span><br><span class=\"line\">USER root</span><br><span class=\"line\">RUN apt-get update &amp;&amp; apt-get install -y libltdl7.*</span><br><span class=\"line\">RUN apt-get install maven -y</span><br><span class=\"line\"></span><br><span class=\"line\">WORKDIR /usr/bin</span><br><span class=\"line\"></span><br><span class=\"line\">RUN \\</span><br><span class=\"line\">  curl -sLO https://services.gradle.org/distributions/gradle-$&#123;GRADLE_VERSION&#125;-all.zip &amp;&amp; \\</span><br><span class=\"line\">  unzip gradle-$&#123;GRADLE_VERSION&#125;-all.zip &amp;&amp; \\</span><br><span class=\"line\">  ln -s gradle-$&#123;GRADLE_VERSION&#125; gradle &amp;&amp; \\</span><br><span class=\"line\">  rm gradle-$&#123;GRADLE_VERSION&#125;-all.zip</span><br><span class=\"line\"></span><br><span class=\"line\">ENV GRADLE_HOME /usr/bin/gradle</span><br><span class=\"line\">ENV PATH $PATH:$GRADLE_HOME/bin</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置Ingress和域名\"><a href=\"#配置Ingress和域名\" class=\"headerlink\" title=\"配置Ingress和域名\"></a>配置Ingress和域名</h2><p>Ingress是授权入站连接到达集群服务的规则集合。</p>\n<ol>\n<li>从外部流量调度到nodeprot上的service</li>\n<li>从service调度到ingress-controller</li>\n<li>ingress-controller根据ingress中的定义（虚拟主机或者后端的url）</li>\n<li>根据虚拟主机名调度到后端的一组pod中</li>\n</ol>\n<p>安装<code>ingress-nginx</code>, 官方文档如下，可以直接在k8s集群安装：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Namespace</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: ingress-nginx</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app.kubernetes.io/name: ingress-nginx</span><br><span class=\"line\">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">kind: ConfigMap</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: nginx-configuration</span><br><span class=\"line\">  namespace: ingress-nginx</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app.kubernetes.io/name: ingress-nginx</span><br><span class=\"line\">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">kind: ConfigMap</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: tcp-services</span><br><span class=\"line\">  namespace: ingress-nginx</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app.kubernetes.io/name: ingress-nginx</span><br><span class=\"line\">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">kind: ConfigMap</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: udp-services</span><br><span class=\"line\">  namespace: ingress-nginx</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app.kubernetes.io/name: ingress-nginx</span><br><span class=\"line\">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: ServiceAccount</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: nginx-ingress-serviceaccount</span><br><span class=\"line\">  namespace: ingress-nginx</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app.kubernetes.io/name: ingress-nginx</span><br><span class=\"line\">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1beta1</span><br><span class=\"line\">kind: ClusterRole</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: nginx-ingress-clusterrole</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app.kubernetes.io/name: ingress-nginx</span><br><span class=\"line\">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class=\"line\">rules:</span><br><span class=\"line\">  - apiGroups:</span><br><span class=\"line\">      - &quot;&quot;</span><br><span class=\"line\">    resources:</span><br><span class=\"line\">      - configmaps</span><br><span class=\"line\">      - endpoints</span><br><span class=\"line\">      - nodes</span><br><span class=\"line\">      - pods</span><br><span class=\"line\">      - secrets</span><br><span class=\"line\">    verbs:</span><br><span class=\"line\">      - list</span><br><span class=\"line\">      - watch</span><br><span class=\"line\">  - apiGroups:</span><br><span class=\"line\">      - &quot;&quot;</span><br><span class=\"line\">    resources:</span><br><span class=\"line\">      - nodes</span><br><span class=\"line\">    verbs:</span><br><span class=\"line\">      - get</span><br><span class=\"line\">  - apiGroups:</span><br><span class=\"line\">      - &quot;&quot;</span><br><span class=\"line\">    resources:</span><br><span class=\"line\">      - services</span><br><span class=\"line\">    verbs:</span><br><span class=\"line\">      - get</span><br><span class=\"line\">      - list</span><br><span class=\"line\">      - watch</span><br><span class=\"line\">  - apiGroups:</span><br><span class=\"line\">      - &quot;&quot;</span><br><span class=\"line\">    resources:</span><br><span class=\"line\">      - events</span><br><span class=\"line\">    verbs:</span><br><span class=\"line\">      - create</span><br><span class=\"line\">      - patch</span><br><span class=\"line\">  - apiGroups:</span><br><span class=\"line\">      - &quot;extensions&quot;</span><br><span class=\"line\">      - &quot;networking.k8s.io&quot;</span><br><span class=\"line\">    resources:</span><br><span class=\"line\">      - ingresses</span><br><span class=\"line\">    verbs:</span><br><span class=\"line\">      - get</span><br><span class=\"line\">      - list</span><br><span class=\"line\">      - watch</span><br><span class=\"line\">  - apiGroups:</span><br><span class=\"line\">      - &quot;extensions&quot;</span><br><span class=\"line\">      - &quot;networking.k8s.io&quot;</span><br><span class=\"line\">    resources:</span><br><span class=\"line\">      - ingresses/status</span><br><span class=\"line\">    verbs:</span><br><span class=\"line\">      - update</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1beta1</span><br><span class=\"line\">kind: Role</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: nginx-ingress-role</span><br><span class=\"line\">  namespace: ingress-nginx</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app.kubernetes.io/name: ingress-nginx</span><br><span class=\"line\">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class=\"line\">rules:</span><br><span class=\"line\">  - apiGroups:</span><br><span class=\"line\">      - &quot;&quot;</span><br><span class=\"line\">    resources:</span><br><span class=\"line\">      - configmaps</span><br><span class=\"line\">      - pods</span><br><span class=\"line\">      - secrets</span><br><span class=\"line\">      - namespaces</span><br><span class=\"line\">    verbs:</span><br><span class=\"line\">      - get</span><br><span class=\"line\">  - apiGroups:</span><br><span class=\"line\">      - &quot;&quot;</span><br><span class=\"line\">    resources:</span><br><span class=\"line\">      - configmaps</span><br><span class=\"line\">    resourceNames:</span><br><span class=\"line\">      # Defaults to &quot;&lt;election-id&gt;-&lt;ingress-class&gt;&quot;</span><br><span class=\"line\">      # Here: &quot;&lt;ingress-controller-leader&gt;-&lt;nginx&gt;&quot;</span><br><span class=\"line\">      # This has to be adapted if you change either parameter</span><br><span class=\"line\">      # when launching the nginx-ingress-controller.</span><br><span class=\"line\">      - &quot;ingress-controller-leader-nginx&quot;</span><br><span class=\"line\">    verbs:</span><br><span class=\"line\">      - get</span><br><span class=\"line\">      - update</span><br><span class=\"line\">  - apiGroups:</span><br><span class=\"line\">      - &quot;&quot;</span><br><span class=\"line\">    resources:</span><br><span class=\"line\">      - configmaps</span><br><span class=\"line\">    verbs:</span><br><span class=\"line\">      - create</span><br><span class=\"line\">  - apiGroups:</span><br><span class=\"line\">      - &quot;&quot;</span><br><span class=\"line\">    resources:</span><br><span class=\"line\">      - endpoints</span><br><span class=\"line\">    verbs:</span><br><span class=\"line\">      - get</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1beta1</span><br><span class=\"line\">kind: RoleBinding</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: nginx-ingress-role-nisa-binding</span><br><span class=\"line\">  namespace: ingress-nginx</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app.kubernetes.io/name: ingress-nginx</span><br><span class=\"line\">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class=\"line\">roleRef:</span><br><span class=\"line\">  apiGroup: rbac.authorization.k8s.io</span><br><span class=\"line\">  kind: Role</span><br><span class=\"line\">  name: nginx-ingress-role</span><br><span class=\"line\">subjects:</span><br><span class=\"line\">  - kind: ServiceAccount</span><br><span class=\"line\">    name: nginx-ingress-serviceaccount</span><br><span class=\"line\">    namespace: ingress-nginx</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1beta1</span><br><span class=\"line\">kind: ClusterRoleBinding</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: nginx-ingress-clusterrole-nisa-binding</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app.kubernetes.io/name: ingress-nginx</span><br><span class=\"line\">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class=\"line\">roleRef:</span><br><span class=\"line\">  apiGroup: rbac.authorization.k8s.io</span><br><span class=\"line\">  kind: ClusterRole</span><br><span class=\"line\">  name: nginx-ingress-clusterrole</span><br><span class=\"line\">subjects:</span><br><span class=\"line\">  - kind: ServiceAccount</span><br><span class=\"line\">    name: nginx-ingress-serviceaccount</span><br><span class=\"line\">    namespace: ingress-nginx</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">apiVersion: apps/v1</span><br><span class=\"line\">kind: Deployment</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: nginx-ingress-controller</span><br><span class=\"line\">  namespace: ingress-nginx</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app.kubernetes.io/name: ingress-nginx</span><br><span class=\"line\">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  replicas: 1</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      app.kubernetes.io/name: ingress-nginx</span><br><span class=\"line\">      app.kubernetes.io/part-of: ingress-nginx</span><br><span class=\"line\">  template:</span><br><span class=\"line\">    metadata:</span><br><span class=\"line\">      labels:</span><br><span class=\"line\">        app.kubernetes.io/name: ingress-nginx</span><br><span class=\"line\">        app.kubernetes.io/part-of: ingress-nginx</span><br><span class=\"line\">      annotations:</span><br><span class=\"line\">        prometheus.io/port: &quot;10254&quot;</span><br><span class=\"line\">        prometheus.io/scrape: &quot;true&quot;</span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      serviceAccountName: nginx-ingress-serviceaccount</span><br><span class=\"line\">      containers:</span><br><span class=\"line\">        - name: nginx-ingress-controller</span><br><span class=\"line\">          image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.25.0</span><br><span class=\"line\">          args:</span><br><span class=\"line\">            - /nginx-ingress-controller</span><br><span class=\"line\">            - --configmap=$(POD_NAMESPACE)/nginx-configuration</span><br><span class=\"line\">            - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services</span><br><span class=\"line\">            - --udp-services-configmap=$(POD_NAMESPACE)/udp-services</span><br><span class=\"line\">            - --publish-service=$(POD_NAMESPACE)/ingress-nginx</span><br><span class=\"line\">            - --annotations-prefix=nginx.ingress.kubernetes.io</span><br><span class=\"line\">          securityContext:</span><br><span class=\"line\">            allowPrivilegeEscalation: true</span><br><span class=\"line\">            capabilities:</span><br><span class=\"line\">              drop:</span><br><span class=\"line\">                - ALL</span><br><span class=\"line\">              add:</span><br><span class=\"line\">                - NET_BIND_SERVICE</span><br><span class=\"line\">            # www-data -&gt; 33</span><br><span class=\"line\">            runAsUser: 33</span><br><span class=\"line\">          env:</span><br><span class=\"line\">            - name: POD_NAME</span><br><span class=\"line\">              valueFrom:</span><br><span class=\"line\">                fieldRef:</span><br><span class=\"line\">                  fieldPath: metadata.name</span><br><span class=\"line\">            - name: POD_NAMESPACE</span><br><span class=\"line\">              valueFrom:</span><br><span class=\"line\">                fieldRef:</span><br><span class=\"line\">                  fieldPath: metadata.namespace</span><br><span class=\"line\">          ports:</span><br><span class=\"line\">            - name: http</span><br><span class=\"line\">              containerPort: 80</span><br><span class=\"line\">            - name: https</span><br><span class=\"line\">              containerPort: 443</span><br><span class=\"line\">          livenessProbe:</span><br><span class=\"line\">            failureThreshold: 3</span><br><span class=\"line\">            httpGet:</span><br><span class=\"line\">              path: /healthz</span><br><span class=\"line\">              port: 10254</span><br><span class=\"line\">              scheme: HTTP</span><br><span class=\"line\">            initialDelaySeconds: 10</span><br><span class=\"line\">            periodSeconds: 10</span><br><span class=\"line\">            successThreshold: 1</span><br><span class=\"line\">            timeoutSeconds: 10</span><br><span class=\"line\">          readinessProbe:</span><br><span class=\"line\">            failureThreshold: 3</span><br><span class=\"line\">            httpGet:</span><br><span class=\"line\">              path: /healthz</span><br><span class=\"line\">              port: 10254</span><br><span class=\"line\">              scheme: HTTP</span><br><span class=\"line\">            periodSeconds: 10</span><br><span class=\"line\">            successThreshold: 1</span><br><span class=\"line\">            timeoutSeconds: 10</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在安装一个service，通过nodeport方式对外暴露端口，之后都通过该端口和容器内的服务进行通讯：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Service</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: ingress-nginx</span><br><span class=\"line\">  namespace: ingress-nginx</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app.kubernetes.io/name: ingress-nginx</span><br><span class=\"line\">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  type: NodePort</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">    - name: http</span><br><span class=\"line\">      port: 80</span><br><span class=\"line\">      targetPort: 80</span><br><span class=\"line\">      nodePort: 80</span><br><span class=\"line\">      protocol: TCP</span><br><span class=\"line\">    - name: https</span><br><span class=\"line\">      port: 443</span><br><span class=\"line\">      targetPort: 443</span><br><span class=\"line\">      protocol: TCP</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    app.kubernetes.io/name: ingress-nginx</span><br><span class=\"line\">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里暴露80端口</p>\n</blockquote>\n<p>创建一个ingress, 绑定后端服务，并且设置域名。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">apiVersion: extensions/v1beta1</span><br><span class=\"line\">kind: Ingress</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: ingress-myapp</span><br><span class=\"line\">  namespace: default</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  rules:</span><br><span class=\"line\">  - host: dev-jenkins-k8s.liulishuo.work</span><br><span class=\"line\">    http:</span><br><span class=\"line\">      paths:</span><br><span class=\"line\">      - path:</span><br><span class=\"line\">        backend:</span><br><span class=\"line\">          serviceName: myapp</span><br><span class=\"line\">          servicePort: 80</span><br></pre></td></tr></table></figure>\n\n<p>如上所示，这里以<code>dev-jenkins-k8s.liulishuo.work</code>为例，在ingress成功创建以后，找到sa配置下域名即可完成。</p>\n<h2 id=\"OpenEBS存储服务\"><a href=\"#OpenEBS存储服务\" class=\"headerlink\" title=\"OpenEBS存储服务\"></a>OpenEBS存储服务</h2><p>通过如下指令进行安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl apply -f https://openebs.github.io/charts/openebs-operator-1.1.0.yaml</span><br></pre></td></tr></table></figure>\n\n<p>基于LocalPV的hostPath方式，管理员可以创建一个个性化的<code>StorageClass</code>，通过下面的相同配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">apiVersion: storage.k8s.io/v1</span><br><span class=\"line\">kind: StorageClass</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: openebs-hostpath</span><br><span class=\"line\">  annotations:</span><br><span class=\"line\">    openebs.io/cas-type: local</span><br><span class=\"line\">    cas.openebs.io/config: </span><br><span class=\"line\">      - name: BasePath</span><br><span class=\"line\">        value: &quot;/var/openebs/local&quot;</span><br><span class=\"line\">      - name: StorageType</span><br><span class=\"line\">        value: &quot;hostpath&quot;</span><br><span class=\"line\">provisioner: openebs.io/local</span><br><span class=\"line\">reclaimPolicy: Delete</span><br><span class=\"line\">volumeBindingMode: WaitForFirstConsumer</span><br></pre></td></tr></table></figure>\n\n<p>当需要使用存储的时候, 可以创建一个pvc进行请求存储操作</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">kind: PersistentVolumeClaim</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: jenkins-dev-aws-claim</span><br><span class=\"line\">  namespace: jenkins-dev</span><br><span class=\"line\">  annotations:</span><br><span class=\"line\">    volume.beta.kubernetes.io/storage-class: openebs-hostpath</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  accessModes:</span><br><span class=\"line\">    - ReadWriteOnce</span><br><span class=\"line\">  resources:</span><br><span class=\"line\">    requests:</span><br><span class=\"line\">      storage: 15G</span><br></pre></td></tr></table></figure>\n\n<p>上面通过<code>openebs-hostpath</code>方式，申请了15G的内存进行使用, 并且采用<code>ReadWriteOnce</code>方式进行。pvc使用以后，通过<code>get pvc</code>指令可以查看到以及bound。 并且告诉你一个VOLUME目录，例如下面的<code>pvc-36743f52-9f11-47d9-97f8-dedc22046a9e</code>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">xinyu:~ xinyuhuang$  kubectl --kubeconfig ~/.kube/kubeconfig get pvc -n jenkins-dev</span><br><span class=\"line\">NAME                     STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS       AGE</span><br><span class=\"line\">jenkins-hostpath-claim   Bound    pvc-36743f52-9f11-47d9-97f8-dedc22046a9e   15G        RWO            openebs-hostpath   16h</span><br><span class=\"line\">jenkins-pv-claim         Bound    jenkins-pv-volume                          10Gi       RWO            manual             15d</span><br></pre></td></tr></table></figure>\n\n<p>openebs的hostPath方式默认将volume数据存储在<code>/var/openebs/local</code>下，可以对其进行备份。</p>\n<h2 id=\"数据备份\"><a href=\"#数据备份\" class=\"headerlink\" title=\"数据备份\"></a>数据备份</h2><h2 id=\"搭建过程中遇到的问题\"><a href=\"#搭建过程中遇到的问题\" class=\"headerlink\" title=\"搭建过程中遇到的问题\"></a>搭建过程中遇到的问题</h2><ul>\n<li><strong>jnlp agent 连接不上master</strong></li>\n</ul>\n<p>遇到这个问题，需要注意下面几点，看看是不是设置错了 1. <code>Command to run</code> 不填内容 1. <code>Arguments to pass to the command</code>不填内容 1. <code>Container Template</code>必须设置为<code>jnlp</code> 1. <code>Jenkins tunnel</code>设置为<code>服务名：50000（端口号）</code></p>\n<ul>\n<li><strong>如何让ingress controller对外暴露80端口</strong></li>\n</ul>\n<p>默认情况下，强行开放80端口，会爆出下面的错误</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">The Service &quot;ingress-nginx&quot; is invalid: spec.ports[0].nodePort: Invalid value: 80: provided port is not in the valid range. The range of valid ports is 30000-32767</span><br></pre></td></tr></table></figure>\n\n<p>我们需要修改下<code>kube-apiserver</code>的yaml配置文件。修改<code>/etc/kubernetes/manifests/kube-apiserver.yaml</code>(有些版本也可能是json)文件，修改其中的<code>- --service-node-port-range=80-32767</code> 将range从30000-32767修改为80-32767。如果没有这句话，则按照格式添加一句。</p>\n<ul>\n<li><strong>Gradle Build速度缓慢</strong></li>\n</ul>\n<p>对<code>~/.gradle</code>和<code>/home/jenkins/workspace</code>进行hostpath挂载，相当于添加了缓存。</p>\n<ul>\n<li><strong>Kubernetes-plugin连接测试Jenkins失败</strong></li>\n</ul>\n<p>会爆出下面的错误</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">deployments.apps is forbidden: User “system:serviceaccount:default:default” cannot create deployments.apps in the namespace</span><br></pre></td></tr></table></figure>\n\n<p>可以通过使得有权限访问pod api</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl create clusterrolebinding serviceaccounts-cluster-admin \\</span><br><span class=\"line\">  --clusterrole=cluster-admin \\</span><br><span class=\"line\">  --group=system:serviceaccounts</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>jenkins异常重启导致用户名和密码改变</strong></li>\n</ul>\n<p><a href=\"https://www.jianshu.com/p/5e8b53baeff5\">配置文件修改密码</a></p>\n<h2 id=\"快速恢复和迁移\"><a href=\"#快速恢复和迁移\" class=\"headerlink\" title=\"快速恢复和迁移\"></a>快速恢复和迁移</h2><p>jenkins可能经常会有环境的迁移，由于Jenkins的插件下载由于各种原因下载很缓慢，因此能过快速copy配置环境很重要。我们在Master节点都会通过openebs对<code>/var/jenkins_home</code>配置文件进行挂载。openebs的路径为<code>/var/openebs/local</code>。可以对下面的volume进行拷贝备份，迁移和快速恢复时，再通过将备份的配置文件复制到新的jenkins挂载的volume中，即可快速迁移和恢复。具体步骤如下：</p>\n<ul>\n<li>将备份的jenkins配置文件拷贝到新创建的jenkins挂载目录下。所有文件拷贝过去即可。</li>\n<li>重启Jenkins，重启只要删除相应jenkins的pod即可，deployment会自动创建新的pod。</li>\n</ul>\n","categories":["skills"],"tags":["运维","k8s"]},{"title":"《指数基金投资指南》笔记","url":"/2021/01/29/%E3%80%8A%E6%8C%87%E6%95%B0%E5%9F%BA%E9%87%91%E6%8A%95%E8%B5%84%E6%8C%87%E5%8D%97%E3%80%8B%E7%AC%94%E8%AE%B0/","content":"<h1 id=\"前言-提炼\"><a href=\"#前言-提炼\" class=\"headerlink\" title=\"前言 提炼\"></a>前言 提炼</h1><ol>\n<li>🙅不要从众，在牛市短期盈利并不是自己的能力，而是运气。</li>\n<li>80%收益往往出现在 20%的时间里，长期持有才能等到下一次牛市的到来。</li>\n</ol>\n<h1 id=\"第一章-如何理财\"><a href=\"#第一章-如何理财\" class=\"headerlink\" title=\"第一章 如何理财\"></a>第一章 如何理财</h1><span id=\"more\"></span>\n<ol>\n<li>少消费多攒钱，理性消费，拒绝超前消费</li>\n<li>有足够的资金和充足的时间去做自己想做的事情，这才是财务自由。</li>\n<li>所有不能产生现金流的资产，价格都是由供求关系决定的</li>\n<li>不要贪婪，避免不合理的高收益，一切金融骗局都是纸老虎，过高的收益率往往有陷阱。</li>\n<li>通过定期投资指数基金，业余投资者往往能够战胜大部分专业投资者</li>\n</ol>\n<h1 id=\"第二章-为什么要选择指数基金\"><a href=\"#第二章-为什么要选择指数基金\" class=\"headerlink\" title=\"第二章 为什么要选择指数基金\"></a>第二章 为什么要选择指数基金</h1><ol>\n<li>指数基金可以长期上涨</li>\n<li>国家的一个稳定的环境是指数基金长期上涨的根本动力</li>\n<li>成本低，管理费和托管费低</li>\n</ol>\n<h1 id=\"第三章-指数基金的种类\"><a href=\"#第三章-指数基金的种类\" class=\"headerlink\" title=\"第三章 指数基金的种类\"></a>第三章 指数基金的种类</h1><ol>\n<li>宽基指数基金：上证 50 指数、沪深 300 指数、中证 500 指数、创业板指数、红利指数、基本面指数、央视财经50指数、恒生指数、H 股指数、上证50AH优选指数、纳斯达克100指数、标普500指数</li>\n<li>行业指数基金：必需消费行业的指数基金、医药行业的指数基金、可选消费行业的指数基金、养老产业的指数基金、银行业的指数基金、证券业的指数基金、保险行业的指数基金、金融行业的指数基金、地产行业的指数基金等。</li>\n</ol>\n<h1 id=\"第四章-如何挑选适合投资的指数基金\"><a href=\"#第四章-如何挑选适合投资的指数基金\" class=\"headerlink\" title=\"第四章 如何挑选适合投资的指数基金\"></a>第四章 如何挑选适合投资的指数基金</h1><ol>\n<li>“低估值价值投资＋指数基金”组合</li>\n<li>常见的估值指标有：市盈率、盈利收益率、市净率、股息率</li>\n</ol>\n<h1 id=\"第五章-懒人定投法\"><a href=\"#第五章-懒人定投法\" class=\"headerlink\" title=\"第五章 懒人定投法\"></a>第五章 懒人定投法</h1><ol>\n<li>定投的优势： 门槛低、时间不限、分摊成本</li>\n<li>定投要坚持，三年以上</li>\n<li>在价值低于价格的时候开始定投</li>\n<li>场内渠道与场外渠道</li>\n<li>定投需要确定两个因素：定投的时间和定投的金额。</li>\n<li>可以通过降低投资费用、正确处理基金分红、选择合适的定投频率、定期不定额等技巧，进一步提高定投指数基金的收益。</li>\n</ol>\n<h1 id=\"第六章-构建自己的定投计划\"><a href=\"#第六章-构建自己的定投计划\" class=\"headerlink\" title=\"第六章 构建自己的定投计划\"></a>第六章 构建自己的定投计划</h1><ol>\n<li>多记账多分析</li>\n<li>挑选好基金</li>\n<li>构建定投计划</li>\n<li>定期检查优化</li>\n</ol>\n<h1 id=\"第七章-做好家庭资产配置\"><a href=\"#第七章-做好家庭资产配置\" class=\"headerlink\" title=\"第七章 做好家庭资产配置\"></a>第七章 做好家庭资产配置</h1><ol>\n<li>货币基金，随用随取得“余额宝”</li>\n<li>债券基金，作为没有低估指数基金的替代</li>\n<li>基金收益： 指数&gt;债券&gt;货币 风险相似</li>\n</ol>\n<h1 id=\"第八章-长期投资的心理建设\"><a href=\"#第八章-长期投资的心理建设\" class=\"headerlink\" title=\"第八章 长期投资的心理建设\"></a>第八章 长期投资的心理建设</h1><ol>\n<li>好好工作，闲钱投资，不要太在意</li>\n</ol>\n","categories":["life"],"tags":["个人","理财"]},{"title":"Terraform 实践","url":"/2021/03/10/terraform-%E5%AE%9E%E8%B7%B5/","content":"<h1 id=\"Terraform-介绍\"><a href=\"#Terraform-介绍\" class=\"headerlink\" title=\"Terraform 介绍\"></a>Terraform 介绍</h1><h2 id=\"什么是-Terraform\"><a href=\"#什么是-Terraform\" class=\"headerlink\" title=\"什么是 Terraform\"></a>什么是 Terraform</h2><p>Terraform是一种开源工具，用于安全高效地预览，配置和管理云基础架构和资源。</p>\n<h3 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h3><p><a href=\"https://www.terraform.io/?spm=a2c4g.11186623.2.4.35fd376d540nB0\" title=\"HashiCorp Terraform\">HashiCorp Terraform</a> 是一个IT基础架构自动化编排工具，可以用代码来管理维护 IT 资源。Terraform的命令行接口（CLI）提供一种简单机制，用于将配置文件部署到阿里云或其他任意支持的云上，并对其进行版本控制。它编写了描述云资源拓扑的配置文件中的基础结构，例如虚拟机、存储帐户和网络接口。 Terraform是一个高度可扩展的工具，通过 Provider 来支持新的基础架构。Terraform能够让您在阿里云上轻松使用 简单模板语言 来定义、预览和部署云基础结构。您可以使用Terraform来创建、修改、删除ECS、VPC、RDS、SLB等多种资源。</p>\n<span id=\"more\"></span>\n<h3 id=\"优势\"><a href=\"#优势\" class=\"headerlink\" title=\"优势\"></a>优势</h3><p><strong>将基础结构部署到多个云</strong> Terraform适用于多云方案，将类似的基础结构部署到阿里云、其他云提供商或者本地数据中心。开发人员能够使用相同的工具和相似的配置文件同时管理不同云提供商的资源。 <strong>自动化管理基础结构</strong> Terraform能够创建配置文件的模板，以可重复、可预测的方式定义、预配和配置ECS资源，减少因人为因素导致的部署和管理错误。能够多次部署同一模板，创建相同的开发、测试和生产环境。 <strong>基础架构即代码（Infrastructure as Code）</strong> 可以用代码来管理维护资源。允许保存基础设施状态，从而使您能够跟踪对系统（基础设施即代码）中不同组件所做的更改，并与其他人共享这些配置 。 <strong>降低开发成本</strong> 您通过按需创建开发和部署环境来降低成本。并且，您可以在系统更改之前进行评估。</p>\n<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><p>Terraform可以对基础设施进行编码，利用代码来进行资源的增删查改。 <strong>创建基础设施</strong> 您可以使用Terraform创建和管理ECS、VPC和SLB等基础资源。 <strong>均衡负载业务流量</strong> 您可以将访问流量按照定义的转发规则分发到指定的后端服务器（ECS实例），提高应用系统对外的服务能力，消除单点故障。 <strong>自动伸缩</strong> 根据您的业务需求和策略自动调整弹性计算资源，在业务需求增长时无缝增加ECS实例满足计算需要，在业务需求下降时自动减少ECS实例节约成本。 <strong>集群管理</strong> 您可以使用Terraform快速创建专有网络的集群。 在阿里云中启动kubernetes集群，并且在集群中创建VPC、交换机和NAT网关等资源，请参见示例模板kubernetes module。 <strong>配置函数计算服务</strong> 阿里云函数计算是事件驱动的全托管计算服务。通过函数计算，您无需管理服务器等基础设施，只需编写代码并上传。借助于函数计算，您可以快速构建任何类型的应用和服务，无需管理和运维。</p>\n<h1 id=\"安装和配置-Terraform\"><a href=\"#安装和配置-Terraform\" class=\"headerlink\" title=\"安装和配置 Terraform\"></a>安装和配置 Terraform</h1><h2 id=\"在阿里云-Cloud-Shell-中使用-Terraform\"><a href=\"#在阿里云-Cloud-Shell-中使用-Terraform\" class=\"headerlink\" title=\"在阿里云 Cloud Shell 中使用 Terraform\"></a>在阿里云 Cloud Shell 中使用 Terraform</h2><p>阿里云 Cloud Shell 集成了 Terraform 组件：<a href=\"https://help.aliyun.com/document/_detail/95841.html?spm=a2c4g.11186623.6.545.4e13190cErHLYf\">https://help.aliyun.com/document\\_detail/95841.html?spm=a2c4g.11186623.6.545.4e13190cErHLYf</a></p>\n<h2 id=\"在本地安装和配置-Terraform\"><a href=\"#在本地安装和配置-Terraform\" class=\"headerlink\" title=\"在本地安装和配置 Terraform\"></a>在本地安装和配置 Terraform</h2><h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><p>云：阿里云 机器信息： <a href=\"https://i.loli.net/2021/03/10/2hVQR16KHNmcPxM.jpg\"><img src=\"https://i.loli.net/2021/03/10/2hVQR16KHNmcPxM.jpg\"></a></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>下面是 Centos 7安装，其它操作系统请参照官网：<a href=\"https://www.terraform.io/docs/cli/install/yum.html\">https://www.terraform.io/docs/cli/install/yum.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Centos</span></span><br><span class=\"line\">sudo yum install -y yum-utils</span><br><span class=\"line\">sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo</span><br><span class=\"line\">sudo yum install terraform</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>安装好后输入 terrafrom 命令出现如下内容即为安装成功 <a href=\"https://i.loli.net/2021/03/10/HRvLJSMqE8OVKWI.jpg\"><img src=\"https://i.loli.net/2021/03/10/HRvLJSMqE8OVKWI.jpg\"></a></p>\n<h3 id=\"在阿里云创建-RAM-用户\"><a href=\"#在阿里云创建-RAM-用户\" class=\"headerlink\" title=\"在阿里云创建 RAM 用户\"></a>在阿里云创建 RAM 用户</h3><p><strong>登录 RAM 控制台：</strong> <a href=\"https://ram.console.aliyun.com/?spm=a2c4g.11186623.2.8.33fd16f2IgYtaY#/overview\">https://ram.console.aliyun.com/?spm=a2c4g.11186623.2.8.33fd16f2IgYtaY#/overview</a> <strong>创建名为Terraform的RAM用户，并为该用户创建AccessKey：</strong> <a href=\"https://i.loli.net/2021/03/10/MJBos1pK7muZkfw.jpg\"><img src=\"https://i.loli.net/2021/03/10/MJBos1pK7muZkfw.jpg\"></a> 创建如下： <a href=\"https://i.loli.net/2021/03/10/QXDa6Ocjset35iw.jpg\"><img src=\"https://i.loli.net/2021/03/10/QXDa6Ocjset35iw.jpg\"></a> <strong>添加用户权限</strong> <a href=\"https://i.loli.net/2021/03/10/wZdFzlI4ACby8QL.jpg\"><img src=\"https://i.loli.net/2021/03/10/wZdFzlI4ACby8QL.jpg\"></a> 我这里是测试所以就加了所有权限，生产环境请根据实际情况添加 <a href=\"https://i.loli.net/2021/03/10/khAOdc8ICTV54bE.jpg\"><img src=\"https://i.loli.net/2021/03/10/khAOdc8ICTV54bE.jpg\"></a></p>\n<h3 id=\"添加环境变量\"><a href=\"#添加环境变量\" class=\"headerlink\" title=\"添加环境变量\"></a>添加环境变量</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/profile</span><br><span class=\"line\"><span class=\"comment\"># 添加如下内容</span></span><br><span class=\"line\"><span class=\"comment\"># key secret 填写自己 RAM 用户生成的，REGION 为区域</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> ALICLOUD_ACCESS_KEY=<span class=\"string\">&quot;LTAI4G7W8JG*********&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> ALICLOUD_SECRET_KEY=<span class=\"string\">&quot;8eMc5Y0SfHPXppigtb******&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> ALICLOUD_REGION=<span class=\"string\">&quot;cn-hangzhou&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使配置生效</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h1><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建执行目录，后续操作在下面目录中执行</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> /opt/terraform</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /opt/terraform</span><br><span class=\"line\"><span class=\"comment\"># 初始化</span></span><br><span class=\"line\">terraform init</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"云服务器-ECS\"><a href=\"#云服务器-ECS\" class=\"headerlink\" title=\"云服务器 ECS\"></a>云服务器 ECS</h2><h3 id=\"创建一台-ECS-实例\"><a href=\"#创建一台-ECS-实例\" class=\"headerlink\" title=\"创建一台 ECS 实例\"></a>创建一台 ECS 实例</h3><ul>\n<li>创建专有网络和交换机</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim terraform.tf</span><br><span class=\"line\"><span class=\"comment\"># 输入以下内容</span></span><br><span class=\"line\">resource <span class=\"string\">&quot;alicloud_vpc&quot;</span> <span class=\"string\">&quot;vpc&quot;</span> &#123;</span><br><span class=\"line\">  name       = <span class=\"string\">&quot;tf_test_foo&quot;</span></span><br><span class=\"line\">  cidr_block = <span class=\"string\">&quot;172.16.0.0/12&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">resource <span class=\"string\">&quot;alicloud_vswitch&quot;</span> <span class=\"string\">&quot;vsw&quot;</span> &#123;</span><br><span class=\"line\">  vpc_id            = alicloud_vpc.vpc.id</span><br><span class=\"line\">  cidr_block        = <span class=\"string\">&quot;172.16.0.0/21&quot;</span></span><br><span class=\"line\">  availability_zone = <span class=\"string\">&quot;cn-hangzhou-b&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 创建</span></span><br><span class=\"line\">Terraform apply</span><br><span class=\"line\"><span class=\"comment\"># 命令行查看或者登陆控制台查看</span></span><br><span class=\"line\">terraform show</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://i.loli.net/2021/03/10/r2RO56ilqyLcupH.jpg\"><img src=\"https://i.loli.net/2021/03/10/r2RO56ilqyLcupH.jpg\"></a></p>\n<ul>\n<li>在上一部创建的专有网络中创建一个安全组，并添加一个允许任何地址访问的安全组规则 在 terraform.tf 文件中添加以下内容</li>\n</ul>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">resource &quot;alicloud_security_group&quot; &quot;default&quot; &#123;</span><br><span class=\"line\">  name = &quot;default&quot;</span><br><span class=\"line\">  vpc_id = alicloud_vpc.vpc.id</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">resource &quot;alicloud_security_group_rule&quot; &quot;allow_all_tcp&quot; &#123;</span><br><span class=\"line\">  type              = &quot;ingress&quot;</span><br><span class=\"line\">  ip_protocol       = &quot;tcp&quot;</span><br><span class=\"line\">  nic_type          = &quot;intranet&quot;</span><br><span class=\"line\">  policy            = &quot;accept&quot;</span><br><span class=\"line\">  port_range        = &quot;1/65535&quot;</span><br><span class=\"line\">  priority          = 1</span><br><span class=\"line\">  security_group_id = alicloud_security_group.default.id</span><br><span class=\"line\">  cidr_ip           = &quot;0.0.0.0/0&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>运行terraform apply开始创建</p>\n<ul>\n<li>创建 ECS 实例 在 terraform.tf 文件中添加以下内容</li>\n</ul>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">resource &quot;alicloud_instance&quot; &quot;instance&quot; &#123;</span><br><span class=\"line\">  # cn-beijing</span><br><span class=\"line\">  availability_zone = &quot;cn-hangzhou-b&quot;</span><br><span class=\"line\">  security_groups = alicloud_security_group.default.*.id</span><br><span class=\"line\"></span><br><span class=\"line\">  # series III</span><br><span class=\"line\">  instance_type        = &quot;ecs.n2.small&quot;</span><br><span class=\"line\">  system_disk_category = &quot;cloud_efficiency&quot;</span><br><span class=\"line\">  image_id             = &quot;ubuntu_18_04_64_20G_alibase_20190624.vhd&quot;</span><br><span class=\"line\">  instance_name        = &quot;test_foo&quot;</span><br><span class=\"line\">  vswitch_id = alicloud_vswitch.vsw.id</span><br><span class=\"line\">  internet_max_bandwidth_out =10</span><br><span class=\"line\">  password = &quot;P@ss12345&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行terraform apply开始创建,创建完成控制台 <a href=\"https://i.loli.net/2021/03/10/tLDSP7sNM4JVX6H.jpg\"><img src=\"https://i.loli.net/2021/03/10/tLDSP7sNM4JVX6H.jpg\"></a> 以上就是创建 ECS 的操作，其它操作可以查看阿里云官网文档： <a href=\"https://help.aliyun.com/product/95817.html?spm=a2c4g.11186623.6.540.423c278brGHPCC\">https://help.aliyun.com/product/95817.html?spm=a2c4g.11186623.6.540.423c278brGHPCC</a></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><h2 id=\"Terraform-常用命令\"><a href=\"#Terraform-常用命令\" class=\"headerlink\" title=\"Terraform 常用命令\"></a>Terraform 常用命令</h2><p><a href=\"https://help.aliyun.com/document/_detail/145531.html?spm=a2c4g.11174283.6.573.4e9511e91k8F33\">https://help.aliyun.com/document\\_detail/145531.html?spm=a2c4g.11174283.6.573.4e9511e91k8F33</a></p>\n","categories":["skills"],"tags":["运维","Terraform","阿里云"]},{"title":"记一次 elasticsearch 集群报错排查","url":"/2021/04/07/%E8%AE%B0%E4%B8%80%E6%AC%A1-elasticsearch-%E9%9B%86%E7%BE%A4%E6%8A%A5%E9%94%99%E6%8E%92%E6%9F%A5/","content":"<h1 id=\"问题现象\"><a href=\"#问题现象\" class=\"headerlink\" title=\"问题现象\"></a>问题现象</h1><ol>\n<li>Kibana 页面报错链接不是 elasticsearch 集群</li>\n<li>elasticsearch 索引信息状态为 red</li>\n<li>日志报错 all shards failed<span id=\"more\"></span></li>\n</ol>\n<h1 id=\"排查记录\"><a href=\"#排查记录\" class=\"headerlink\" title=\"排查记录\"></a>排查记录</h1><ol>\n<li>查看所有索引 <code>curl &#39;localhost:9288/_cat/indices?v</code>如下 <a href=\"https://i.loli.net/2021/04/07/1obGtlNdk2vIUV8.jpg\"><img src=\"https://i.loli.net/2021/04/07/1obGtlNdk2vIUV8.jpg\"></a></li>\n</ol>\n<h1 id=\"修复\"><a href=\"#修复\" class=\"headerlink\" title=\"修复\"></a>修复</h1><p>修复所有节点上索引</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -XPOST <span class=\"string\">&quot;http://127.0.0.1:9288/_cluster/reroute?retry_failed=true&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>再次查看</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl  &#x27;localhost:9288/_cat/indices?v</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://i.loli.net/2021/04/07/h9MTXQNW2Fg45nL.jpg\"><img src=\"https://i.loli.net/2021/04/07/h9MTXQNW2Fg45nL.jpg\"></a> 打开 kibana 页面恢复正常。</p>\n<h1 id=\"故障原因\"><a href=\"#故障原因\" class=\"headerlink\" title=\"故障原因\"></a>故障原因</h1><p>前段时间迁移了部分服务到容器中，将机器删除了，导致很多索引都失败了。</p>\n","categories":["skills"],"tags":["Elasticsearch"]},{"title":"20210510-最近","url":"/2021/05/10/20210510-%E6%9C%80%E8%BF%91/","content":"<p><img src=\"https://www.52ynn.top/wp-content/uploads/2021/01/ab482556926ee350448310717a81036f-300x169.jpg\"> 自从来到这个公司确实有点养老的感觉了，前两天和前同事聊天，发现自己一点危机感都没有了<span id=\"more\"></span></p>\n","categories":["Essay"],"tags":["记录","学习"]},{"title":"Nginx 重定向 301 和 302 的区别","url":"/2021/05/24/nginx-%E9%87%8D%E5%AE%9A%E5%90%91-301-%E5%92%8C-302-%E7%9A%84%E5%8C%BA%E5%88%AB/","content":"<h1 id=\"什么是-301-和-302-重定向\"><a href=\"#什么是-301-和-302-重定向\" class=\"headerlink\" title=\"什么是 301 和 302 重定向\"></a>什么是 301 和 302 重定向</h1><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><h5 id=\"官方说法：\"><a href=\"#官方说法：\" class=\"headerlink\" title=\"官方说法：\"></a>官方说法：</h5><p>301，302 都是HTTP状态的编码，都代表着某个URL发生了转移，不同之处在于： 301 redirect: 301 代表永久性转移(Permanently Moved)。 302 redirect: 302 代表暂时性转移(Temporarily Moved )。</p>\n<h5 id=\"对于用户来说：\"><a href=\"#对于用户来说：\" class=\"headerlink\" title=\"对于用户来说：\"></a>对于用户来说：</h5><p>301，302对用户来说没有区别，他们看到效果只是一个跳转，浏览器中旧的URL变成了新的URL。页面跳到了这个新的url指向的地方。</p>\n<span id=\"more\"></span>\n<h5 id=\"对于引擎及站长\"><a href=\"#对于引擎及站长\" class=\"headerlink\" title=\"对于引擎及站长\"></a>对于引擎及站长</h5><p><strong>302</strong> 302转向可能会有URL规范化及网址劫持的问题。可能被搜索引擎判为可疑转向，甚至认为是作弊。 网址规范化 请参见：<a href=\"http://www.chinamyhosting.com/seoblog/2006/04/10/url-canonicalization/\">http://www.chinamyhosting.com/seoblog/2006/04/10/url-canonicalization/</a> 网址劫持 302重定向和网址劫持（URL hijacking）有什么关系呢？这要从搜索引擎如何处理302转向说起。从定义来说，从网址A做一个302重定向到网址B时，主机服务器的隐含意思是网址A随时有可能改主意，重新显示本身的内容或转向其他的地方。大部分的搜索引擎在大部分情况下，当收到302重定向时，一般只要去抓取目标网址就可以了，也就是说网址B。 实际上如果搜索引擎在遇到302转向时，百分之百的都抓取目标网址B的话，就不用担心网址URL劫持了。问题就在于，有的时候搜索引擎，尤其是Google，并不能总是抓取目标网址。为什么呢？比如说，有的时候A网址很短，但是它做了一个302重定向到B网址，而B网址是一个很长的乱七八糟的URL网址，甚至还有可能包含一些问号之类的参数。很自然的，A网址更加用户友好，而B网址既难看，又不用户友好。这时Google很有可能会仍然显示网址A。 由于搜索引擎排名算法只是程序而不是人，在遇到302重定向的时候，并不能像人一样的去准确判定哪一个网址更适当，这就造成了网址URL劫持的可能性。也就是说，一个不道德的人在他自己的网址A做一个302重定向到你的网址B，出于某种原因， Google搜索结果所显示的仍然是网址A，但是所用的网页内容却是你的网址B上的内容，这种情况就叫做网址URL劫持。你辛辛苦苦所写的内容就这样被别人偷走了。 <strong>301</strong> 当网页A用301重定向转到网页B时，搜索引擎可以肯定网页A永久的改变位置，或者说实际上不存在了，搜索引擎就会把网页B当作唯一有效目标。 301的好处是: 第一， 没有网址规范化问题。 第二， 也很重要的，网页A的PR网页级别会传到网页B。 301重定向主要是用于在域名的更改或者不带www的域名定向到带www的域名上，而302重定向可能我们的了解就比较少了，302重定向又称之为302代表暂时性转移，英文叫法为302 redirect，可以理解为暂时或者临时重定向。表示一个页面只是临时的搬到另一个页面上，从一些经验老道的SEO高手处得知，302重定向还有内部和外部之分，同一个域名中两个不同的页面之间的的临时重定向，这个成为为内部的临时重定向。另一种则是在不同的域名之间做临时的重定向，这种称为外部临时重定向。然而，基本上所有的搜索引擎都只把它定义为内部的302重定向。对此，如果是内部的302重定向搜索引擎并不会删除搜索结果中旧的页面。 301重定向被认为是目前域名更改后以最友好的方式展现给搜索引擎，也是业内用得最多的。在部落的网站中，之前有写过很多关于301的文章，比如301重定向是否成功的验证方法和wordpress博客301重定向失效的解决办法这两篇文章，其中包括实现的具体方法和其中出现的一些问题的处理方式，您都可以参考一下，具体就不再多讲。这里补充说明一下的是301重定向后到百度的反应时间需要多久，也是很多站长都关注的问题，而百度Lee给出的说法是：“网页的301跳转是受Spider网页更新周期制约的，这个更新周期目前来说可能比较长，我们也致力改进它”。很明显，这是一个很模糊的说法。 目前有部分站长将302 重定向应用到黑帽技术上，利用302的外部重定向来进行“302劫持”，即将别人的内容劫持到自的页面上，来获得更好的权重，这些一般是在交换您的友情链接上需要注意的事情。 如果您是进行新旧域名的替换，那么302重定向与301重定向的效果是一样的，并且都可以将旧域名的权重传递到新域名上，然而302却是以另外的方式——PR劫持来实现的。实现过程如下： 如果A做302临时重定向到B，A随时有可能改变主意显示本身或者做其他改变，那么当Googlebot(当然也包括Baiduspider)等搜身引擎蜘蛛抓取A的时候，实际上抓取的是目标地址B的内容，这样就导致A和B不同的地址有完全相同的内容，并且都被编入了索引，被认为是“利用重复的内容来干扰Google搜索结果的网站排名”，网站受到惩罚也是在情理之中。</p>\n<h1 id=\"Nginx-中配置\"><a href=\"#Nginx-中配置\" class=\"headerlink\" title=\"Nginx 中配置\"></a>Nginx 中配置</h1><p>301 跳转配置：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\"><span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\"><span class=\"attribute\">server_name</span> <span class=\"number\">123</span>.com;</span><br><span class=\"line\"><span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^/(.*)</span> http://456.com/<span class=\"variable\">$1</span> <span class=\"literal\">permanent</span>;</span><br><span class=\"line\"><span class=\"attribute\">access_log</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>302 跳转配置</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\"><span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\"><span class=\"attribute\">server_name</span> <span class=\"number\">123</span>.com;</span><br><span class=\"line\"><span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^/(.*)</span> http://456.com/<span class=\"variable\">$1</span> <span class=\"literal\">redirect</span>;</span><br><span class=\"line\"><span class=\"attribute\">access_log</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["skills"],"tags":["nginx"]},{"title":"k8s 教程学习记录","url":"/2021/06/01/k8s-%E6%95%99%E7%A8%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/","content":"<h1 id=\"1-前面\"><a href=\"#1-前面\" class=\"headerlink\" title=\"1. 前面\"></a>1. 前面</h1><p>教程地址： <a href=\"https://www.bilibili.com/video/BV1GT4y1A756\">https://www.bilibili.com/video/BV1GT4y1A756</a></p>\n<h2 id=\"1-1-前置知识\"><a href=\"#1-1-前置知识\" class=\"headerlink\" title=\"1.1 前置知识\"></a>1.1 前置知识</h2><ol>\n<li>Linux 操作系统</li>\n<li>Docker</li>\n</ol>\n<h1 id=\"2-K8S-概述和特性\"><a href=\"#2-K8S-概述和特性\" class=\"headerlink\" title=\"2. K8S 概述和特性\"></a>2. K8S 概述和特性</h1><h2 id=\"2-1-K8S-概述\"><a href=\"#2-1-K8S-概述\" class=\"headerlink\" title=\"2.1 K8S 概述\"></a>2.1 K8S 概述</h2><span id=\"more\"></span>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">K8S 是谷歌在 2014 年开源的容器化集群管理系统</span><br><span class=\"line\">使用 K8S 进行容器化应用部署</span><br><span class=\"line\">使用 K8S 利于应用扩展</span><br><span class=\"line\">K8S 目标实施让部署容器化应用更加简洁和高效</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-2-K8S-优势\"><a href=\"#2-2-K8S-优势\" class=\"headerlink\" title=\"2.2 K8S 优势\"></a>2.2 K8S 优势</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">自动装箱</span><br><span class=\"line\">自我修复</span><br><span class=\"line\">水平扩展</span><br><span class=\"line\">服务发现</span><br><span class=\"line\">滚动更新</span><br><span class=\"line\">版本回退</span><br><span class=\"line\">密码和配置管理</span><br><span class=\"line\">存储编排</span><br><span class=\"line\">批处理</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-3-K8S-集群架构组件\"><a href=\"#2-3-K8S-集群架构组件\" class=\"headerlink\" title=\"2.3 K8S 集群架构组件\"></a>2.3 K8S 集群架构组件</h2><p>Master（主控节点）和 node（工作节点） Master 组件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">apiserver 集群统一入口，以 restful 方式，交给 etcd 存储</span><br><span class=\"line\">scheduler 节点调度，选择 node 节点应用部署</span><br><span class=\"line\">controller-manager 处理集群中常规的后台任务，一个资源对应一个控制器</span><br><span class=\"line\">etcd 存储系统，用于保存集群相关的数据</span><br></pre></td></tr></table></figure>\n\n<p>node 节点：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubelet master 在 node 节点中的代理，管理本机容器</span><br><span class=\"line\">kube-proxy 提供网络代理，实现负载均衡等操作</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-4-K8S-核心概念（概述）\"><a href=\"#2-4-K8S-核心概念（概述）\" class=\"headerlink\" title=\"2.4 K8S 核心概念（概述）\"></a>2.4 K8S 核心概念（概述）</h2><ol>\n<li>pod</li>\n</ol>\n<ul>\n<li>最小部署单元</li>\n<li>一组容器的集合</li>\n<li>共享网络</li>\n<li>生命周期是短暂的</li>\n</ul>\n<ol start=\"2\">\n<li>controller</li>\n</ol>\n<ul>\n<li>确保预期的 pod 副本数量</li>\n<li>无状态应用部署</li>\n<li>有状态应用部署</li>\n<li>确保所有的 node 运行同一个 pod</li>\n<li>一次性任务和定时任务</li>\n</ul>\n<ol start=\"3\">\n<li>Service</li>\n</ol>\n<ul>\n<li>定义一组pod 的访问规则</li>\n</ul>\n<h1 id=\"3-从零搭建-k8s-集群\"><a href=\"#3-从零搭建-k8s-集群\" class=\"headerlink\" title=\"3. 从零搭建 k8s 集群\"></a>3. 从零搭建 k8s 集群</h1><h2 id=\"3-1-搭建步骤\"><a href=\"#3-1-搭建步骤\" class=\"headerlink\" title=\"3.1 搭建步骤\"></a>3.1 搭建步骤</h2><p><a href=\"https://www.52ynn.top/index.php/2021/06/02/k8s-%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/\" title=\"集群搭建\">集群搭建（kubeadm）</a> <a href=\"https://www.52ynn.top/index.php/2021/06/07/k8s-%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E4%BA%8C%E8%BF%9B%E5%88%B6/\" title=\"二进制\">集群搭建（二进制）</a></p>\n<h1 id=\"4-k8s-基础\"><a href=\"#4-k8s-基础\" class=\"headerlink\" title=\"4. k8s 基础\"></a>4. k8s 基础</h1><h2 id=\"4-1-命令行工具-kubectl\"><a href=\"#4-1-命令行工具-kubectl\" class=\"headerlink\" title=\"4.1 命令行工具 kubectl\"></a>4.1 命令行工具 kubectl</h2><p><code>kubectl</code> 是<code>Kubernetes</code>集群的命令行工具，通过<code>kubectl</code>能够对集群本身进行管理，并能够在集群上进行容器化应用的安装</p>\n<h3 id=\"4-1-1-kubectl-语法格式\"><a href=\"#4-1-1-kubectl-语法格式\" class=\"headerlink\" title=\"4.1.1 kubectl 语法格式\"></a>4.1.1 kubectl 语法格式</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl [<span class=\"built_in\">command</span>] [TYPE] [NAME] [flages]</span><br></pre></td></tr></table></figure>\n\n<p>基本用法 <a href=\"https://i.loli.net/2021/06/15/L4Ix19MiRGlD8ju.jpg\"><img src=\"https://i.loli.net/2021/06/15/L4Ix19MiRGlD8ju.jpg\"></a></p>\n<h2 id=\"帮助命令\"><a href=\"#帮助命令\" class=\"headerlink\" title=\"帮助命令\"></a>帮助命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl --<span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://i.loli.net/2021/06/15/GJusFYaWLUDKRkm.jpg\"><img src=\"https://i.loli.net/2021/06/15/GJusFYaWLUDKRkm.jpg\"></a></p>\n<h3 id=\"4-1-2-子命令分类\"><a href=\"#4-1-2-子命令分类\" class=\"headerlink\" title=\"4.1.2 子命令分类\"></a>4.1.2 子命令分类</h3><p>基础命令 <a href=\"https://i.loli.net/2021/06/15/wOqWUHhvgQc9YX5.jpg\"><img src=\"https://i.loli.net/2021/06/15/wOqWUHhvgQc9YX5.jpg\"></a> 部署和集群管理命令 <a href=\"https://i.loli.net/2021/06/15/KSZTkwM3dhNER28.jpg\"><img src=\"https://i.loli.net/2021/06/15/KSZTkwM3dhNER28.jpg\"></a> 故障和调试命令 <a href=\"https://i.loli.net/2021/06/15/vak9GKRb5gpId4f.jpg\"><img src=\"https://i.loli.net/2021/06/15/vak9GKRb5gpId4f.jpg\"></a> 其他命令 <a href=\"https://i.loli.net/2021/06/15/sg4nKhaWI2S5lVB.jpg\"><img src=\"https://i.loli.net/2021/06/15/sg4nKhaWI2S5lVB.jpg\"></a></p>\n<h2 id=\"4-2-YAML-文件详解\"><a href=\"#4-2-YAML-文件详解\" class=\"headerlink\" title=\"4.2 YAML 文件详解\"></a>4.2 YAML 文件详解</h2><h3 id=\"4-2-1-YAML-文件概述\"><a href=\"#4-2-1-YAML-文件概述\" class=\"headerlink\" title=\"4.2.1 YAML 文件概述\"></a>4.2.1 YAML 文件概述</h3><p>k8s 集群中对资源管理和资源对象编排部署都可以通过声明样式（YAML）文件来解决，也就是可以把需要对资源对象操作编辑到 YAML 格式文件中，我们把这种文件叫做资源清单文件，通过 kubectl 命令直接使用资源清单文件就可以实现对大量的资源对象进行编排部署 了。</p>\n<h3 id=\"4-2-2-YAML-文件书写格式\"><a href=\"#4-2-2-YAML-文件书写格式\" class=\"headerlink\" title=\"4.2.2 YAML 文件书写格式\"></a>4.2.2 YAML 文件书写格式</h3><ul>\n<li>仍是一种标记语言</li>\n<li>通过缩进表示层级关系</li>\n<li>不能使用 Tab 进行缩进，只能使用空格</li>\n<li>一般开头缩进两个空格</li>\n<li>字符后缩进一个空格，比如冒号，逗号后面</li>\n<li>使用—表示新的 yaml 文件开始</li>\n<li>使用 # 开头代表注释</li>\n</ul>\n<h3 id=\"4-2-3-yaml-文件组成部分\"><a href=\"#4-2-3-yaml-文件组成部分\" class=\"headerlink\" title=\"4.2.3 yaml 文件组成部分\"></a>4.2.3 yaml 文件组成部分</h3><ol>\n<li>控制器定义</li>\n<li>被控制对象</li>\n</ol>\n<h3 id=\"4-2-4-如何快速编写-yaml-文件\"><a href=\"#4-2-4-如何快速编写-yaml-文件\" class=\"headerlink\" title=\"4.2.4 如何快速编写 yaml 文件\"></a>4.2.4 如何快速编写 yaml 文件</h3><ol>\n<li>使用 kubectl create 命令生成 yaml 文件 <a href=\"https://i.loli.net/2021/06/15/diNYF7jfv4U1wBM.jpg\"><img src=\"https://i.loli.net/2021/06/15/diNYF7jfv4U1wBM.jpg\"></a></li>\n<li>使用 kubectl get 命令导出 yaml 文件 <a href=\"https://i.loli.net/2021/06/15/8Q6Kx1RDFCvY4yq.jpg\"><img src=\"https://i.loli.net/2021/06/15/8Q6Kx1RDFCvY4yq.jpg\"></a></li>\n</ol>\n<h1 id=\"5-Kubernetes-核心技术-Pod\"><a href=\"#5-Kubernetes-核心技术-Pod\" class=\"headerlink\" title=\"5. Kubernetes 核心技术-Pod\"></a>5. Kubernetes 核心技术-Pod</h1><h2 id=\"5-1-Pod-概述\"><a href=\"#5-1-Pod-概述\" class=\"headerlink\" title=\"5.1 Pod 概述\"></a>5.1 Pod 概述</h2><ol>\n<li>kubernetes 中最小的部署单元</li>\n<li>kubernetes 不会直接处理容器，而是 Pod ，Pod 可以包含一个或者多个容器</li>\n<li>一个 pod 中的容器是共享同一个网络命令空间</li>\n<li>pod 是短暂的，生命周期短</li>\n<li>每一个 Pod 都有一个特殊的被称为”根容器“的 Pause 容器</li>\n</ol>\n<h2 id=\"5-2-Pod-存在意义\"><a href=\"#5-2-Pod-存在意义\" class=\"headerlink\" title=\"5.2 Pod 存在意义\"></a>5.2 Pod 存在意义</h2><ol>\n<li>创建容器时使用 docker，一个 docker 对应一个容器，一个容器有进程，一个容器运行一个应用程序</li>\n<li>Pod 是多进程设计，可以运行多个应用程序</li>\n<li>Pode 存在为了亲密性应用（两个应用之间要进行交互，网络之间调用）</li>\n</ol>\n<h2 id=\"5-3-Pod-实现机制\"><a href=\"#5-3-Pod-实现机制\" class=\"headerlink\" title=\"5.3 Pod 实现机制\"></a>5.3 Pod 实现机制</h2><ol>\n<li><p>共享网络 通过 Pause 容器，把其它业务容器加入到 Pause 容器里面，让所有业务容器在同一个名称空间中，实现网络共享</p>\n</li>\n<li><p>共享存储 引入数据卷概念 Vloumn，使用数据卷进行持久化存储</p>\n</li>\n</ol>\n<h2 id=\"5-4-Pod-镜像拉取策略\"><a href=\"#5-4-Pod-镜像拉取策略\" class=\"headerlink\" title=\"5.4 Pod 镜像拉取策略\"></a>5.4 Pod 镜像拉取策略</h2><p>yaml 中 imagePullPolicy 属性 IfNotPresent：默认值，镜像在宿主机上不存在时才拉取 Always：每次创建 Pod 都会拉取一次镜像 Never：Pod 永远不会主动拉取镜像</p>\n<h2 id=\"5-5-Pod-资源限制\"><a href=\"#5-5-Pod-资源限制\" class=\"headerlink\" title=\"5.5 Pod 资源限制\"></a>5.5 Pod 资源限制</h2><p><a href=\"https://i.loli.net/2021/06/16/4xUq2XZShwOsMBL.jpg\"><img src=\"https://i.loli.net/2021/06/16/4xUq2XZShwOsMBL.jpg\"></a></p>\n<h2 id=\"5-6-Pod-重启机制\"><a href=\"#5-6-Pod-重启机制\" class=\"headerlink\" title=\"5.6 Pod 重启机制\"></a>5.6 Pod 重启机制</h2><p><a href=\"https://i.loli.net/2021/06/16/y8dcBeCrGsbHSLh.jpg\"><img src=\"https://i.loli.net/2021/06/16/y8dcBeCrGsbHSLh.jpg\"></a></p>\n<h2 id=\"5-7-Pod-健康检查\"><a href=\"#5-7-Pod-健康检查\" class=\"headerlink\" title=\"5.7 Pod 健康检查\"></a>5.7 Pod 健康检查</h2><p>**livenessProbe(存活检查)**：如果检查失败，将杀死容器，根据 pod 的 restartPolicy 来操作 <strong>readinessProbe（就绪检查）</strong>：如果检查失败，kubernetes 会把 Pod 从 service endpoints 中剔除 Probe 支持以下三种检查方法： <strong>httpGet</strong>：发送 HTTP 请求，返回 200-400 范围的状态码为成功 <strong>exec</strong>：执行 shell 命令返回状态码为 0 为成功 <strong>tcpsocket</strong>：发起 TCP Socket 建立成功</p>\n<h2 id=\"5-8-Pod-调度策略\"><a href=\"#5-8-Pod-调度策略\" class=\"headerlink\" title=\"5.8 Pod 调度策略\"></a>5.8 Pod 调度策略</h2><ol>\n<li>Pod 资源限制对 Pod 调用产生影响</li>\n<li>节点选择器标签影响 Pod 调用</li>\n<li>节点亲和性对 pod 调用的影响</li>\n<li>污点与污点容忍</li>\n</ol>\n<h1 id=\"6-Kubernetes-核心技术-Controller\"><a href=\"#6-Kubernetes-核心技术-Controller\" class=\"headerlink\" title=\"6. Kubernetes 核心技术-Controller\"></a>6. Kubernetes 核心技术-Controller</h1><h1 id=\"6-Kubernetes-核心技术-Controller-1\"><a href=\"#6-Kubernetes-核心技术-Controller-1\" class=\"headerlink\" title=\"6. Kubernetes 核心技术-Controller\"></a>6. Kubernetes 核心技术-Controller</h1><h2 id=\"6-1-Controller-概述\"><a href=\"#6-1-Controller-概述\" class=\"headerlink\" title=\"6.1 Controller 概述\"></a>6.1 Controller 概述</h2><p>在集群上管理和运行管理的对象</p>\n<h2 id=\"6-2-Pod-和-Controller-的关系\"><a href=\"#6-2-Pod-和-Controller-的关系\" class=\"headerlink\" title=\"6.2 Pod 和 Controller 的关系\"></a>6.2 Pod 和 Controller 的关系</h2><p>Pod 是通过 Controller 实现应用的运维，比如伸缩、滚动升级等等 Pod 和 Controller 之间通过 label 建立关系 <a href=\"https://i.loli.net/2021/06/17/kImqYaBJXCWOpVR.jpg\"><img src=\"https://i.loli.net/2021/06/17/kImqYaBJXCWOpVR.jpg\"></a></p>\n<h2 id=\"6-3-Deployment-应用场景\"><a href=\"#6-3-Deployment-应用场景\" class=\"headerlink\" title=\"6.3 Deployment 应用场景\"></a>6.3 Deployment 应用场景</h2><ul>\n<li>部署无状态应用</li>\n<li>管理 Pod 和 ReplicaSet</li>\n<li>部署，滚动升级等功能</li>\n</ul>\n<p>应用场景：web 服务，微服务</p>\n<h2 id=\"6-4-使用-Deployment-部署应用（yaml）\"><a href=\"#6-4-使用-Deployment-部署应用（yaml）\" class=\"headerlink\" title=\"6.4 使用 Deployment 部署应用（yaml）\"></a>6.4 使用 Deployment 部署应用（yaml）</h2><h3 id=\"6-4-1-部署-nginx\"><a href=\"#6-4-1-部署-nginx\" class=\"headerlink\" title=\"6.4.1 部署 nginx\"></a>6.4.1 部署 nginx</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 导出 yaml 文件</span></span><br><span class=\"line\">kubectl create deployment nginx --image=nginx --dry-run=<span class=\"string\">&quot;client&quot;</span> -o yaml &gt; nginx.yaml</span><br></pre></td></tr></table></figure>\n\n<p>文件内容</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">creationTimestamp:</span> <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">strategy:</span> &#123;&#125;</span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">creationTimestamp:</span> <span class=\"literal\">null</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"attr\">status:</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用文件部署</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl apply -f nginx.yaml</span><br></pre></td></tr></table></figure>\n\n<p>部署完成后检查</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl get pods</span><br><span class=\"line\">NAME                    READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">nginx-f89759699-rbqtq   1/1     Running   0          116s</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-4-2-对外发布（暴露端口号）\"><a href=\"#6-4-2-对外发布（暴露端口号）\" class=\"headerlink\" title=\"6.4.2 对外发布（暴露端口号）\"></a>6.4.2 对外发布（暴露端口号）</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 导出 yaml 文件</span></span><br><span class=\"line\">kubectl expose deployment nginx --port=80 --<span class=\"built_in\">type</span>=NodePort --target-port=80 --name=web-expose -o yaml &gt;web-expose.yaml</span><br></pre></td></tr></table></figure>\n\n<p>web-expose.yaml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">creationTimestamp:</span> <span class=\"string\">&quot;2021-06-22T07:37:26Z&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">managedFields:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">    <span class=\"attr\">fieldsType:</span> <span class=\"string\">FieldsV1</span></span><br><span class=\"line\">    <span class=\"attr\">fieldsV1:</span></span><br><span class=\"line\">      <span class=\"attr\">f:metadata:</span></span><br><span class=\"line\">        <span class=\"attr\">f:labels:</span></span><br><span class=\"line\">          <span class=\"string\">.:</span> &#123;&#125;</span><br><span class=\"line\">          <span class=\"attr\">f:app:</span> &#123;&#125;</span><br><span class=\"line\">      <span class=\"attr\">f:spec:</span></span><br><span class=\"line\">        <span class=\"attr\">f:externalTrafficPolicy:</span> &#123;&#125;</span><br><span class=\"line\">        <span class=\"attr\">f:ports:</span></span><br><span class=\"line\">          <span class=\"string\">.:</span> &#123;&#125;</span><br><span class=\"line\">          <span class=\"string\">k:&#123;&quot;port&quot;:80,&quot;protocol&quot;:&quot;TCP&quot;&#125;:</span></span><br><span class=\"line\">            <span class=\"string\">.:</span> &#123;&#125;</span><br><span class=\"line\">            <span class=\"attr\">f:port:</span> &#123;&#125;</span><br><span class=\"line\">            <span class=\"attr\">f:protocol:</span> &#123;&#125;</span><br><span class=\"line\">            <span class=\"attr\">f:targetPort:</span> &#123;&#125;</span><br><span class=\"line\">        <span class=\"attr\">f:selector:</span></span><br><span class=\"line\">          <span class=\"string\">.:</span> &#123;&#125;</span><br><span class=\"line\">          <span class=\"attr\">f:app:</span> &#123;&#125;</span><br><span class=\"line\">        <span class=\"attr\">f:sessionAffinity:</span> &#123;&#125;</span><br><span class=\"line\">        <span class=\"attr\">f:type:</span> &#123;&#125;</span><br><span class=\"line\">    <span class=\"attr\">manager:</span> <span class=\"string\">kubectl</span></span><br><span class=\"line\">    <span class=\"attr\">operation:</span> <span class=\"string\">Update</span></span><br><span class=\"line\">    <span class=\"attr\">time:</span> <span class=\"string\">&quot;2021-06-22T07:37:26Z&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">web-expose</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">default</span></span><br><span class=\"line\">  <span class=\"attr\">resourceVersion:</span> <span class=\"string\">&quot;1409104&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">selfLink:</span> <span class=\"string\">/api/v1/namespaces/default/services/web-expose</span></span><br><span class=\"line\">  <span class=\"attr\">uid:</span> <span class=\"string\">0a065654-df89-4e36-babb-166b27429ebc</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">clusterIP:</span> <span class=\"number\">10.105</span><span class=\"number\">.48</span><span class=\"number\">.202</span></span><br><span class=\"line\">  <span class=\"attr\">externalTrafficPolicy:</span> <span class=\"string\">Cluster</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">nodePort:</span> <span class=\"number\">32386</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">    <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">sessionAffinity:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">NodePort</span></span><br><span class=\"line\"><span class=\"attr\">status:</span></span><br><span class=\"line\">  <span class=\"attr\">loadBalancer:</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl apply -f web-expose.yaml</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-5-应用升级回滚和弹性伸缩\"><a href=\"#6-5-应用升级回滚和弹性伸缩\" class=\"headerlink\" title=\"6.5 应用升级回滚和弹性伸缩\"></a>6.5 应用升级回滚和弹性伸缩</h2><h3 id=\"6-5-1-应用升级\"><a href=\"#6-5-1-应用升级\" class=\"headerlink\" title=\"6.5.1 应用升级\"></a>6.5.1 应用升级</h3><p>删除之前的 Deployment</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl delete deployment nginx </span><br></pre></td></tr></table></figure>\n\n<p>先部署一个低版本的 nginx,修改 nginx.yaml 文件（或者另外创建一个）</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">creationTimestamp:</span> <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">2</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">strategy:</span> &#123;&#125;</span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">creationTimestamp:</span> <span class=\"literal\">null</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.14</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"attr\">status:</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl apply -f nginx.yaml</span><br></pre></td></tr></table></figure>\n\n<p>部署完成后</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@k8s-master ~]<span class=\"comment\"># kubectl get pods</span></span><br><span class=\"line\">NAME                         READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">nginx-6b48675d6f-wpjnc   1/1     Running   0          5m12s</span><br><span class=\"line\">nginx-6b48675d6f-zs9gv   1/1     Running   0          5m12s</span><br></pre></td></tr></table></figure>\n\n<p>升级操作</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl <span class=\"built_in\">set</span> image deployment nginx nginx=nginx:1.16</span><br></pre></td></tr></table></figure>\n\n<p>升级过程</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@k8s-master ~]<span class=\"comment\"># kubectl get pods</span></span><br><span class=\"line\">NAME                         READY   STATUS              RESTARTS   AGE</span><br><span class=\"line\">nginx-6b48675d6f-wpjnc   1/1     Running             0          6m51s</span><br><span class=\"line\">nginx-6b48675d6f-zs9gv   1/1     Running             0          6m51s</span><br><span class=\"line\">nginx-6d84fbc5f9-l8qhp   0/1     ContainerCreating   0          15s</span><br></pre></td></tr></table></figure>\n\n<p>升级完成</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@k8s-master ~]<span class=\"comment\"># kubectl get pods</span></span><br><span class=\"line\">NAME                         READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">nginx-6d84fbc5f9-l8qhp   1/1     Running   0          3m3s</span><br><span class=\"line\">nginx-6d84fbc5f9-rzs5c   1/1     Running   0          38s</span><br></pre></td></tr></table></figure>\n\n<p>查看升级结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@k8s-master ~]<span class=\"comment\"># kubectl rollout status deployment nginx</span></span><br><span class=\"line\">deployment <span class=\"string\">&quot;nginx&quot;</span> successfully rolled out</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-5-2-回滚操作\"><a href=\"#6-5-2-回滚操作\" class=\"headerlink\" title=\"6.5.2 回滚操作\"></a>6.5.2 回滚操作</h3><p>查看历史版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@k8s-master ~]<span class=\"comment\"># kubectl rollout history deployment nginx</span></span><br><span class=\"line\">deployment.apps/nginx</span><br><span class=\"line\">REVISION  CHANGE-CAUSE</span><br><span class=\"line\">1         &lt;none&gt;</span><br><span class=\"line\">2         &lt;none&gt;</span><br></pre></td></tr></table></figure>\n\n<p>回滚至上一个版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@k8s-master ~]<span class=\"comment\"># kubectl rollout undo deployment nginx</span></span><br><span class=\"line\">deployment.apps/nginx rolled back</span><br></pre></td></tr></table></figure>\n\n<p>回滚至指定版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@k8s-master ~]<span class=\"comment\"># kubectl rollout undo deployment nginx --to-revision=2</span></span><br><span class=\"line\">deployment.apps/nginx rolled back</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-5-3-弹性伸缩\"><a href=\"#6-5-3-弹性伸缩\" class=\"headerlink\" title=\"6.5.3 弹性伸缩\"></a>6.5.3 弹性伸缩</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 伸缩至副本至 20 </span></span><br><span class=\"line\">kubectl scale deployment nginx 1.14 --replicas=20</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-6-部署有状态应用\"><a href=\"#6-6-部署有状态应用\" class=\"headerlink\" title=\"6.6 部署有状态应用\"></a>6.6 部署有状态应用</h2><h3 id=\"6-6-1-无状态和有状态的区别\"><a href=\"#6-6-1-无状态和有状态的区别\" class=\"headerlink\" title=\"6.6.1 无状态和有状态的区别\"></a>6.6.1 无状态和有状态的区别</h3><blockquote>\n<p>听说过一个通俗的说法可以辅助记忆下：无状态就是你养了一群鸭，死了一只，再买一只补充进去进行了，有状态就是你养了一只宠物鸭，死了的话你再买一只宠物的话那也不是和你之前有感情的宠物了</p>\n</blockquote>\n<p><strong>无状态</strong>：</p>\n<ol>\n<li>任务 pod 都是一样的</li>\n<li>没有顺序要求</li>\n<li>不用考虑在哪个 node 运行</li>\n<li>随意进行伸缩和扩展</li>\n</ol>\n<p><strong>有状态</strong>：</p>\n<ol>\n<li>每个 pod 都是独立的，保持 pod 启动顺序和唯一性</li>\n<li>唯一的网络标识符，持久存储</li>\n<li>有序，比如 mysql 主从</li>\n</ol>\n<h3 id=\"6-6-2-部署有状态应用\"><a href=\"#6-6-2-部署有状态应用\" class=\"headerlink\" title=\"6.6.2 部署有状态应用\"></a>6.6.2 部署有状态应用</h3><p>CLusterIP:none <strong>SatefulSet 部署有状态应用</strong> 创建 sts.yaml 文件：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">web</span></span><br><span class=\"line\">  <span class=\"attr\">clusterIP:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">StatefulSet</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-statefulset</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">serviceName:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">nginx:latest</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>创建应用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@k8s-master ~]<span class=\"comment\"># kubectl apply -f sts.yaml</span></span><br><span class=\"line\">service/nginx created</span><br><span class=\"line\">statefulset.apps/nginx-statefulset created</span><br></pre></td></tr></table></figure>\n\n<p>创建完成后</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@k8s-master ~]<span class=\"comment\"># kubectl get pods</span></span><br><span class=\"line\">NAME                         READY   STATUS              RESTARTS   AGE</span><br><span class=\"line\">nginx-statefulset-0          1/1     Running             0          3m14s</span><br><span class=\"line\">nginx-statefulset-1          1/1     Running             0          1m12s</span><br><span class=\"line\">nginx-statefulset-2          1/1     Running             0          12s</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-7-部署守护进程\"><a href=\"#6-7-部署守护进程\" class=\"headerlink\" title=\"6.7 部署守护进程\"></a>6.7 部署守护进程</h2><p>所有 pod 运行在一个 node 中，类似于日志采集需要固定到每个节点上的场景需要使用 创建 ds.yaml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">DaemonSet</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">ds-test</span> </span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">filebeat</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">filebeat</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">filebeat</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">logs</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">varlog</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/tmp/log</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">varlog</span></span><br><span class=\"line\">        <span class=\"attr\">hostPath:</span></span><br><span class=\"line\">          <span class=\"attr\">path:</span> <span class=\"string\">/var/log</span></span><br></pre></td></tr></table></figure>\n\n<p>创建应用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl apply -f ds.yaml</span><br></pre></td></tr></table></figure>\n\n<p>查看</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@k8s-master ~]<span class=\"comment\"># kubectl get pods</span></span><br><span class=\"line\">NAME            READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">ds-test-gzjpl   1/1     Running   0          25s</span><br><span class=\"line\">ds-test-hhzxt   1/1     Running   0          25s</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-8-一次任务和定时任务\"><a href=\"#6-8-一次任务和定时任务\" class=\"headerlink\" title=\"6.8 一次任务和定时任务\"></a>6.8 一次任务和定时任务</h2><p>一次性 job.yaml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">batch/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Job</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pi</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">pi</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">perl</span></span><br><span class=\"line\">        <span class=\"attr\">command:</span> [<span class=\"string\">&quot;perl&quot;</span>,  <span class=\"string\">&quot;-Mbignum=bpi&quot;</span>, <span class=\"string\">&quot;-wle&quot;</span>, <span class=\"string\">&quot;print bpi(2000)&quot;</span>]</span><br><span class=\"line\">      <span class=\"attr\">restartPolicy:</span> <span class=\"string\">Never</span></span><br><span class=\"line\">  <span class=\"attr\">backoffLimit:</span> <span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n\n<p>定时任务 cronjob.yaml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">batch/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">CronJob</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">hello</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span> <span class=\"string\">&quot;*/1 * * * *&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">jobTemplate:</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">template:</span></span><br><span class=\"line\">        <span class=\"attr\">spec:</span></span><br><span class=\"line\">          <span class=\"attr\">containers:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">hello</span></span><br><span class=\"line\">            <span class=\"attr\">image:</span> <span class=\"string\">busybox</span></span><br><span class=\"line\">            <span class=\"attr\">args:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">/bin/sh</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">-c</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">date;</span> <span class=\"string\">echo</span> <span class=\"string\">Hello</span> <span class=\"string\">from</span> <span class=\"string\">the</span> <span class=\"string\">Kubernetes</span> <span class=\"string\">cluster</span></span><br><span class=\"line\">          <span class=\"attr\">restartPolicy:</span> <span class=\"string\">OnFailure</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"7-Kubernetes-核心技术-Service\"><a href=\"#7-Kubernetes-核心技术-Service\" class=\"headerlink\" title=\"7. Kubernetes 核心技术-Service\"></a>7. Kubernetes 核心技术-Service</h1><h2 id=\"7-1-用途\"><a href=\"#7-1-用途\" class=\"headerlink\" title=\"7.1 用途\"></a>7.1 用途</h2><ol>\n<li>防止 Pod 失联（服务发现）: Pod的生命周期短，Pod 在创建或者销毁的时候会注册到 service 中，使调用者能调用到 pod 的真实 ip <a href=\"https://i.loli.net/2021/06/22/L6WJARXPSerQ7Db.jpg\"><img src=\"https://i.loli.net/2021/06/22/L6WJARXPSerQ7Db.jpg\"></a></li>\n<li>定义一组 Pod 的访问策略（负载均衡） <a href=\"https://i.loli.net/2021/06/22/XiJE8jDWend6fV5.jpg\"><img src=\"https://i.loli.net/2021/06/22/XiJE8jDWend6fV5.jpg\"></a></li>\n</ol>\n<h2 id=\"7-2-Pod-和-Service-之间的关系\"><a href=\"#7-2-Pod-和-Service-之间的关系\" class=\"headerlink\" title=\"7.2 Pod 和 Service 之间的关系\"></a>7.2 Pod 和 Service 之间的关系</h2><p>根据 label 和 selector 标签简历关联的 <a href=\"https://i.loli.net/2021/06/22/dCFOhrwmTNxv3fb.jpg\"><img src=\"https://i.loli.net/2021/06/22/dCFOhrwmTNxv3fb.jpg\"></a></p>\n<h2 id=\"7-3-常见的-Service-类型\"><a href=\"#7-3-常见的-Service-类型\" class=\"headerlink\" title=\"7.3 常见的 Service 类型\"></a>7.3 常见的 Service 类型</h2><p><strong>ClusterIP：</strong>集群内部进行使用，例如服务间相互访问，不对外提供，类型为ClusterIP的service，这个service有一个Cluster-IP，其实就一个VIP。具体实现原理依靠kubeproxy组件，通过iptables或是ipvs实现。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">service-python</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">3000</span></span><br><span class=\"line\">    <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">443</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">run:</span> <span class=\"string\">pod-python</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://i.loli.net/2021/06/22/CWMlRJnjPSY7OhL.jpg\"><img src=\"https://i.loli.net/2021/06/22/CWMlRJnjPSY7OhL.jpg\"></a> <strong>NodePort：</strong>我们的场景不全是集群内访问，也需要集群外业务访问。那么ClusterIP就满足不了了。NodePort当然是其中的一种实现方案。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">service-python</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">3000</span></span><br><span class=\"line\">    <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">443</span></span><br><span class=\"line\">    <span class=\"attr\">nodePort:</span> <span class=\"number\">30080</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">run:</span> <span class=\"string\">pod-python</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">NodePort</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://i.loli.net/2021/06/22/AdcNXpLl3W48gKP.jpg\"><img src=\"https://i.loli.net/2021/06/22/AdcNXpLl3W48gKP.jpg\"></a> <strong>LoadBalance：</strong>LoadBalancer类型的service 是可以实现集群外部访问服务的另外一种解决方案。不过并不是所有的k8s集群都会支持，大多是在公有云托管集群中会支持该类型。负载均衡器是异步创建的，关于被提供的负载均衡器的信息将会通过Service的status.loadBalancer字段被发布出去。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">service-python</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">3000</span></span><br><span class=\"line\">    <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">443</span></span><br><span class=\"line\">    <span class=\"attr\">nodePort:</span> <span class=\"number\">30080</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">run:</span> <span class=\"string\">pod-python</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">LoadBalancer</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"8-kubernetes-核心技术-配置管理\"><a href=\"#8-kubernetes-核心技术-配置管理\" class=\"headerlink\" title=\"8. kubernetes 核心技术-配置管理\"></a>8. kubernetes 核心技术-配置管理</h1><blockquote>\n<p>这一部分视频讲的并不好，所以没有记详细的笔记，贴了中文文档作参考</p>\n</blockquote>\n<h2 id=\"8-1-Secret\"><a href=\"#8-1-Secret\" class=\"headerlink\" title=\"8.1 Secret\"></a>8.1 Secret</h2><p>作用：<code>Secret</code> 对象类型用来保存敏感信息，例如密码、OAuth 令牌和 SSH 密钥。 将这些信息放在 <code>secret</code> 中比放在 <a href=\"https://kubernetes.io/docs/concepts/workloads/pods/pod-overview/\">Pod</a> 的定义或者 <a href=\"https://kubernetes.io/zh/docs/reference/glossary/?all=true#term-image\">容器镜像</a> 中来说更加安全和灵活，加密数据存在 etcd 中，让 pod 容器以挂载 Volume 方式进行访问 场景：凭证 中文文档：<a href=\"https://kubernetes.io/zh/docs/concepts/configuration/secret/\">https://kubernetes.io/zh/docs/concepts/configuration/secret/</a></p>\n<h2 id=\"8-2-ConfigMap\"><a href=\"#8-2-ConfigMap\" class=\"headerlink\" title=\"8.2 ConfigMap\"></a>8.2 ConfigMap</h2><p>作用：ConfigMap 是一种 API 对象，用来将非机密性的数据保存到键值对中。使用时， <a href=\"https://kubernetes.io/docs/concepts/workloads/pods/pod-overview/\">Pods</a> 可以将其用作环境变量、命令行参数或者存储卷中的配置文件。 场景：ConfigMap 将您的环境配置信息和 <a href=\"https://kubernetes.io/zh/docs/reference/glossary/?all=true#term-image\">容器镜像</a> 解耦，便于应用配置的修改。 中文文档：<a href=\"https://kubernetes.io/zh/docs/concepts/configuration/configmap/\">https://kubernetes.io/zh/docs/concepts/configuration/configmap/</a></p>\n<h1 id=\"9-Kubernetes-核心技术-集群安全机制\"><a href=\"#9-Kubernetes-核心技术-集群安全机制\" class=\"headerlink\" title=\"9. Kubernetes 核心技术-集群安全机制\"></a>9. Kubernetes 核心技术-集群安全机制</h1><h2 id=\"9-1-概述\"><a href=\"#9-1-概述\" class=\"headerlink\" title=\"9.1 概述\"></a>9.1 概述</h2><ol>\n<li>访问 k8s 集群时候，需要经过三个步骤完成具体操作</li>\n</ol>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">第一步认证 传输安全</span><br><span class=\"line\">* 传输安全： 对外不暴露 8080 端口，只能内部访问，对外使用 6443</span><br><span class=\"line\">* 认证 ： https 证书认证，基于 ca 证书；https token 认证，通过 token 识别用户；http 基本认证，用户名+密码</span><br><span class=\"line\"></span><br><span class=\"line\">第二步 鉴权</span><br><span class=\"line\">* 基于 RBAC 进行鉴权操作</span><br><span class=\"line\">* 基于角色访问控制</span><br><span class=\"line\"></span><br><span class=\"line\">第三步 准入控制</span><br><span class=\"line\">* 准入控制器列表，如果列表有请求内容，则通过</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>进行访问时候，过程中都需要经过 apiserver，apiserver 做统一协调，比如门卫</li>\n</ol>\n<h2 id=\"9-2-RBAC-介绍\"><a href=\"#9-2-RBAC-介绍\" class=\"headerlink\" title=\"9.2 RBAC 介绍\"></a>9.2 RBAC 介绍</h2><blockquote>\n<p><a href=\"https://kubernetes.io/zh/docs/reference/access-authn-authz/rbac/\">https://kubernetes.io/zh/docs/reference/access-authn-authz/rbac/</a></p>\n</blockquote>\n<p>基于角色的访问控制 RBAC API 声明了四种 Kubernetes 对象：<em>Role_、_ClusterRole_、_RoleBinding</em> 和 _ClusterRoleBinding_。你可以像使用其他 Kubernetes 对象一样， 通过类似 <code>kubectl</code> 这类工具 <a href=\"https://kubernetes.io/zh/docs/concepts/overview/working-with-objects/kubernetes-objects/#understanding-kubernetes-objects\">描述对象</a>, 或修补对象。</p>\n<h3 id=\"Role-和-ClusterRole\"><a href=\"#Role-和-ClusterRole\" class=\"headerlink\" title=\"Role 和 ClusterRole\"></a>Role 和 ClusterRole</h3><p>RBAC 的 <em>Role</em> 或 <em>ClusterRole</em> 中包含一组代表相关权限的规则。 这些权限是纯粹累加的（不存在拒绝某操作的规则）。 Role 总是用来在某个<a href=\"https://kubernetes.io/zh/docs/concepts/overview/working-with-objects/namespaces/\">名字空间</a> 内设置访问权限；在你创建 Role 时，你必须指定该 Role 所属的名字空间。 与之相对，ClusterRole 则是一个集群作用域的资源。这两种资源的名字不同（Role 和 ClusterRole）是因为 Kubernetes 对象要么是名字空间作用域的，要么是集群作用域的， 不可两者兼具。 ClusterRole 有若干用法。你可以用它来：</p>\n<ol>\n<li>定义对某名字空间域对象的访问权限，并将在各个名字空间内完成授权；</li>\n<li>为名字空间作用域的对象设置访问权限，并跨所有名字空间执行授权；</li>\n<li>为集群作用域的资源定义访问权限。</li>\n</ol>\n<p>如果你希望在名字空间内定义角色，应该使用 Role； 如果你希望定义集群范围的角色，应该使用 ClusterRole。</p>\n<h3 id=\"RoleBinding-和-ClusterRoleBinding\"><a href=\"#RoleBinding-和-ClusterRoleBinding\" class=\"headerlink\" title=\"RoleBinding 和 ClusterRoleBinding\"></a>RoleBinding 和 ClusterRoleBinding</h3><p>角色绑定（Role Binding）是将角色中定义的权限赋予一个或者一组用户。 它包含若干 <strong>主体</strong>（用户、组或服务账户）的列表和对这些主体所获得的角色的引用。 RoleBinding 在指定的名字空间中执行授权，而 ClusterRoleBinding 在集群范围执行授权。 一个 RoleBinding 可以引用同一的名字空间中的任何 Role。 或者，一个 RoleBinding 可以引用某 ClusterRole 并将该 ClusterRole 绑定到 RoleBinding 所在的名字空间。 如果你希望将某 ClusterRole 绑定到集群中所有名字空间，你要使用 ClusterRoleBinding。 RoleBinding 或 ClusterRoleBinding 对象的名称必须是合法的 <a href=\"https://kubernetes.io/zh/docs/concepts/overview/working-with-objects/names#path-segment-names\">路径区段名称</a>。</p>\n<h1 id=\"10-Kubernetes-核心技术-Ingress\"><a href=\"#10-Kubernetes-核心技术-Ingress\" class=\"headerlink\" title=\"10. Kubernetes 核心技术 - Ingress\"></a>10. Kubernetes 核心技术 - Ingress</h1><p>Ingress 是对集群中服务的外部访问进行管理的 API 对象，典型的访问方式是 HTTP。 Ingress 可以提供负载均衡、SSL 终结和基于名称的虚拟托管。</p>\n<h2 id=\"10-1-Ingress-和-pod-关系\"><a href=\"#10-1-Ingress-和-pod-关系\" class=\"headerlink\" title=\"10.1 Ingress 和 pod 关系\"></a>10.1 Ingress 和 pod 关系</h2><ol>\n<li><p>pod 和 ingress 通过 service 关联</p>\n</li>\n<li><p>ingress 作为统一入口，由 service 关联一组 pod <a href=\"https://i.loli.net/2021/06/30/1pXqsIkrczWSayi.jpg\"><img src=\"https://i.loli.net/2021/06/30/1pXqsIkrczWSayi.jpg\"></a></p>\n</li>\n</ol>\n<h2 id=\"10-2-ingress-工作流程\"><a href=\"#10-2-ingress-工作流程\" class=\"headerlink\" title=\"10.2 ingress 工作流程\"></a>10.2 ingress 工作流程</h2><p><a href=\"https://i.loli.net/2021/06/30/8eXd3GmfgPjlMzS.jpg\"><img src=\"https://i.loli.net/2021/06/30/8eXd3GmfgPjlMzS.jpg\"></a> <a href=\"https://i.loli.net/2021/06/30/EMrtvoNmVsdPbGA.jpg\"><img src=\"https://i.loli.net/2021/06/30/EMrtvoNmVsdPbGA.jpg\"></a></p>\n<h2 id=\"10-3-ingress-使用\"><a href=\"#10-3-ingress-使用\" class=\"headerlink\" title=\"10.3 ingress 使用\"></a>10.3 ingress 使用</h2><h3 id=\"创建需要暴露端口的应用\"><a href=\"#创建需要暴露端口的应用\" class=\"headerlink\" title=\"创建需要暴露端口的应用\"></a>创建需要暴露端口的应用</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建 Deployment</span></span><br><span class=\"line\">kubectl create deployment web --image=nginx</span><br><span class=\"line\"><span class=\"comment\"># 创建 service</span></span><br><span class=\"line\">kubectl expose deployment web --port=80 --target-port=80 --<span class=\"built_in\">type</span>=NodePort</span><br><span class=\"line\"><span class=\"comment\"># 此时可以通过 nodeIp:port 访问服务</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"部署-Ingress-Controller\"><a href=\"#部署-Ingress-Controller\" class=\"headerlink\" title=\"部署 Ingress Controller\"></a>部署 Ingress Controller</h3><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这里部署官方的维护的 nginx ingress 控制器</span></span><br><span class=\"line\"><span class=\"comment\"># 创建 ingress-Controller.yaml 文件</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Namespace</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app.kubernetes.io/name:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\">    <span class=\"attr\">app.kubernetes.io/part-of:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-configuration</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app.kubernetes.io/name:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\">    <span class=\"attr\">app.kubernetes.io/part-of:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">tcp-services</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app.kubernetes.io/name:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\">    <span class=\"attr\">app.kubernetes.io/part-of:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">udp-services</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app.kubernetes.io/name:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\">    <span class=\"attr\">app.kubernetes.io/part-of:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-ingress-serviceaccount</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app.kubernetes.io/name:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\">    <span class=\"attr\">app.kubernetes.io/part-of:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-ingress-clusterrole</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app.kubernetes.io/name:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\">    <span class=\"attr\">app.kubernetes.io/part-of:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">configmaps</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">endpoints</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">nodes</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">pods</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">secrets</span></span><br><span class=\"line\">    <span class=\"attr\">verbs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">list</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">watch</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">nodes</span></span><br><span class=\"line\">    <span class=\"attr\">verbs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">get</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">services</span></span><br><span class=\"line\">    <span class=\"attr\">verbs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">get</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">list</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">watch</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">events</span></span><br><span class=\"line\">    <span class=\"attr\">verbs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">create</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">patch</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;extensions&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;networking.k8s.io&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ingresses</span></span><br><span class=\"line\">    <span class=\"attr\">verbs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">get</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">list</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">watch</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;extensions&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;networking.k8s.io&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ingresses/status</span></span><br><span class=\"line\">    <span class=\"attr\">verbs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">update</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Role</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-ingress-role</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app.kubernetes.io/name:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\">    <span class=\"attr\">app.kubernetes.io/part-of:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">configmaps</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">pods</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">secrets</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">namespaces</span></span><br><span class=\"line\">    <span class=\"attr\">verbs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">get</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">configmaps</span></span><br><span class=\"line\">    <span class=\"attr\">resourceNames:</span></span><br><span class=\"line\">      <span class=\"comment\"># Defaults to &quot;&lt;election-id&gt;-&lt;ingress-class&gt;&quot;</span></span><br><span class=\"line\">      <span class=\"comment\"># Here: &quot;&lt;ingress-controller-leader&gt;-&lt;nginx&gt;&quot;</span></span><br><span class=\"line\">      <span class=\"comment\"># This has to be adapted if you change either parameter</span></span><br><span class=\"line\">      <span class=\"comment\"># when launching the nginx-ingress-controller.</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;ingress-controller-leader-nginx&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">verbs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">get</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">update</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">configmaps</span></span><br><span class=\"line\">    <span class=\"attr\">verbs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">create</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">endpoints</span></span><br><span class=\"line\">    <span class=\"attr\">verbs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">get</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">RoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-ingress-role-nisa-binding</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app.kubernetes.io/name:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\">    <span class=\"attr\">app.kubernetes.io/part-of:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">Role</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-ingress-role</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">nginx-ingress-serviceaccount</span></span><br><span class=\"line\">    <span class=\"attr\">namespace:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-ingress-clusterrole-nisa-binding</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app.kubernetes.io/name:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\">    <span class=\"attr\">app.kubernetes.io/part-of:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-ingress-clusterrole</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">nginx-ingress-serviceaccount</span></span><br><span class=\"line\">    <span class=\"attr\">namespace:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-ingress-controller</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app.kubernetes.io/name:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\">    <span class=\"attr\">app.kubernetes.io/part-of:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app.kubernetes.io/name:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\">      <span class=\"attr\">app.kubernetes.io/part-of:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app.kubernetes.io/name:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\">        <span class=\"attr\">app.kubernetes.io/part-of:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\">      <span class=\"attr\">annotations:</span></span><br><span class=\"line\">        <span class=\"attr\">prometheus.io/port:</span> <span class=\"string\">&quot;10254&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">prometheus.io/scrape:</span> <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">hostNetwork:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"comment\"># wait up to five minutes for the drain of connections</span></span><br><span class=\"line\">      <span class=\"attr\">terminationGracePeriodSeconds:</span> <span class=\"number\">300</span></span><br><span class=\"line\">      <span class=\"attr\">serviceAccountName:</span> <span class=\"string\">nginx-ingress-serviceaccount</span></span><br><span class=\"line\">      <span class=\"attr\">nodeSelector:</span></span><br><span class=\"line\">        <span class=\"attr\">kubernetes.io/os:</span> <span class=\"string\">linux</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx-ingress-controller</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">lizhenliang/nginx-ingress-controller:0.30.0</span></span><br><span class=\"line\">          <span class=\"attr\">args:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">/nginx-ingress-controller</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">--configmap=$(POD_NAMESPACE)/nginx-configuration</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">--tcp-services-configmap=$(POD_NAMESPACE)/tcp-services</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">--udp-services-configmap=$(POD_NAMESPACE)/udp-services</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">--publish-service=$(POD_NAMESPACE)/ingress-nginx</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">--annotations-prefix=nginx.ingress.kubernetes.io</span></span><br><span class=\"line\">          <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">            <span class=\"attr\">allowPrivilegeEscalation:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">            <span class=\"attr\">capabilities:</span></span><br><span class=\"line\">              <span class=\"attr\">drop:</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">ALL</span></span><br><span class=\"line\">              <span class=\"attr\">add:</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">NET_BIND_SERVICE</span></span><br><span class=\"line\">            <span class=\"comment\"># www-data -&gt; 101</span></span><br><span class=\"line\">            <span class=\"attr\">runAsUser:</span> <span class=\"number\">101</span></span><br><span class=\"line\">          <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">POD_NAME</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">fieldPath:</span> <span class=\"string\">metadata.name</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">POD_NAMESPACE</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">fieldPath:</span> <span class=\"string\">metadata.namespace</span></span><br><span class=\"line\">          <span class=\"attr\">ports:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">http</span></span><br><span class=\"line\">              <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">              <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">https</span></span><br><span class=\"line\">              <span class=\"attr\">containerPort:</span> <span class=\"number\">443</span></span><br><span class=\"line\">              <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">          <span class=\"attr\">livenessProbe:</span></span><br><span class=\"line\">            <span class=\"attr\">failureThreshold:</span> <span class=\"number\">3</span></span><br><span class=\"line\">            <span class=\"attr\">httpGet:</span></span><br><span class=\"line\">              <span class=\"attr\">path:</span> <span class=\"string\">/healthz</span></span><br><span class=\"line\">              <span class=\"attr\">port:</span> <span class=\"number\">10254</span></span><br><span class=\"line\">              <span class=\"attr\">scheme:</span> <span class=\"string\">HTTP</span></span><br><span class=\"line\">            <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">            <span class=\"attr\">periodSeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">            <span class=\"attr\">successThreshold:</span> <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">          <span class=\"attr\">readinessProbe:</span></span><br><span class=\"line\">            <span class=\"attr\">failureThreshold:</span> <span class=\"number\">3</span></span><br><span class=\"line\">            <span class=\"attr\">httpGet:</span></span><br><span class=\"line\">              <span class=\"attr\">path:</span> <span class=\"string\">/healthz</span></span><br><span class=\"line\">              <span class=\"attr\">port:</span> <span class=\"number\">10254</span></span><br><span class=\"line\">              <span class=\"attr\">scheme:</span> <span class=\"string\">HTTP</span></span><br><span class=\"line\">            <span class=\"attr\">periodSeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">            <span class=\"attr\">successThreshold:</span> <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">          <span class=\"attr\">lifecycle:</span></span><br><span class=\"line\">            <span class=\"attr\">preStop:</span></span><br><span class=\"line\">              <span class=\"attr\">exec:</span></span><br><span class=\"line\">                <span class=\"attr\">command:</span></span><br><span class=\"line\">                  <span class=\"bullet\">-</span> <span class=\"string\">/wait-shutdown</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">LimitRange</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app.kubernetes.io/name:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\">    <span class=\"attr\">app.kubernetes.io/part-of:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">limits:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">min:</span></span><br><span class=\"line\">      <span class=\"attr\">memory:</span> <span class=\"string\">90Mi</span></span><br><span class=\"line\">      <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">Container</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建-ingress-规则\"><a href=\"#创建-ingress-规则\" class=\"headerlink\" title=\"创建 ingress 规则\"></a>创建 ingress 规则</h3><p>创建 ingress-path.yaml,其中 host 写自己的域名，也可以写测试域名本地加解析</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">networking.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Ingress</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">example-ingress</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">rules:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">host:</span> <span class=\"string\">ingress.52ynn.top</span></span><br><span class=\"line\">    <span class=\"attr\">http:</span></span><br><span class=\"line\">      <span class=\"attr\">paths:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">path:</span> <span class=\"string\">/</span></span><br><span class=\"line\">        <span class=\"attr\">backend:</span></span><br><span class=\"line\">          <span class=\"attr\">serviceName:</span> <span class=\"string\">web</span></span><br><span class=\"line\">          <span class=\"attr\">servicePort:</span> <span class=\"number\">80</span></span><br></pre></td></tr></table></figure>\n\n<p>生成规则</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl apply -f  ingress-path.yaml</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"访问验证\"><a href=\"#访问验证\" class=\"headerlink\" title=\"访问验证\"></a>访问验证</h3><p>添加域名解析后访问域名，或者本地修改 hosts 文件将域名指向对应 ip <a href=\"https://i.loli.net/2021/06/30/gGI2ojHlaNxP9sw.jpg\"><img src=\"https://i.loli.net/2021/06/30/gGI2ojHlaNxP9sw.jpg\"></a></p>\n<h1 id=\"11-kubernetes-核心技术-helm\"><a href=\"#11-kubernetes-核心技术-helm\" class=\"headerlink\" title=\"11. kubernetes 核心技术 - helm\"></a>11. kubernetes 核心技术 - helm</h1><h2 id=\"11-1-helm-介绍\"><a href=\"#11-1-helm-介绍\" class=\"headerlink\" title=\"11.1 helm 介绍\"></a>11.1 helm 介绍</h2><p><strong>是什么？</strong></p>\n<ol>\n<li><a href=\"http://helm.sh/\">Helm</a> 是一个 Kubernetes 应用的包管理工具，用来管理 <a href=\"https://github.com/helm/charts\">chart</a>——预先配置好的安装包资源，有点类似于 Ubuntu 的 APT 和 CentOS 中的 YUM。</li>\n</ol>\n<p><strong>可以解决哪些问题？</strong></p>\n<ol>\n<li>使用 helm 可以将众多 yaml 作为一个整体管理</li>\n<li>实现 yaml 文件高效复用</li>\n<li>实现应用级别的版本管理</li>\n</ol>\n<p><strong>主要概念哪些？</strong></p>\n<ol>\n<li>Helm： 命令行工具，主要用于 kubernetes 应用 chart 的创建、打包、发布和管理</li>\n<li>Chart： 把 yaml 打包，一系列用于描述 kubernetes 资源相关文件的集合</li>\n<li>Release： 基于 Chart 的部署实体，一个 chart 被 helm 运行后会生成对应的一个 release；将在 k8s 中创建出真实运行的资源对象</li>\n</ol>\n<p><strong>V3 版本变化？</strong></p>\n<ol>\n<li>V3 版本中删除 Tiller</li>\n<li>Release 在 V3 版本中可以在不同的命名空间中重用</li>\n<li>支持将 chart 推送到 docker 镜像仓库</li>\n</ol>\n<h2 id=\"11-2-helm-的安装和配置仓库\"><a href=\"#11-2-helm-的安装和配置仓库\" class=\"headerlink\" title=\"11.2 helm 的安装和配置仓库\"></a>11.2 helm 的安装和配置仓库</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>安装文档：<a href=\"https://helm.sh/zh/docs/intro/install/\">https://helm.sh/zh/docs/intro/install/</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这里使用的是安装脚本自动安装</span></span><br><span class=\"line\">curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3  bash</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置-helm-仓库\"><a href=\"#配置-helm-仓库\" class=\"headerlink\" title=\"配置 helm 仓库\"></a>配置 helm 仓库</h3><p>添加仓库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 添加</span></span><br><span class=\"line\">helm repo add ali-stable https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts</span><br><span class=\"line\"><span class=\"comment\"># 查看</span></span><br><span class=\"line\">helm repo list</span><br><span class=\"line\"><span class=\"comment\"># 更新</span></span><br><span class=\"line\">helm repo update</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11-3-使用-helm-快速部署应用\"><a href=\"#11-3-使用-helm-快速部署应用\" class=\"headerlink\" title=\"11.3 使用 helm 快速部署应用\"></a>11.3 使用 helm 快速部署应用</h3><p><strong>使用命令搜索应用</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@k8s-master ~]<span class=\"comment\"># helm search repo weave</span></span><br><span class=\"line\">NAME                CHART VERSION   APP VERSION DESCRIPTION</span><br><span class=\"line\">stable/weave-cloud  0.3.8           1.4.0       Weave Cloud is a add-on to Kubernetes <span class=\"built_in\">which</span> pro...</span><br><span class=\"line\">stable/weave-scope  1.1.11          1.12.0      A Helm chart <span class=\"keyword\">for</span> the Weave Scope cluster visual...</span><br></pre></td></tr></table></figure>\n\n<p><strong>根据搜索内容选择安装</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@k8s-master ~]<span class=\"comment\"># helm install ui stable/weave-scope</span></span><br><span class=\"line\">NAME: ui</span><br><span class=\"line\">LAST DEPLOYED: Thu Jul  1 16:50:16 2021</span><br><span class=\"line\">NAMESPACE: default</span><br><span class=\"line\">STATUS: deployed</span><br><span class=\"line\">REVISION: 1</span><br><span class=\"line\">NOTES:</span><br><span class=\"line\">You should now be able to access the Scope frontend <span class=\"keyword\">in</span> your web browser, by</span><br><span class=\"line\">using kubectl port-forward:</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl -n default port-forward $(kubectl -n default get endpoints \\</span><br><span class=\"line\">ui-weave-scope -o jsonpath=<span class=\"string\">&#x27;&#123;.subsets[0].addresses[0].targetRef.name&#125;&#x27;</span>) 8080:4040</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">then</span> browsing to http://localhost:8080/.</span><br><span class=\"line\">For more details on using Weave Scope, see the Weave Scope documentation:</span><br><span class=\"line\"></span><br><span class=\"line\">https://www.weave.works/docs/scope/latest/introducing/</span><br></pre></td></tr></table></figure>\n\n<p>此时 service 默认模式为 ClusterIP，可以修改为 NodePort 方便测试</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl edit svc ui-weave-scope</span><br></pre></td></tr></table></figure>\n\n<p>修改 spec.type 为 NodePort 后保存退出,查看</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@k8s-master ~]<span class=\"comment\"># kubectl get svc</span></span><br><span class=\"line\">NAME             TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGE</span><br><span class=\"line\">kubernetes       ClusterIP   10.96.0.1        &lt;none&gt;        443/TCP        28d</span><br><span class=\"line\">ui-weave-scope   NodePort    10.109.92.86     &lt;none&gt;        80:32207/TCP   54s</span><br><span class=\"line\">web              NodePort    10.107.210.102   &lt;none&gt;        80:30591/TCP   24h</span><br></pre></td></tr></table></figure>\n\n<p><strong>浏览器访问</strong> <a href=\"https://i.loli.net/2021/07/01/GU3tZ5xusDXrEI6.jpg\"><img src=\"https://i.loli.net/2021/07/01/GU3tZ5xusDXrEI6.jpg\"></a></p>\n<h2 id=\"11-4-自定义-chart\"><a href=\"#11-4-自定义-chart\" class=\"headerlink\" title=\"11.4 自定义 chart\"></a>11.4 自定义 chart</h2><h3 id=\"使用命令创建-chart\"><a href=\"#使用命令创建-chart\" class=\"headerlink\" title=\"使用命令创建 chart\"></a>使用命令创建 chart</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">helm create myChart <span class=\"comment\"># 会生成一个名称为 myChart 的目录</span></span><br></pre></td></tr></table></figure>\n\n<p>目录结构为</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">myChart/</span></span><br><span class=\"line\"><span class=\"string\">├──</span> <span class=\"string\">charts</span></span><br><span class=\"line\"><span class=\"string\">├──</span> <span class=\"string\">Chart.yaml</span>   <span class=\"comment\"># 当前 chart 属性配置信息</span></span><br><span class=\"line\"><span class=\"string\">├──</span> <span class=\"string\">templates</span>  <span class=\"comment\"># 存放自定义 yaml 文件</span></span><br><span class=\"line\"><span class=\"string\">│</span>   <span class=\"string\">├──</span> <span class=\"string\">deployment.yaml</span></span><br><span class=\"line\"><span class=\"string\">│</span>   <span class=\"string\">├──</span> <span class=\"string\">_helpers.tpl</span></span><br><span class=\"line\"><span class=\"string\">│</span>   <span class=\"string\">├──</span> <span class=\"string\">hpa.yaml</span></span><br><span class=\"line\"><span class=\"string\">│</span>   <span class=\"string\">├──</span> <span class=\"string\">ingress.yaml</span></span><br><span class=\"line\"><span class=\"string\">│</span>   <span class=\"string\">├──</span> <span class=\"string\">NOTES.txt</span></span><br><span class=\"line\"><span class=\"string\">│</span>   <span class=\"string\">├──</span> <span class=\"string\">serviceaccount.yaml</span></span><br><span class=\"line\"><span class=\"string\">│</span>   <span class=\"string\">├──</span> <span class=\"string\">service.yaml</span></span><br><span class=\"line\"><span class=\"string\">│</span>   <span class=\"string\">└──</span> <span class=\"string\">tests</span></span><br><span class=\"line\"><span class=\"string\">│</span>       <span class=\"string\">└──</span> <span class=\"string\">test-connection.yaml</span></span><br><span class=\"line\"><span class=\"string\">└──</span> <span class=\"string\">values.yaml</span>  <span class=\"comment\"># 定义 yaml 文件中可以使用的全局变量</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在-templates-中创建-yaml-文件\"><a href=\"#在-templates-中创建-yaml-文件\" class=\"headerlink\" title=\"在 templates 中创建 yaml 文件\"></a>在 templates 中创建 yaml 文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 先删除 templates 中的示例文件</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf myChart/templates/*</span><br><span class=\"line\"><span class=\"comment\"># 进入 templates </span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> myChart/templates</span><br><span class=\"line\"><span class=\"comment\"># 生成 Deployment.yaml 文件</span></span><br><span class=\"line\">kubectl create deployment web1 --image=nginx --dry-run=client -o yaml &gt; deployment.yaml</span><br><span class=\"line\"><span class=\"comment\"># 生成 service.yaml 文件</span></span><br><span class=\"line\">kubectl create service nodeport web1 --tcp=80:80 --dry-run=client -o yaml  &gt; service.yaml</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"12-kubernetes-核心技术-持久化存储\"><a href=\"#12-kubernetes-核心技术-持久化存储\" class=\"headerlink\" title=\"12 kubernetes 核心技术 持久化存储\"></a>12 kubernetes 核心技术 持久化存储</h1><h2 id=\"12-1-NFS-网络存储\"><a href=\"#12-1-NFS-网络存储\" class=\"headerlink\" title=\"12.1 NFS 网络存储\"></a>12.1 NFS 网络存储</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">步骤略</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"12-2-PV-和-PVC\"><a href=\"#12-2-PV-和-PVC\" class=\"headerlink\" title=\"12.2 PV 和 PVC\"></a>12.2 PV 和 PVC</h2><p><a href=\"https://support.huaweicloud.com/basics-cce/kubernetes/_0030.html\">https://support.huaweicloud.com/basics-cce/kubernetes\\_0030.html</a></p>\n<h1 id=\"13-kubernetes-集群资源监控\"><a href=\"#13-kubernetes-集群资源监控\" class=\"headerlink\" title=\"13 kubernetes 集群资源监控\"></a>13 kubernetes 集群资源监控</h1><p><a href=\"https://www.52ynn.top/index.php/2021/08/04/kubernetes-%e7%9b%91%e6%8e%a7%e5%8f%8a%e6%97%a5%e5%bf%97%e9%87%87%e9%9b%86%e6%96%b9%e6%a1%88/\">https://www.52ynn.top/index.php/2021/08/04/kubernetes-%e7%9b%91%e6%8e%a7%e5%8f%8a%e6%97%a5%e5%bf%97%e9%87%87%e9%9b%86%e6%96%b9%e6%a1%88/</a></p>\n","categories":["skills"],"tags":["记录","k8s"]},{"title":"K8S 集群搭建(kubeadm)","url":"/2021/06/02/k8s-%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/","content":"<h1 id=\"1-搭建-k8s-环境平台规划\"><a href=\"#1-搭建-k8s-环境平台规划\" class=\"headerlink\" title=\"1. 搭建 k8s 环境平台规划\"></a>1. 搭建 k8s 环境平台规划</h1><p>单 master 集群 <a href=\"https://i.loli.net/2021/06/02/DpF3i9LPKOBrRfa.jpg\"><img src=\"https://i.loli.net/2021/06/02/DpF3i9LPKOBrRfa.jpg\"></a> 多 master 集群 <a href=\"https://i.loli.net/2021/06/02/yviN3Qut594kBrI.jpg\"><img src=\"https://i.loli.net/2021/06/02/yviN3Qut594kBrI.jpg\"></a></p>\n<span id=\"more\"></span>\n<h1 id=\"2-准备\"><a href=\"#2-准备\" class=\"headerlink\" title=\"2. 准备\"></a>2. 准备</h1><h2 id=\"2-1-机器准备\"><a href=\"#2-1-机器准备\" class=\"headerlink\" title=\"2.1 机器准备\"></a>2.1 机器准备</h2><p>测试环境</p>\n<p>角色</p>\n<p>cpu</p>\n<p>内存</p>\n<p>硬盘</p>\n<p>master</p>\n<p>2 核</p>\n<p>4g</p>\n<p>20g</p>\n<p>node</p>\n<p>4 核</p>\n<p>8g</p>\n<p>40g</p>\n<p>生产环境</p>\n<p>角色</p>\n<p>cpu</p>\n<p>内存</p>\n<p>硬盘</p>\n<p>master</p>\n<p>4 核</p>\n<p>8g</p>\n<p>20g</p>\n<p>node</p>\n<p>8 核</p>\n<p>16g</p>\n<p>100g</p>\n<p>实验机器准备： <a href=\"https://i.loli.net/2021/06/03/jbTXZfdApIomyQn.jpg\"><img src=\"https://i.loli.net/2021/06/03/jbTXZfdApIomyQn.jpg\"></a></p>\n<h2 id=\"2-2-操作系统初始化\"><a href=\"#2-2-操作系统初始化\" class=\"headerlink\" title=\"2.2 操作系统初始化\"></a>2.2 操作系统初始化</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 关闭防火墙</span></span><br><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> firewalld</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭 selinux</span></span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;s/enforcing/disable/&#x27;</span> /etc/selinux/config</span><br><span class=\"line\">setenforce 0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭 swap</span></span><br><span class=\"line\">swapoff -a</span><br><span class=\"line\">sed -ri <span class=\"string\">&#x27;s/.*swap.*/#&amp;/&#x27;</span> /etc/fstab</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 根据规划设置主机名</span></span><br><span class=\"line\">hostnamectl set-hostname &lt;hostname&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 master 添加 hosts</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt;&gt; /etc/hosts &lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">10.162.0.9  k8s-master</span></span><br><span class=\"line\"><span class=\"string\">10.162.0.11 k8s-node2</span></span><br><span class=\"line\"><span class=\"string\">10.162.0.12 k8s-node1</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将桥接的 IPv4 流量传递到 iptables 的链</span></span><br><span class=\"line\"><span class=\"comment\"># 要求iptables不对bridge的数据进行处理</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt; /etc/sysctl.d/k8s.conf &lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">net.bridge.bridge-nf-call-ip6tables =1</span></span><br><span class=\"line\"><span class=\"string\">net.bridge.bridge-nf-call-iptables =1</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\">sysctl --system</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 同步时间</span></span><br><span class=\"line\">yum install ntpdate -y </span><br><span class=\"line\">ntpdate time.windows.com</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-kubeadm搭建\"><a href=\"#3-kubeadm搭建\" class=\"headerlink\" title=\"3. kubeadm搭建\"></a>3. kubeadm搭建</h1><h2 id=\"3-1-所有节点安装-Docker-x2F-kubeadm-x2F-kubelet\"><a href=\"#3-1-所有节点安装-Docker-x2F-kubeadm-x2F-kubelet\" class=\"headerlink\" title=\"3.1 所有节点安装 Docker&#x2F;kubeadm&#x2F;kubelet\"></a>3.1 所有节点安装 Docker&#x2F;kubeadm&#x2F;kubelet</h2><p>kubernetes 默认 CRI（容器运行时）为 Docker，因此先安装 Docker</p>\n<h3 id=\"3-1-1-安装-Docker\"><a href=\"#3-1-1-安装-Docker\" class=\"headerlink\" title=\"3.1.1 安装 Docker\"></a>3.1.1 安装 Docker</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install wget -y </span><br><span class=\"line\">wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker-ce.repo</span><br><span class=\"line\">yum install docker-ce-18.06.1.ce-3.el7</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> docker &amp;&amp; systemctl start docker</span><br><span class=\"line\">docker -version <span class=\"comment\">#检查安装是否成功</span></span><br></pre></td></tr></table></figure>\n\n<p>修改仓库地址</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /etc/docker</span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt; /etc/docker/daemon.json &lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;registry-mirrors&quot;:[&quot;https://registry.docker-cn.com&quot;]</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n<p>启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl   restart docker</span><br><span class=\"line\">systemctl  <span class=\"built_in\">enable</span> docker <span class=\"comment\"># 开机自启</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-1-2-添加阿里云-yum-软件源\"><a href=\"#3-1-2-添加阿里云-yum-软件源\" class=\"headerlink\" title=\"3.1.2 添加阿里云 yum 软件源\"></a>3.1.2 添加阿里云 yum 软件源</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &gt;/etc/yum.repos.d/kubernetes.repo &lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[kubernetes]</span></span><br><span class=\"line\"><span class=\"string\">name=Kubernetes</span></span><br><span class=\"line\"><span class=\"string\">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span></span><br><span class=\"line\"><span class=\"string\">enable=1</span></span><br><span class=\"line\"><span class=\"string\">gpgcheck=0</span></span><br><span class=\"line\"><span class=\"string\">repo_gpgcheck=0</span></span><br><span class=\"line\"><span class=\"string\">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-1-3-安装-kubeadm-kubelet-和-kubectl\"><a href=\"#3-1-3-安装-kubeadm-kubelet-和-kubectl\" class=\"headerlink\" title=\"3.1.3 安装 kubeadm,kubelet 和 kubectl\"></a>3.1.3 安装 kubeadm,kubelet 和 kubectl</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install -y kubelet-1.18.0 kubeadm-1.18.0 kubectl-1.18.0</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> kubelet</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-2-部署-Kubernetes-Master\"><a href=\"#3-2-部署-Kubernetes-Master\" class=\"headerlink\" title=\"3.2 部署 Kubernetes Master\"></a>3.2 部署 Kubernetes Master</h2><p>在 Master 上执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubeadm init </span><br><span class=\"line\">    --apiserver-advertise-address=10.162.0.9 </span><br><span class=\"line\">    --image-repository registry.aliyuncs.com/google_containers </span><br><span class=\"line\">    --kubernetes-version v1.18.0 </span><br><span class=\"line\">    --service-cidr=10.96.0.0/12 </span><br><span class=\"line\">    --pod-network-cidr=10.244.0.0/16</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 这里会执行三到四分钟</span></span><br></pre></td></tr></table></figure>\n\n<p>成功后打印如下 <a href=\"https://i.loli.net/2021/06/03/ienv6f7Wr2wNc4a.jpg\"><img src=\"https://i.loli.net/2021/06/03/ienv6f7Wr2wNc4a.jpg\"></a> 指定镜像仓库地址为阿里云</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p <span class=\"variable\">$HOME</span>/.kube</span><br><span class=\"line\">sudo <span class=\"built_in\">cp</span> -i /etc/kubernetes/admin/conf <span class=\"variable\">$HOME</span>/.kube/config</span><br><span class=\"line\">sudo <span class=\"built_in\">chown</span> $(<span class=\"built_in\">id</span> -u):$(<span class=\"built_in\">id</span> -g) <span class=\"variable\">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-3-加入-Kubernetes-Node\"><a href=\"#3-3-加入-Kubernetes-Node\" class=\"headerlink\" title=\"3.3 加入 Kubernetes Node\"></a>3.3 加入 Kubernetes Node</h2><p>在 node 上执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># init 成功之后打印出的语句</span></span><br><span class=\"line\">kubeadm <span class=\"built_in\">join</span> 10.162.0.9:6443 --token x644b0.j0k1jplo1lej0ujk </span><br><span class=\"line\">    --discovery-token-ca-cert-hash sha256:e74a03c6bca17e9815bb59e79eba9060c64e65efb6841f4ccee63ab49ecf60ae</span><br></pre></td></tr></table></figure>\n\n<p>默认token 有效期 24 小时，后期需要重新生成执行以下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubeadm token create --print-join-command</span><br></pre></td></tr></table></figure>\n\n<p>加入成功在 master 上执行<code>kubectl get nodes</code>显示 <a href=\"https://i.loli.net/2021/06/03/K8pwZDs6jVLBve9.jpg\"><img src=\"https://i.loli.net/2021/06/03/K8pwZDs6jVLBve9.jpg\"></a></p>\n<h2 id=\"3-4-部署-CNI-网络插件\"><a href=\"#3-4-部署-CNI-网络插件\" class=\"headerlink\" title=\"3.4 部署 CNI 网络插件\"></a>3.4 部署 CNI 网络插件</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br><span class=\"line\">kubectl get pods -n kube-system</span><br></pre></td></tr></table></figure>\n\n<p>完成如下 <a href=\"https://i.loli.net/2021/06/03/I49zfNjnpF6GUPQ.jpg\"><img src=\"https://i.loli.net/2021/06/03/I49zfNjnpF6GUPQ.jpg\"></a> 这时再执行<code>kubectl get nodes</code>节点的 status 就会变为 Ready <a href=\"https://i.loli.net/2021/06/03/ague9wEJ8hTyBP6.jpg\"><img src=\"https://i.loli.net/2021/06/03/ague9wEJ8hTyBP6.jpg\"></a></p>\n<h2 id=\"3-5-测试-kubernetes-集群\"><a href=\"#3-5-测试-kubernetes-集群\" class=\"headerlink\" title=\"3.5 测试 kubernetes 集群\"></a>3.5 测试 kubernetes 集群</h2><p>部署 nginx 进行测试</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 拉取镜像运行</span></span><br><span class=\"line\">kubectl create deployment nginx --image=nginx</span><br><span class=\"line\"><span class=\"comment\"># 暴露端口</span></span><br><span class=\"line\">kubectl expose deployment nginx --port=80 --<span class=\"built_in\">type</span>=NodePort</span><br><span class=\"line\"><span class=\"comment\"># 查看</span></span><br><span class=\"line\">kubectl get services</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://i.loli.net/2021/06/03/t1SVzUrd6MvQFX2.jpg\"><img src=\"https://i.loli.net/2021/06/03/t1SVzUrd6MvQFX2.jpg\"></a> 访问 <code>nodeip:port</code>显示 nginx 页面即为成功 <a href=\"https://i.loli.net/2021/06/03/Sg3MErRw1QZVH27.jpg\"><img src=\"https://i.loli.net/2021/06/03/Sg3MErRw1QZVH27.jpg\"></a></p>\n","categories":["skills"],"tags":["教程","记录","k8s"]},{"title":"K8S 集群搭建(二进制)","url":"/2021/06/07/k8s-%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E4%BA%8C%E8%BF%9B%E5%88%B6/","content":"<h1 id=\"1-准备\"><a href=\"#1-准备\" class=\"headerlink\" title=\"1. 准备\"></a>1. 准备</h1><p>本次实验为手动使用二进制方式安装<code>kubernetes</code>,为了学习和了解<code>kubernetes</code>的部署流程及相关原理。</p>\n<h2 id=\"1-1-实验安装的版本\"><a href=\"#1-1-实验安装的版本\" class=\"headerlink\" title=\"1.1 实验安装的版本\"></a>1.1 实验安装的版本</h2><ul>\n<li>Kubernetes v1.18.18</li>\n<li>Etcd v3.2.9</li>\n<li>Calico v2.6.2</li>\n<li>Docker v20.10.0-ce<span id=\"more\"></span></li>\n</ul>\n<h2 id=\"1-2-机器准备\"><a href=\"#1-2-机器准备\" class=\"headerlink\" title=\"1.2 机器准备\"></a>1.2 机器准备</h2><p>ip</p>\n<p>role</p>\n<p>cpu</p>\n<p>memory</p>\n<p>os</p>\n<p>10.162.0.9</p>\n<p>master</p>\n<p>2</p>\n<p>4</p>\n<p>centos 7.6</p>\n<p>10.162.0.11</p>\n<p>node1</p>\n<p>2</p>\n<p>4</p>\n<p>centos 7.6</p>\n<p>10.162.0.12</p>\n<p>node2</p>\n<p>2</p>\n<p>4</p>\n<p>centos 7.6</p>\n<p><strong>以上机器为虚拟机，均采用 root 用户进行操作（生产环境不推荐）</strong> 下面操作如果没有特别说明在 master 还是 node 上操作默认都是所有机器上操作。</p>\n<h2 id=\"1-3-环境准备\"><a href=\"#1-3-环境准备\" class=\"headerlink\" title=\"1.3 环境准备\"></a>1.3 环境准备</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 关闭防火墙</span></span><br><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> firewalld</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭 selinux</span></span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;s/enforcing/disable/&#x27;</span> /etc/selinux/config</span><br><span class=\"line\">setenforce 0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭 swap</span></span><br><span class=\"line\">swapoff -a</span><br><span class=\"line\">sed -ri <span class=\"string\">&#x27;s/.*swap.*/#&amp;/&#x27;</span> /etc/fstab</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 根据规划设置主机名</span></span><br><span class=\"line\">hostnamectl set-hostname &lt;hostname&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加 hosts</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt;&gt; /etc/hosts &lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">10.162.0.9  k8s-master</span></span><br><span class=\"line\"><span class=\"string\">10.162.0.11 k8s-node2</span></span><br><span class=\"line\"><span class=\"string\">10.162.0.12 k8s-node1</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将桥接的 IPv4 流量传递到 iptables 的链</span></span><br><span class=\"line\"><span class=\"comment\"># 要求iptables不对bridge的数据进行处理</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt; /etc/sysctl.d/k8s.conf &lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">net.bridge.bridge-nf-call-ip6tables =1</span></span><br><span class=\"line\"><span class=\"string\">net.bridge.bridge-nf-call-iptables =1</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\">sysctl --system</span><br><span class=\"line\"><span class=\"comment\"># 同步时间</span></span><br><span class=\"line\">yum install ntpdate -y </span><br><span class=\"line\">ntpdate time.windows.com</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 master 上按照CFSSL 工具，用来建立 TLS certificates</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CFSSL_URL=<span class=\"string\">&quot;https://pkg.cfssl.org/R1.2&quot;</span></span><br><span class=\"line\">wget <span class=\"string\">&quot;<span class=\"variable\">$&#123;CFSSL_URL&#125;</span>/cfssl_linux-amd64&quot;</span> -O /usr/local/bin/cfssl</span><br><span class=\"line\">wget <span class=\"string\">&quot;<span class=\"variable\">$&#123;CFSSL_URL&#125;</span>/cfssljson_linux-amd64&quot;</span> -O /usr/local/bin/cfssljson</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> +x /usr/local/bin/cfssl /usr/local/bin/cfssljson</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-4-安装-Docker\"><a href=\"#1-4-安装-Docker\" class=\"headerlink\" title=\"1.4 安装 Docker\"></a>1.4 安装 Docker</h2><p>所有节点都要安装 docker 引擎</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装，时间较长的话可使用其它方式安装</span></span><br><span class=\"line\">curl -fsSL <span class=\"string\">&quot;https://get.docker.com/&quot;</span>  sh</span><br><span class=\"line\"><span class=\"comment\"># 启动并设置开机自启</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> docker &amp;&amp; systemctl start docker</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 编辑/lib/systemd/system/docker.service，在ExecStart=..上一行加入：</span></span><br><span class=\"line\">ExecStartPost=/sbin/iptables -I FORWARD -s 0.0.0.0/0 -j ACCEPT</span><br><span class=\"line\"><span class=\"comment\"># 重启 docker 服务</span></span><br><span class=\"line\">systemctl daemon-reload &amp;&amp; systemctl restart docker</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-Etcd-安装\"><a href=\"#2-Etcd-安装\" class=\"headerlink\" title=\"2. Etcd 安装\"></a>2. Etcd 安装</h1><p>Etcd 是 Kubernetes 最重要的一部分，Kubernetes 会将大部分信息储存于 Etcd 上，来提供给其他节点索取，以确保整个集群运作与沟通正常。</p>\n<h2 id=\"2-1-创建集群-CA-与-Certificates\"><a href=\"#2-1-创建集群-CA-与-Certificates\" class=\"headerlink\" title=\"2.1 创建集群 CA 与 Certificates\"></a>2.1 创建集群 CA 与 Certificates</h2><p>创建 client 与 server 的各组件 certificates，并且替 Kubernetes admin user 产生 client 证书。 这部分可参考：<a href=\"https://kubernetes.io/zh/docs/tasks/administer-cluster/certificates/#cfssl\" title=\"证书\">证书</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在 master 上创建 ssl 目录并完成操作</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /opt/etcd/ssl &amp;&amp; <span class=\"built_in\">cd</span> /opt/etcd/ssl</span><br><span class=\"line\"><span class=\"built_in\">export</span> PKI_URL=<span class=\"string\">&quot;https://kairen.github.io/files/manual-v1.8/pki&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 生成 ca-config.json</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt; ca-config.json&lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">  &quot;signing&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;default&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">      &quot;expiry&quot;: &quot;8760h&quot;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;profiles&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">      &quot;kubernetes&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">        &quot;usages&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">          &quot;signing&quot;,</span></span><br><span class=\"line\"><span class=\"string\">          &quot;key encipherment&quot;,</span></span><br><span class=\"line\"><span class=\"string\">          &quot;server auth&quot;,</span></span><br><span class=\"line\"><span class=\"string\">          &quot;client auth&quot;</span></span><br><span class=\"line\"><span class=\"string\">        ],</span></span><br><span class=\"line\"><span class=\"string\">        &quot;expiry&quot;: &quot;8760h&quot;</span></span><br><span class=\"line\"><span class=\"string\">      &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"comment\"># 生成ca-csr.json</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt; ca-csr.json&lt;&lt; <span class=\"string\">EOF </span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;CN&quot;: &quot;etcd CA&quot;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;key&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">        &quot;algo&quot;: &quot;rsa&quot;,</span></span><br><span class=\"line\"><span class=\"string\">        &quot;size&quot;: 2048</span></span><br><span class=\"line\"><span class=\"string\">    &#125;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;names&quot;: [&#123;</span></span><br><span class=\"line\"><span class=\"string\">        &quot;C&quot;: &quot;CN&quot;,</span></span><br><span class=\"line\"><span class=\"string\">        &quot;L&quot;: &quot;ShangHai&quot;,</span></span><br><span class=\"line\"><span class=\"string\">        &quot;ST&quot;: &quot;ShangHai&quot;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;]</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成 ca 秘钥</span></span><br><span class=\"line\">cfssl gencert -initca ca-csr.json  cfssljson -bare ca</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建证书申请文件,需要修改 ip 为你自己的 ip</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt; server-csr.json&lt;&lt; <span class=\"string\">EOF </span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;CN&quot;: &quot;etcd&quot;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;hosts&quot;: [&quot;10.162.0.9&quot;, &quot;10.162.0.11&quot;, &quot;10.162.0.12&quot;],</span></span><br><span class=\"line\"><span class=\"string\">    &quot;key&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">        &quot;algo&quot;: &quot;rsa&quot;,</span></span><br><span class=\"line\"><span class=\"string\">        &quot;size&quot;: 2048</span></span><br><span class=\"line\"><span class=\"string\">    &#125;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;names&quot;: [&#123;</span></span><br><span class=\"line\"><span class=\"string\">        &quot;C&quot;: &quot;CN&quot;,</span></span><br><span class=\"line\"><span class=\"string\">        &quot;L&quot;: &quot;ShangHai&quot;,</span></span><br><span class=\"line\"><span class=\"string\">        &quot;ST&quot;: &quot;ShangHai&quot;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;]</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"comment\">#生成证书</span></span><br><span class=\"line\">cfssl gencert \\</span><br><span class=\"line\">  -ca=ca.pem \\</span><br><span class=\"line\">  -ca-key=ca-key.pem \\</span><br><span class=\"line\">  -config=ca-config.json \\</span><br><span class=\"line\">  -profile=kubernetes \\</span><br><span class=\"line\">  server-csr.json  cfssljson -bare server</span><br><span class=\"line\"> <span class=\"comment\"># 删除 json 文件</span></span><br><span class=\"line\"> <span class=\"built_in\">rm</span> -f *.json</span><br></pre></td></tr></table></figure>\n\n<p>完成后如下 <a href=\"https://i.loli.net/2021/06/07/ptgJ1zU6GIjylVM.jpg\"><img src=\"https://i.loli.net/2021/06/07/ptgJ1zU6GIjylVM.jpg\"></a></p>\n<h2 id=\"2-2-Etcd-的安装与设置\"><a href=\"#2-2-Etcd-的安装与设置\" class=\"headerlink\" title=\"2.2 Etcd 的安装与设置\"></a>2.2 Etcd 的安装与设置</h2><p>在 master 节点上下载安装 我这里使用的是 3.2.9，新版本可以在 <a href=\"https://github.com/etcd-io/etcd/releases\" title=\"github\"><strong>github</strong></a>下载</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p  /opt/etcd/&#123;bin,ssl&#125;</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /opt</span><br><span class=\"line\"><span class=\"built_in\">export</span>  ETCD_VER=v3.2.9</span><br><span class=\"line\"><span class=\"built_in\">export</span> GOOGLE_URL=https://storage.googleapis.com/etcd</span><br><span class=\"line\"><span class=\"built_in\">export</span> GITHUB_URL=https://github.com/etcd-io/etcd/releases/download</span><br><span class=\"line\"><span class=\"comment\"># 任选一个下载地址,我这边 google 比较快就选了 google 的地址</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> DOWNLOAD_URL=<span class=\"variable\">$&#123;GOOGLE_URL&#125;</span></span><br><span class=\"line\">wget  <span class=\"variable\">$&#123;DOWNLOAD_URL&#125;</span>/<span class=\"variable\">$&#123;ETCD_VER&#125;</span>/etcd-<span class=\"variable\">$&#123;ETCD_VER&#125;</span>-linux-amd64.tar.gz</span><br><span class=\"line\">tar -zxvf etcd-v3.2.9-linux-amd64.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">mv</span> etcd-v3.2.9-linux-amd64/etcd* /opt/etcd/bin &amp;&amp; <span class=\"built_in\">rm</span> -rf etcd-v3.2.9-linux-amd64</span><br></pre></td></tr></table></figure>\n\n<p>将 master 上创建的文件拷贝到其它两个节点上</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">scp -r /opt/etcd/ root@k8s-node1:/opt/</span><br><span class=\"line\">scp -r /opt/etcd/ root@k8s-node2:/opt/ </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>systemd 管理 Etcd(三台都要执行)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ip 改为当前执行机器 ip</span></span><br><span class=\"line\">INTERNAL_IP=<span class=\"string\">&quot;10.162.0.9&quot;</span></span><br><span class=\"line\">ETCD_NAME=$(hostname -s)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成 etcd.service 的 systemd 配置文件</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> &lt;&lt;<span class=\"string\">EOF  sudo tee /etc/systemd/system/etcd.service</span></span><br><span class=\"line\"><span class=\"string\">[Unit]</span></span><br><span class=\"line\"><span class=\"string\">Description=etcd</span></span><br><span class=\"line\"><span class=\"string\">Documentation=https://github.com/coreos</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[Service]</span></span><br><span class=\"line\"><span class=\"string\">ExecStart=/opt/etcd/bin/etcd \\\\</span></span><br><span class=\"line\"><span class=\"string\">  --name $&#123;ETCD_NAME&#125; \\\\</span></span><br><span class=\"line\"><span class=\"string\">  --cert-file=/opt/etcd/ssl/server.pem \\\\</span></span><br><span class=\"line\"><span class=\"string\">  --key-file=/opt/etcd/ssl/server-key.pem \\\\</span></span><br><span class=\"line\"><span class=\"string\">  --peer-cert-file=/opt/etcd/ssl/server.pem \\\\</span></span><br><span class=\"line\"><span class=\"string\">  --peer-key-file=/opt/etcd/ssl/server-key.pem \\\\</span></span><br><span class=\"line\"><span class=\"string\">  --trusted-ca-file=/opt/etcd/ssl/ca.pem \\\\</span></span><br><span class=\"line\"><span class=\"string\">  --peer-trusted-ca-file=/opt/etcd/ssl/ca.pem \\\\</span></span><br><span class=\"line\"><span class=\"string\">  --peer-client-cert-auth \\\\</span></span><br><span class=\"line\"><span class=\"string\">  --client-cert-auth \\\\</span></span><br><span class=\"line\"><span class=\"string\">  --initial-advertise-peer-urls https://$&#123;INTERNAL_IP&#125;:2380 \\\\</span></span><br><span class=\"line\"><span class=\"string\">  --listen-peer-urls https://$&#123;INTERNAL_IP&#125;:2380 \\\\</span></span><br><span class=\"line\"><span class=\"string\">  --listen-client-urls https://$&#123;INTERNAL_IP&#125;:2379,https://127.0.0.1:2379 \\\\</span></span><br><span class=\"line\"><span class=\"string\">  --advertise-client-urls https://$&#123;INTERNAL_IP&#125;:2379 \\\\</span></span><br><span class=\"line\"><span class=\"string\">  --initial-cluster-token etcd-cluster-0 \\\\</span></span><br><span class=\"line\"><span class=\"string\">  --initial-cluster k8s-master=https://10.162.0.9:2380,k8s-node2=https://10.162.0.11:2380,k8s-node1=https://10.162.0.12:2380 \\\\</span></span><br><span class=\"line\"><span class=\"string\">  --initial-cluster-state new \\\\</span></span><br><span class=\"line\"><span class=\"string\">  --data-dir=/var/lib/etcd</span></span><br><span class=\"line\"><span class=\"string\">Restart=on-failure</span></span><br><span class=\"line\"><span class=\"string\">RestartSec=5</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[Install]</span></span><br><span class=\"line\"><span class=\"string\">WantedBy=multi-user.target</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n<p>启动并设置开机自启</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload </span><br><span class=\"line\">systemctl start etcd </span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> etcd</span><br></pre></td></tr></table></figure>\n\n<p>检查集群是否成功部署</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">/opt/etcd/bin/etcdctl --ca-file=/opt/etcd/ssl/ca.pem --cert-file=/opt/etcd/ssl/server.pem --key-file=/opt/etcd/ssl/server-key.pem --endpoints=<span class=\"string\">&quot;https://10.162.0.9:2379,https://10.162.0.11:2379,https://10.162.0.12:2379&quot;</span>  cluster-health</span><br></pre></td></tr></table></figure>\n\n<p>出现如下内容即为成功 <a href=\"https://i.loli.net/2021/06/08/yiKIVRNm1zOFopL.jpg\"><img src=\"https://i.loli.net/2021/06/08/yiKIVRNm1zOFopL.jpg\"></a></p>\n<h1 id=\"3-部署-kubernetes-Master\"><a href=\"#3-部署-kubernetes-Master\" class=\"headerlink\" title=\"3. 部署 kubernetes Master\"></a>3. 部署 kubernetes Master</h1><p>Master 是 Kubernetes 的大总管，主要创建apiserver、Controller manager与Scheduler来组件管理所有 Node。本步骤将下载 Kubernetes 并安装至 master1上，然后产生相关 TLS Cert 与 CA 密钥，提供给集群组件认证使用。</p>\n<h2 id=\"3-1-下载-kubernetes-组件\"><a href=\"#3-1-下载-kubernetes-组件\" class=\"headerlink\" title=\"3.1 下载 kubernetes 组件\"></a>3.1 下载 kubernetes 组件</h2><p>在 Master 节点上下载</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Download Kubernetes</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> KUBE_URL=<span class=\"string\">&quot;https://storage.googleapis.com/kubernetes-release/release/v1.8.2/bin/linux/amd64&quot;</span></span><br><span class=\"line\">wget <span class=\"string\">&quot;<span class=\"variable\">$&#123;KUBE_URL&#125;</span>/kubelet&quot;</span> -O /usr/local/bin/kubelet</span><br><span class=\"line\">wget <span class=\"string\">&quot;<span class=\"variable\">$&#123;KUBE_URL&#125;</span>/kubectl&quot;</span> -O /usr/local/bin/kubectl</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> +x /usr/local/bin/kubelet /usr/local/bin/kubectl</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Download CNI</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /opt/cni/bin &amp;&amp; <span class=\"built_in\">cd</span> /opt/cni/bin</span><br><span class=\"line\"><span class=\"built_in\">export</span> CNI_URL=<span class=\"string\">&quot;https://github.com/containernetworking/plugins/releases/download&quot;</span></span><br><span class=\"line\">wget  <span class=\"string\">&quot;<span class=\"variable\">$&#123;CNI_URL&#125;</span>/v0.6.0/cni-plugins-amd64-v0.6.0.tgz&quot;</span></span><br><span class=\"line\">tar -zxvf cni-plugins-amd64-v0.6.0.tgz</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-2-创建集群-CA-与-Certificates\"><a href=\"#3-2-创建集群-CA-与-Certificates\" class=\"headerlink\" title=\"3.2 创建集群 CA 与 Certificates\"></a>3.2 创建集群 CA 与 Certificates</h2><p>在 master 上执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建目录</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /opt/kubernetes/pki &amp;&amp; <span class=\"built_in\">cd</span> /opt/kubernetes/pki</span><br><span class=\"line\"><span class=\"comment\"># 自签证书颁发机构 （CA）</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt; ca-config.json&lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;signing&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">        &quot;default&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">            &quot;expiry&quot;: &quot;87600h&quot;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;,</span></span><br><span class=\"line\"><span class=\"string\">        &quot;profiles&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">            &quot;kubernetes&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">                &quot;expiry&quot;: &quot;87600h&quot;,</span></span><br><span class=\"line\"><span class=\"string\">                &quot;usages&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">                    &quot;signing&quot;,</span></span><br><span class=\"line\"><span class=\"string\">                    &quot;key encipherment&quot;,</span></span><br><span class=\"line\"><span class=\"string\">                    &quot;server auth&quot;,</span></span><br><span class=\"line\"><span class=\"string\">                    &quot;client auth&quot;</span></span><br><span class=\"line\"><span class=\"string\">                    ]</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt; ca-csr.json&lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;CN&quot;: &quot;kubernetes&quot;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;key&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">        &quot;algo&quot;: &quot;rsa&quot;,</span></span><br><span class=\"line\"><span class=\"string\">        &quot;size&quot;: 2048</span></span><br><span class=\"line\"><span class=\"string\">    &#125;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;names&quot;: [&#123;</span></span><br><span class=\"line\"><span class=\"string\">        &quot;C&quot;: &quot;CN&quot;,</span></span><br><span class=\"line\"><span class=\"string\">        &quot;L&quot;: &quot;ShangHai&quot;,</span></span><br><span class=\"line\"><span class=\"string\">        &quot;ST&quot;: &quot;ShangHai&quot;,</span></span><br><span class=\"line\"><span class=\"string\">        &quot;O&quot;: &quot;k8s&quot;,</span></span><br><span class=\"line\"><span class=\"string\">        &quot;OU&quot;: &quot;System&quot;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;]</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"comment\"># 生成证书</span></span><br><span class=\"line\">cfssl gencert -initca ca-csr.json  cfssljson -bare ca -</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#使用自签 CA 签发 kube-apiserver HTTPS 证书</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt; server-csr.json&lt;&lt; <span class=\"string\">EOF </span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;CN&quot;: &quot;kubernetes&quot;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;hosts&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">        &quot;10.0.0.1&quot;, </span></span><br><span class=\"line\"><span class=\"string\">        &quot;127.0.0.1&quot;, </span></span><br><span class=\"line\"><span class=\"string\">        &quot;10.162.0.9&quot;, </span></span><br><span class=\"line\"><span class=\"string\">        &quot;10.162.0.11&quot;, </span></span><br><span class=\"line\"><span class=\"string\">        &quot;10.162.0.12&quot;, </span></span><br><span class=\"line\"><span class=\"string\">         &quot;kubernetes&quot;, </span></span><br><span class=\"line\"><span class=\"string\">        &quot;kubernetes.default&quot;,</span></span><br><span class=\"line\"><span class=\"string\">        &quot;kubernetes.default.svc&quot;,</span></span><br><span class=\"line\"><span class=\"string\">        &quot;kubernetes.default.svc.cluster&quot;,</span></span><br><span class=\"line\"><span class=\"string\">        &quot;kubernetes.default.svc.cluster.local&quot;</span></span><br><span class=\"line\"><span class=\"string\">    ],</span></span><br><span class=\"line\"><span class=\"string\">    &quot;key&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">        &quot;algo&quot;: &quot;rsa&quot;,</span></span><br><span class=\"line\"><span class=\"string\">        &quot;size&quot;: 2048</span></span><br><span class=\"line\"><span class=\"string\">    &#125;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;names&quot;: [&#123;</span></span><br><span class=\"line\"><span class=\"string\">        &quot;C&quot;: &quot;CN&quot;,</span></span><br><span class=\"line\"><span class=\"string\">        &quot;L&quot;: &quot;ShangHai&quot;,</span></span><br><span class=\"line\"><span class=\"string\">        &quot;ST&quot;: &quot;ShangHai&quot;,</span></span><br><span class=\"line\"><span class=\"string\">        &quot;O&quot;: &quot;k8s&quot;,</span></span><br><span class=\"line\"><span class=\"string\">        &quot;OU&quot;: &quot;System&quot;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;]</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成证书</span></span><br><span class=\"line\">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes server-csr.json  cfssljson -bare server</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-3-下载二进制文件\"><a href=\"#3-3-下载二进制文件\" class=\"headerlink\" title=\"3.3 下载二进制文件\"></a>3.3 下载二进制文件</h2><p>下载地址：<a href=\"https://dl.k8s.io/v1.18.18/kubernetes-server-linux-amd64.tar.gz\" title=\"kubernetes v1.18.18\">kubernetes v1.18.18</a> 其它版本：<a href=\"https://github.com/kubernetes/kubernetes/releases\">github</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建目录</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /opt/kubernetes/&#123;bin,cfg,ssl,logs,package&#125;&amp;&amp;<span class=\"built_in\">cd</span> /opt/kubernetes/package</span><br><span class=\"line\"><span class=\"comment\"># 下载</span></span><br><span class=\"line\">wget https://dl.k8s.io/v1.18.18/kubernetes-server-linux-amd64.tar.gz</span><br><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\">tar zxvf kubernetes-server-linux-amd64.tar.gz</span><br><span class=\"line\"><span class=\"comment\"># 拷贝至安装目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> kubernetes/server/bin</span><br><span class=\"line\"><span class=\"built_in\">cp</span> kube-apiserver kube-scheduler kube-controller-manager /opt/kubernetes/bin</span><br><span class=\"line\"><span class=\"built_in\">cp</span> kubectl /usr/bin/</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-4-部署-kube-apiserver\"><a href=\"#3-4-部署-kube-apiserver\" class=\"headerlink\" title=\"3.4 部署 kube-apiserver\"></a>3.4 部署 kube-apiserver</h2><p>创建配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &gt; /opt/kubernetes/cfg/kube-apiserver.conf &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">KUBE_APISERVER_OPTS=&quot;--logtostderr=false \\\\</span></span><br><span class=\"line\"><span class=\"string\">--v=2 \\\\</span></span><br><span class=\"line\"><span class=\"string\">--log-dir=/opt/kubernetes/logs \\\\</span></span><br><span class=\"line\"><span class=\"string\">--etcd-servers=https://10.162.0.9:2379,https://10.162.0.11:2379,https://10.162.0.12:2379 \\\\ </span></span><br><span class=\"line\"><span class=\"string\">--bind-address=10.162.0.9 \\\\ </span></span><br><span class=\"line\"><span class=\"string\">--secure-port=6443 \\\\</span></span><br><span class=\"line\"><span class=\"string\">--advertise-address=10.162.0.9 \\\\</span></span><br><span class=\"line\"><span class=\"string\">--allow-privileged=true \\\\</span></span><br><span class=\"line\"><span class=\"string\">--service-cluster-ip-range=10.0.0.0/24 \\\\</span></span><br><span class=\"line\"><span class=\"string\">--enable-admission-plugins=NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota,NodeRestriction \\\\</span></span><br><span class=\"line\"><span class=\"string\">--authorization-mode=RBAC,Node \\\\</span></span><br><span class=\"line\"><span class=\"string\">--enable-bootstrap-token-auth=true \\\\</span></span><br><span class=\"line\"><span class=\"string\">--token-auth-file=/opt/kubernetes/cfg/token.csv \\\\</span></span><br><span class=\"line\"><span class=\"string\">--service-node-port-range=30000-32767 \\\\</span></span><br><span class=\"line\"><span class=\"string\">--kubelet-client-certificate=/opt/kubernetes/ssl/server.pem \\\\</span></span><br><span class=\"line\"><span class=\"string\">--kubelet-client-key=/opt/kubernetes/ssl/server-key.pem \\\\</span></span><br><span class=\"line\"><span class=\"string\">--tls-cert-file=/opt/kubernetes/ssl/server.pem \\\\</span></span><br><span class=\"line\"><span class=\"string\">--tls-private-key-file=/opt/kubernetes/ssl/server-key.pem \\\\</span></span><br><span class=\"line\"><span class=\"string\">--client-ca-file=/opt/kubernetes/ssl/ca.pem \\\\</span></span><br><span class=\"line\"><span class=\"string\">--service-account-key-file=/opt/kubernetes/ssl/ca-key.pem \\\\</span></span><br><span class=\"line\"><span class=\"string\">--etcd-cafile=/opt/etcd/ssl/ca.pem \\\\</span></span><br><span class=\"line\"><span class=\"string\">--etcd-certfile=/opt/etcd/ssl/server.pem \\\\</span></span><br><span class=\"line\"><span class=\"string\">--etcd-keyfile=/opt/etcd/ssl/server-key.pem \\\\</span></span><br><span class=\"line\"><span class=\"string\">--audit-log-maxage=30 \\\\</span></span><br><span class=\"line\"><span class=\"string\">--audit-log-maxbackup=3 \\\\</span></span><br><span class=\"line\"><span class=\"string\">--audit-log-maxsize=100 \\\\</span></span><br><span class=\"line\"><span class=\"string\">--audit-log-path=/opt/kubernetes/logs/k8s-audit.log&quot;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">–logtostderr：启用日志</span><br><span class=\"line\">—v：日志等级</span><br><span class=\"line\">–log-dir：日志目录</span><br><span class=\"line\">–etcd-servers：etcd 集群地址</span><br><span class=\"line\">–bind-address：监听地址</span><br><span class=\"line\">–secure-port：https 安全端口</span><br><span class=\"line\">–advertise-address：集群通告地址</span><br><span class=\"line\">–allow-privileged：启用授权</span><br><span class=\"line\">–service-cluster-ip-range：Service 虚拟 IP 地址段</span><br><span class=\"line\">–enable-admission-plugins：准入控制模块</span><br><span class=\"line\">–authorization-mode：认证授权，启用 RBAC 授权和节点自管理</span><br><span class=\"line\">–enable-bootstrap-token-auth：启用 TLS bootstrap 机制</span><br><span class=\"line\">–token-auth-file：bootstrap token 文件</span><br><span class=\"line\">–service-node-port-range：Service nodeport 类型默认分配端口范围</span><br><span class=\"line\">–kubelet-client-xxx：apiserver 访问 kubelet 客户端证书</span><br><span class=\"line\">–tls-xxx-file：apiserver https 证书</span><br><span class=\"line\">–etcd-xxxfile：连接 Etcd 集群证书</span><br><span class=\"line\">–audit-log-xxx：审计日志</span><br></pre></td></tr></table></figure>\n\n<p>拷贝证书</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cp</span> /opt/kubernetes/pki/*pem /opt/kubernetes/ssl/</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-5-启用-TLS-Bootstrapping-机制\"><a href=\"#3-5-启用-TLS-Bootstrapping-机制\" class=\"headerlink\" title=\"3.5 启用 TLS Bootstrapping 机制\"></a>3.5 启用 TLS Bootstrapping 机制</h2><p>TLS Bootstraping：Master apiserver 启用 TLS 认证后，Node 节点 kubelet 和 kube- proxy 要与 kube-apiserver 进行通信，必须使用 CA 签发的有效证书才可以，当 Node 节点很多时，这种客户端证书颁发需要大量工作，同样也会增加集群扩展复杂度。为了 简化流程，Kubernetes 引入了 TLS bootstraping 机制来自动颁发客户端证书，kubelet 会以一个低权限用户自动向 apiserver 申请证书，kubelet 的证书由 apiserver 动态签署。 所以强烈建议在 Node 上使用这种方式，目前主要用于 kubelet，kube-proxy 还是由我 们统一颁发一个证书。 TLS bootstraping 工作流程： <a href=\"https://i.loli.net/2021/06/08/3NDhpqL9VEobrJI.jpg\"><img src=\"https://i.loli.net/2021/06/08/3NDhpqL9VEobrJI.jpg\"></a> 创建上述配置文件中 token 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &gt; /opt/kubernetes/cfg/token.csv &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">c47ffb939f5ca36231d9e3121a252940,kubelet-bootstrap,10001,system:node-bootstrapper</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n<p>格式：token，用户名，UID，用户组</p>\n<h2 id=\"3-6-systemd-管理-apiserver\"><a href=\"#3-6-systemd-管理-apiserver\" class=\"headerlink\" title=\"3.6 systemd 管理 apiserver\"></a>3.6 systemd 管理 apiserver</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &gt; /usr/lib/systemd/system/kube-apiserver.service &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[Unit]</span></span><br><span class=\"line\"><span class=\"string\">Description=Kubernetes API Server Documentation=https://github.com/kubernetes/kubernetes</span></span><br><span class=\"line\"><span class=\"string\">[Service]</span></span><br><span class=\"line\"><span class=\"string\">EnvironmentFile=/opt/kubernetes/cfg/kube-apiserver.conf</span></span><br><span class=\"line\"><span class=\"string\">ExecStart=/opt/kubernetes/bin/kube-apiserver \\$KUBE_APISERVER_OPTS</span></span><br><span class=\"line\"><span class=\"string\">Restart=on-failure</span></span><br><span class=\"line\"><span class=\"string\">[Install]</span></span><br><span class=\"line\"><span class=\"string\">WantedBy=multi-user.target</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n<p>启动并设置开机自启</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl start kube-apiserver</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> kube-apiserver</span><br></pre></td></tr></table></figure>\n\n<p>出现报错：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">E0608 19:41:30.601867    1912 controller.go:152] Unable to remove old endpoints from kubernetes service: StorageError: key not found, Code: 1, Key: /registry/masterleases/10.162.0.9, ResourceVersion: 0, AdditionalErrorMsg:</span><br></pre></td></tr></table></figure>\n\n<p>花了一下午时间还没有解决这个报错，有点小崩溃</p>\n","categories":["skills"],"tags":["教程","记录","k8s","学习"]},{"title":"平静生活中的一些点缀","url":"/2021/06/21/%E5%B9%B3%E9%9D%99%E7%94%9F%E6%B4%BB%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E7%82%B9%E7%BC%80/","content":"<p>其实我是一个在一个环境熟悉之后就不太想有太大改变的人，如果一切合适我可能会一直在某一个地方一直待下去，工作如此，生活也是如此。 上周，前公司的同事联系我，问我想不想回去，这不是他第一次这样问我了。 <span id=\"more\"></span>说实话我对前公司还是有感情的，毕竟一毕业就去那工作了，自己随着它一起成长，于是我就表达了想回去的想法。 于是很快，和前公司现在技术部负责人聊了很多，昨天也和 hr 经理聊了，最后给的待遇说实话我没办法接受。 可能是真的像他说的这个岗位公司的预算就那么多吧，也可能是我的能力确实达不到要求吧。现在事实就是如此，让我没办法接受。 在有这个回去的打算的时候，我就无数次想着和以前同事一起工作，一起做想做的事，但是很多时候现实没办法和想法一致，现实中有太多要考虑的事情。 今天早上微信发消息拒绝了，生活和工作又回到之前的生活了。</p>\n","categories":["life"],"tags":["杂七杂八"]},{"title":"一些想法","url":"/2021/08/02/%E4%B8%80%E4%BA%9B%E6%83%B3%E6%B3%95/","content":"<p>随着年龄的增长，或者说随着经历的丰富，一直在自我否定。 一直觉得自己没有什么大局观，但是也一直没有一个直观的感受，最近两年越发觉得在大事项的决定上一直是有问题的。 学习如此，大学时总给自己灌输大学学习成绩好无用的观点，鄙视死读书的同学，目前看来这是我最后悔的一件事，相对于其它途径来说，学习是我目前认知中能改变原有阶层（这个词可能用的不恰当，但事实如此）最便捷的途径。 买房，我认为是我近几年做的错事之二，不是不能买房，而是买错地方了，当时因为自己的收入买了个县城的房子，可是没想到当时仅仅是刚毕业，收入肯定不理想，现在想买市区房子却有些后悔了。<span id=\"more\"></span></p>\n","categories":["life"]},{"title":"Kubernetes 监控及日志采集方案","url":"/2021/08/04/kubernetes-%E7%9B%91%E6%8E%A7%E5%8F%8A%E6%97%A5%E5%BF%97%E9%87%87%E9%9B%86%E6%96%B9%E6%A1%88/","content":"<h1 id=\"1-监控方案\"><a href=\"#1-监控方案\" class=\"headerlink\" title=\"1. 监控方案\"></a>1. 监控方案</h1><h2 id=\"1-1-介绍\"><a href=\"#1-1-介绍\" class=\"headerlink\" title=\"1.1 介绍\"></a>1.1 介绍</h2><p>kubernetes 的监控分为三个维度： 主机、容器、应用 我这里采用的是 Promethues 和 Grafana 方案，通过各种 exporter 采集不同维度的监控指标，并通过 promethues 支持的数据格式暴露出来，最后使用 Grafana 展示，异常情况使用 AlertManager 告警。 <a href=\"https://i.loli.net/2021/08/04/MkxNCQco3XwDAfn.jpg\"><img src=\"https://i.loli.net/2021/08/04/MkxNCQco3XwDAfn.jpg\"></a></p>\n<p>监控指标</p>\n<p>实现方式</p>\n<p>举例<span id=\"more\"></span></p>\n<p>Pod 性能</p>\n<p>cAdvisor</p>\n<p>容器 CPU、内存利用率</p>\n<p>Node 性能</p>\n<p>node-exporter</p>\n<p>节点 CPU，内存利用率</p>\n<p>K8S 资源对象</p>\n<p>kube-state-metrics</p>\n<p>Pod&#x2F;Deployment&#x2F;Service</p>\n<h1 id=\"2-部署\"><a href=\"#2-部署\" class=\"headerlink\" title=\"2. 部署\"></a>2. 部署</h1><h2 id=\"2-1-k8s-中部署-promethues\"><a href=\"#2-1-k8s-中部署-promethues\" class=\"headerlink\" title=\"2.1 k8s 中部署 promethues\"></a>2.1 k8s 中部署 promethues</h2><h3 id=\"1-部署守护进程\"><a href=\"#1-部署守护进程\" class=\"headerlink\" title=\"1. 部署守护进程\"></a>1. 部署守护进程</h3><p>文件：node-exporter.yaml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">DaemonSet</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">node-exporter</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">k8s-app:</span> <span class=\"string\">node-exporter</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">        <span class=\"attr\">k8s-app:</span> <span class=\"string\">node-exporter</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">k8s-app:</span> <span class=\"string\">node-exporter</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">prom/node-exporter</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">node-exporter</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">9100</span></span><br><span class=\"line\">          <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">http</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">k8s-app:</span> <span class=\"string\">node-exporter</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">node-exporter</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">http</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">9100</span></span><br><span class=\"line\">    <span class=\"attr\">nodePort:</span> <span class=\"number\">31672</span></span><br><span class=\"line\">    <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">NodePort</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">k8s-app:</span> <span class=\"string\">node-exporter</span></span><br></pre></td></tr></table></figure>\n\n<p>执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl create -f node-exporter.yaml</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-部署-promethues-相关\"><a href=\"#2-部署-promethues-相关\" class=\"headerlink\" title=\"2. 部署 promethues 相关\"></a>2. 部署 promethues 相关</h3><p>rbac-setup.yaml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">prometheus</span></span><br><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> [<span class=\"string\">&quot;&quot;</span>]</span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">nodes</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">nodes/proxy</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">services</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">endpoints</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">pods</span></span><br><span class=\"line\">  <span class=\"attr\">verbs:</span> [<span class=\"string\">&quot;get&quot;</span>, <span class=\"string\">&quot;list&quot;</span>, <span class=\"string\">&quot;watch&quot;</span>]</span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">extensions</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">ingresses</span></span><br><span class=\"line\">  <span class=\"attr\">verbs:</span> [<span class=\"string\">&quot;get&quot;</span>, <span class=\"string\">&quot;list&quot;</span>, <span class=\"string\">&quot;watch&quot;</span>]</span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">nonResourceURLs:</span> [<span class=\"string\">&quot;/metrics&quot;</span>]</span><br><span class=\"line\">  <span class=\"attr\">verbs:</span> [<span class=\"string\">&quot;get&quot;</span>]</span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">prometheus</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">prometheus</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">prometheus</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">prometheus</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br></pre></td></tr></table></figure>\n\n<p>configmap.yaml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">prometheus-config</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">prometheus.yml:</span> </span><br><span class=\"line\">    <span class=\"attr\">global:</span></span><br><span class=\"line\">      <span class=\"attr\">scrape_interval:</span>     <span class=\"string\">15s</span></span><br><span class=\"line\">      <span class=\"attr\">evaluation_interval:</span> <span class=\"string\">15s</span></span><br><span class=\"line\">    <span class=\"attr\">scrape_configs:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">&#x27;kubernetes-apiservers&#x27;</span></span><br><span class=\"line\">      <span class=\"attr\">kubernetes_sd_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">role:</span> <span class=\"string\">endpoints</span></span><br><span class=\"line\">      <span class=\"attr\">scheme:</span> <span class=\"string\">https</span></span><br><span class=\"line\">      <span class=\"attr\">tls_config:</span></span><br><span class=\"line\">        <span class=\"attr\">ca_file:</span> <span class=\"string\">/var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span></span><br><span class=\"line\">      <span class=\"attr\">bearer_token_file:</span> <span class=\"string\">/var/run/secrets/kubernetes.io/serviceaccount/token</span></span><br><span class=\"line\">      <span class=\"attr\">relabel_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> [<span class=\"string\">__meta_kubernetes_namespace</span>, <span class=\"string\">__meta_kubernetes_service_name</span>, <span class=\"string\">__meta_kubernetes_endpoint_port_name</span>]</span><br><span class=\"line\">        <span class=\"attr\">action:</span> <span class=\"string\">keep</span></span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">default;kubernetes;https</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">&#x27;kubernetes-nodes&#x27;</span></span><br><span class=\"line\">      <span class=\"attr\">kubernetes_sd_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">role:</span> <span class=\"string\">node</span></span><br><span class=\"line\">      <span class=\"attr\">scheme:</span> <span class=\"string\">https</span></span><br><span class=\"line\">      <span class=\"attr\">tls_config:</span></span><br><span class=\"line\">        <span class=\"attr\">ca_file:</span> <span class=\"string\">/var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span></span><br><span class=\"line\">      <span class=\"attr\">bearer_token_file:</span> <span class=\"string\">/var/run/secrets/kubernetes.io/serviceaccount/token</span></span><br><span class=\"line\">      <span class=\"attr\">relabel_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">action:</span> <span class=\"string\">labelmap</span></span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">__meta_kubernetes_node_label_(.+)</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">target_label:</span> <span class=\"string\">__address__</span></span><br><span class=\"line\">        <span class=\"attr\">replacement:</span> <span class=\"string\">kubernetes.default.svc:443</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> [<span class=\"string\">__meta_kubernetes_node_name</span>]</span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">(.+)</span></span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">__metrics_path__</span></span><br><span class=\"line\">        <span class=\"attr\">replacement:</span> <span class=\"string\">/api/v1/nodes/$&#123;1&#125;/proxy/metrics</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">&#x27;kubernetes-cadvisor&#x27;</span></span><br><span class=\"line\">      <span class=\"attr\">kubernetes_sd_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">role:</span> <span class=\"string\">node</span></span><br><span class=\"line\">      <span class=\"attr\">scheme:</span> <span class=\"string\">https</span></span><br><span class=\"line\">      <span class=\"attr\">tls_config:</span></span><br><span class=\"line\">        <span class=\"attr\">ca_file:</span> <span class=\"string\">/var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span></span><br><span class=\"line\">      <span class=\"attr\">bearer_token_file:</span> <span class=\"string\">/var/run/secrets/kubernetes.io/serviceaccount/token</span></span><br><span class=\"line\">      <span class=\"attr\">relabel_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">action:</span> <span class=\"string\">labelmap</span></span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">__meta_kubernetes_node_label_(.+)</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">target_label:</span> <span class=\"string\">__address__</span></span><br><span class=\"line\">        <span class=\"attr\">replacement:</span> <span class=\"string\">kubernetes.default.svc:443</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> [<span class=\"string\">__meta_kubernetes_node_name</span>]</span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">(.+)</span></span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">__metrics_path__</span></span><br><span class=\"line\">        <span class=\"attr\">replacement:</span> <span class=\"string\">/api/v1/nodes/$&#123;1&#125;/proxy/metrics/cadvisor</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">&#x27;kubernetes-service-endpoints&#x27;</span></span><br><span class=\"line\">      <span class=\"attr\">kubernetes_sd_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">role:</span> <span class=\"string\">endpoints</span></span><br><span class=\"line\">      <span class=\"attr\">relabel_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> [<span class=\"string\">__meta_kubernetes_service_annotation_prometheus_io_scrape</span>]</span><br><span class=\"line\">        <span class=\"attr\">action:</span> <span class=\"string\">keep</span></span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> [<span class=\"string\">__meta_kubernetes_service_annotation_prometheus_io_scheme</span>]</span><br><span class=\"line\">        <span class=\"attr\">action:</span> <span class=\"string\">replace</span></span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">__scheme__</span></span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">(https?)</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> [<span class=\"string\">__meta_kubernetes_service_annotation_prometheus_io_path</span>]</span><br><span class=\"line\">        <span class=\"attr\">action:</span> <span class=\"string\">replace</span></span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">__metrics_path__</span></span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">(.+)</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> [<span class=\"string\">__address__</span>, <span class=\"string\">__meta_kubernetes_service_annotation_prometheus_io_port</span>]</span><br><span class=\"line\">        <span class=\"attr\">action:</span> <span class=\"string\">replace</span></span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">__address__</span></span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">([^:]+)(?::\\d+)?;(\\d+)</span></span><br><span class=\"line\">        <span class=\"attr\">replacement:</span> <span class=\"string\">$1:$2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">action:</span> <span class=\"string\">labelmap</span></span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">__meta_kubernetes_service_label_(.+)</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> [<span class=\"string\">__meta_kubernetes_namespace</span>]</span><br><span class=\"line\">        <span class=\"attr\">action:</span> <span class=\"string\">replace</span></span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">kubernetes_namespace</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> [<span class=\"string\">__meta_kubernetes_service_name</span>]</span><br><span class=\"line\">        <span class=\"attr\">action:</span> <span class=\"string\">replace</span></span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">kubernetes_name</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">&#x27;kubernetes-services&#x27;</span></span><br><span class=\"line\">      <span class=\"attr\">kubernetes_sd_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">role:</span> <span class=\"string\">service</span></span><br><span class=\"line\">      <span class=\"attr\">metrics_path:</span> <span class=\"string\">/probe</span></span><br><span class=\"line\">      <span class=\"attr\">params:</span></span><br><span class=\"line\">        <span class=\"attr\">module:</span> [<span class=\"string\">http_2xx</span>]</span><br><span class=\"line\">      <span class=\"attr\">relabel_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> [<span class=\"string\">__meta_kubernetes_service_annotation_prometheus_io_probe</span>]</span><br><span class=\"line\">        <span class=\"attr\">action:</span> <span class=\"string\">keep</span></span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> [<span class=\"string\">__address__</span>]</span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">__param_target</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">target_label:</span> <span class=\"string\">__address__</span></span><br><span class=\"line\">        <span class=\"attr\">replacement:</span> <span class=\"string\">blackbox-exporter.example.com:9115</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> [<span class=\"string\">__param_target</span>]</span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">instance</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">action:</span> <span class=\"string\">labelmap</span></span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">__meta_kubernetes_service_label_(.+)</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> [<span class=\"string\">__meta_kubernetes_namespace</span>]</span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">kubernetes_namespace</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> [<span class=\"string\">__meta_kubernetes_service_name</span>]</span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">kubernetes_name</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">&#x27;kubernetes-ingresses&#x27;</span></span><br><span class=\"line\">      <span class=\"attr\">kubernetes_sd_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">role:</span> <span class=\"string\">ingress</span></span><br><span class=\"line\">      <span class=\"attr\">relabel_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> [<span class=\"string\">__meta_kubernetes_ingress_annotation_prometheus_io_probe</span>]</span><br><span class=\"line\">        <span class=\"attr\">action:</span> <span class=\"string\">keep</span></span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> [<span class=\"string\">__meta_kubernetes_ingress_scheme</span>,<span class=\"string\">__address__</span>,<span class=\"string\">__meta_kubernetes_ingress_path</span>]</span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">(.+);(.+);(.+)</span></span><br><span class=\"line\">        <span class=\"attr\">replacement:</span> <span class=\"string\">$&#123;1&#125;://$&#123;2&#125;$&#123;3&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">__param_target</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">target_label:</span> <span class=\"string\">__address__</span></span><br><span class=\"line\">        <span class=\"attr\">replacement:</span> <span class=\"string\">blackbox-exporter.example.com:9115</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> [<span class=\"string\">__param_target</span>]</span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">instance</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">action:</span> <span class=\"string\">labelmap</span></span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">__meta_kubernetes_ingress_label_(.+)</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> [<span class=\"string\">__meta_kubernetes_namespace</span>]</span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">kubernetes_namespace</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> [<span class=\"string\">__meta_kubernetes_ingress_name</span>]</span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">kubernetes_name</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">&#x27;kubernetes-pods&#x27;</span></span><br><span class=\"line\">      <span class=\"attr\">kubernetes_sd_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">role:</span> <span class=\"string\">pod</span></span><br><span class=\"line\">      <span class=\"attr\">relabel_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> [<span class=\"string\">__meta_kubernetes_pod_annotation_prometheus_io_scrape</span>]</span><br><span class=\"line\">        <span class=\"attr\">action:</span> <span class=\"string\">keep</span></span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> [<span class=\"string\">__meta_kubernetes_pod_annotation_prometheus_io_path</span>]</span><br><span class=\"line\">        <span class=\"attr\">action:</span> <span class=\"string\">replace</span></span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">__metrics_path__</span></span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">(.+)</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> [<span class=\"string\">__address__</span>, <span class=\"string\">__meta_kubernetes_pod_annotation_prometheus_io_port</span>]</span><br><span class=\"line\">        <span class=\"attr\">action:</span> <span class=\"string\">replace</span></span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">([^:]+)(?::\\d+)?;(\\d+)</span></span><br><span class=\"line\">        <span class=\"attr\">replacement:</span> <span class=\"string\">$1:$2</span></span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">__address__</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">action:</span> <span class=\"string\">labelmap</span></span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">__meta_kubernetes_pod_label_(.+)</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> [<span class=\"string\">__meta_kubernetes_namespace</span>]</span><br><span class=\"line\">        <span class=\"attr\">action:</span> <span class=\"string\">replace</span></span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">kubernetes_namespace</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> [<span class=\"string\">__meta_kubernetes_pod_name</span>]</span><br><span class=\"line\">        <span class=\"attr\">action:</span> <span class=\"string\">replace</span></span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">kubernetes_pod_name</span></span><br></pre></td></tr></table></figure>\n\n<p>prometheus.deploy.yml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">prometheus-deployment</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">prometheus</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">prometheus</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">prometheus</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">prom/prometheus:v2.0.0</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">prometheus</span></span><br><span class=\"line\">        <span class=\"attr\">command:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">&quot;/bin/prometheus&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">args:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">&quot;--config.file=/etc/prometheus/prometheus.yml&quot;</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">&quot;--storage.tsdb.path=/prometheus&quot;</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">&quot;--storage.tsdb.retention=24h&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">9090</span></span><br><span class=\"line\">          <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">&quot;/prometheus&quot;</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">data</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">&quot;/etc/prometheus&quot;</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">config-volume</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">100Mi</span></span><br><span class=\"line\">          <span class=\"attr\">limits:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">500m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">2500Mi</span></span><br><span class=\"line\">      <span class=\"attr\">serviceAccountName:</span> <span class=\"string\">prometheus</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">data</span></span><br><span class=\"line\">        <span class=\"attr\">emptyDir:</span> &#123;&#125;</span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">config-volume</span></span><br><span class=\"line\">        <span class=\"attr\">configMap:</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">prometheus-config</span></span><br></pre></td></tr></table></figure>\n\n<p>prometheus.svc.yml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">prometheus</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">prometheus</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">NodePort</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">9090</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">9090</span></span><br><span class=\"line\">    <span class=\"attr\">nodePort:</span> <span class=\"number\">30003</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">prometheus</span></span><br></pre></td></tr></table></figure>\n\n<p>依次执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl create -f rbac-setup.yaml</span><br><span class=\"line\">kubectl create -f configmap.yaml</span><br><span class=\"line\">kubectl create -f prometheus.deploy.yml</span><br><span class=\"line\">kubectl create -f prometheus.svc.yml</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-2-部署-grafana\"><a href=\"#2-2-部署-grafana\" class=\"headerlink\" title=\"2.2 部署 grafana\"></a>2.2 部署 grafana</h2><p>grafana-deploy.yaml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">grafana-core</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">grafana</span></span><br><span class=\"line\">    <span class=\"attr\">component:</span> <span class=\"string\">core</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">grafana</span></span><br><span class=\"line\">        <span class=\"attr\">component:</span> <span class=\"string\">core</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">grafana</span></span><br><span class=\"line\">        <span class=\"attr\">component:</span> <span class=\"string\">core</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">grafana/grafana:4.2.0</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">grafana-core</span></span><br><span class=\"line\">        <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">        <span class=\"comment\"># env:</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"comment\"># keep request = limit to keep this container in guaranteed class</span></span><br><span class=\"line\">          <span class=\"attr\">limits:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">100Mi</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">100Mi</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"comment\"># The following env variables set up basic auth twith the default admin user and admin password.</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">GF_AUTH_BASIC_ENABLED</span></span><br><span class=\"line\">            <span class=\"attr\">value:</span> <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">GF_AUTH_ANONYMOUS_ENABLED</span></span><br><span class=\"line\">            <span class=\"attr\">value:</span> <span class=\"string\">&quot;false&quot;</span></span><br><span class=\"line\">          <span class=\"comment\"># - name: GF_AUTH_ANONYMOUS_ORG_ROLE</span></span><br><span class=\"line\">          <span class=\"comment\">#   value: Admin</span></span><br><span class=\"line\">          <span class=\"comment\"># does not really work, because of template variables in exported dashboards:</span></span><br><span class=\"line\">          <span class=\"comment\"># - name: GF_DASHBOARDS_JSON_ENABLED</span></span><br><span class=\"line\">          <span class=\"comment\">#   value: &quot;true&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">readinessProbe:</span></span><br><span class=\"line\">          <span class=\"attr\">httpGet:</span></span><br><span class=\"line\">            <span class=\"attr\">path:</span> <span class=\"string\">/login</span></span><br><span class=\"line\">            <span class=\"attr\">port:</span> <span class=\"number\">3000</span></span><br><span class=\"line\">          <span class=\"comment\"># initialDelaySeconds: 30</span></span><br><span class=\"line\">          <span class=\"comment\"># timeoutSeconds: 1</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">grafana-persistent-storage</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/var</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">grafana-persistent-storage</span></span><br><span class=\"line\">        <span class=\"attr\">emptyDir:</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>grafana-ing.yaml</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">apiVersion: extensions/v1beta1</span><br><span class=\"line\">kind: Ingress</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">   name: grafana</span><br><span class=\"line\">   namespace: kube-system</span><br><span class=\"line\">spec:</span><br><span class=\"line\">   rules:</span><br><span class=\"line\">   - host: k8s.grafana</span><br><span class=\"line\">     http:</span><br><span class=\"line\">       paths:</span><br><span class=\"line\">       - path: /</span><br><span class=\"line\">         backend:</span><br><span class=\"line\">          serviceName: grafana</span><br><span class=\"line\">          servicePort: 3000</span><br></pre></td></tr></table></figure>\n\n<p>grafana-svc.yaml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">grafana</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">grafana</span></span><br><span class=\"line\">    <span class=\"attr\">component:</span> <span class=\"string\">core</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">NodePort</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">3000</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">grafana</span></span><br><span class=\"line\">    <span class=\"attr\">component:</span> <span class=\"string\">core</span></span><br></pre></td></tr></table></figure>\n\n<p>依次执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl create -f  grafana-deploy.yaml</span><br><span class=\"line\">kubectl create -f  grafana-svc.yaml</span><br><span class=\"line\">kubectl create -f  grafana-ing.yaml</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-3-配置\"><a href=\"#2-3-配置\" class=\"headerlink\" title=\"2.3 配置\"></a>2.3 配置</h2><p>查看端口</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl get svc -n kube-system -o wide</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://i.loli.net/2021/08/31/i5VrehEnCOu6HfY.jpg\"><img src=\"https://i.loli.net/2021/08/31/i5VrehEnCOu6HfY.jpg\"></a> 访问 <a href=\"https://i.loli.net/2021/08/31/MqXiPKL9RFxnaQD.jpg\"><img src=\"https://i.loli.net/2021/08/31/MqXiPKL9RFxnaQD.jpg\"></a> 默认账号密码都是 admin 登录之后 <a href=\"https://i.loli.net/2021/08/31/lNcfRrEJFaIgzUp.jpg\"><img src=\"https://i.loli.net/2021/08/31/lNcfRrEJFaIgzUp.jpg\"></a> 配置数据源 <a href=\"https://i.loli.net/2021/08/31/LsVISfJW8bAcXdu.jpg\"><img src=\"https://i.loli.net/2021/08/31/LsVISfJW8bAcXdu.jpg\"></a> <a href=\"https://i.loli.net/2021/08/31/ELT9xsYCfvSIVGw.jpg\"><img src=\"https://i.loli.net/2021/08/31/ELT9xsYCfvSIVGw.jpg\"></a> 配置dashboard <a href=\"https://i.loli.net/2021/08/31/MDIYCZbmcvsKqf1.jpg\"><img src=\"https://i.loli.net/2021/08/31/MDIYCZbmcvsKqf1.jpg\"></a> <a href=\"https://i.loli.net/2021/08/31/xASjMuET9aiyNvs.jpg\"><img src=\"https://i.loli.net/2021/08/31/xASjMuET9aiyNvs.jpg\"></a> <a href=\"https://i.loli.net/2021/08/31/8cTaqIfWN5SnH3A.jpg\"><img src=\"https://i.loli.net/2021/08/31/8cTaqIfWN5SnH3A.jpg\"></a> 结果 <a href=\"https://i.loli.net/2021/08/31/PpnEYCa7UB1otls.jpg\"><img src=\"https://i.loli.net/2021/08/31/PpnEYCa7UB1otls.jpg\"></a></p>\n","categories":["skills"],"tags":["运维","k8s"]},{"title":"promethues 的联邦和 K8S 集群的监控方案","url":"/2021/09/01/promethues-%E7%9A%84%E8%81%94%E9%82%A6%E5%92%8C-k8s-%E9%9B%86%E7%BE%A4%E7%9A%84%E7%9B%91%E6%8E%A7%E6%96%B9%E6%A1%88/","content":"<h1 id=\"联邦集群介绍\"><a href=\"#联邦集群介绍\" class=\"headerlink\" title=\"联邦集群介绍\"></a>联邦集群介绍</h1><p>对于大部分监控规模来说，只需要在一个数据中心（云服务可用区，k8s 集群）部署一个Promethues Server 实例就可以在各个数据中心处理上千规模的集群。同时将 Promethue Server 部署到不同的数据中心可以避免网络配置的复杂性。 <a href=\"https://i.loli.net/2021/09/01/K8YTrJ5h2ae93ZL.jpg\"><img src=\"https://i.loli.net/2021/09/01/K8YTrJ5h2ae93ZL.jpg\"></a> 如上图所示，在每个数据中心部署单独的Prometheus Server，用于采集当前数据中心监控数据。并由一个中心的Prometheus Server负责聚合多个数据中心的监控数据。这一特性在Promthues中称为联邦集群。 联邦集群的核心在于每一个Prometheus Server都包含一个用于获取当前实例中监控样本的接口&#x2F;federate。对于中心Prometheus Server而言，无论是从其他的Prometheus实例还是Exporter实例中获取数据实际上并没有任何差异。</p>\n<span id=\"more\"></span>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">scrape_configs:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">&#x27;federate&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">scrape_interval:</span> <span class=\"string\">15s</span></span><br><span class=\"line\">    <span class=\"attr\">honor_labels:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">metrics_path:</span> <span class=\"string\">&#x27;/federate&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">params:</span></span><br><span class=\"line\">      <span class=\"string\">&#x27;match[]&#x27;</span><span class=\"string\">:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">&#x27;&#123;job=&quot;prometheus&quot;&#125;&#x27;</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">&#x27;&#123;__name__=~&quot;job:.*&quot;&#125;&#x27;</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">&#x27;&#123;__name__=~&quot;node.*&quot;&#125;&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">static_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">targets:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">&#x27;192.168.77.11:9090&#x27;</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">&#x27;192.168.77.12:9090&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>为了有效的减少不必要的时间序列，通过params参数可以用于指定只获取某些时间序列的样本数据，例如</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;http://192.168.77.11:9090/federate?match[]=&#123;job%3D&quot;prometheus&quot;&#125;&amp;match[]=&#123;__name__%3D~&quot;job%3A.*&quot;&#125;&amp;match[]=&#123;__name__%3D~&quot;node.*&quot;&#125;&quot;</span><br></pre></td></tr></table></figure>\n\n<p>通过URL中的match[]参数指定我们可以指定需要获取的时间序列。match[]参数必须是一个瞬时向量选择器，例如up或者{job&#x3D;”api-server”}。配置多个match[]参数，用于获取多组时间序列的监控数据。</p>\n<h1 id=\"Promethues-高可用\"><a href=\"#Promethues-高可用\" class=\"headerlink\" title=\"Promethues 高可用\"></a>Promethues 高可用</h1><p>Prometheus的本地存储给Prometheus带来了简单高效的使用体验，可以让Promthues在单节点的情况下满足大部分用户的监控需求。但是本地存储也同时限制了Prometheus的可扩展性，带来了数据持久化等一系列的问题。通过Prometheus的Remote Storage特性可以解决这一系列问题，包括Promthues的动态扩展，以及历史数据的存储。 而除了数据持久化问题以外，影响Promthues性能表现的另外一个重要因素就是数据采集任务量，以及单台Promthues能够处理的时间序列数。因此当监控规模大到Promthues单台无法有效处理的情况下，可以选择利用Promthues的联邦集群的特性，将Promthues的监控任务划分到不同的实例当中。</p>\n<h2 id=\"基本HA：服务可用性\"><a href=\"#基本HA：服务可用性\" class=\"headerlink\" title=\"基本HA：服务可用性\"></a>基本HA：服务可用性</h2><p>由于Promthues的Pull机制的设计，为了确保Promthues服务的可用性，用户只需要部署多套Prometheus Server实例，并且采集相同的Exporter目标即可。 <a href=\"https://i.loli.net/2021/09/01/QjLZJInClGbYyDg.jpg\"><img src=\"https://i.loli.net/2021/09/01/QjLZJInClGbYyDg.jpg\"></a> 基本的HA模式只能确保Promthues服务的可用性问题，但是不解决Prometheus Server之间的数据一致性问题以及持久化问题(数据丢失后无法恢复)，也无法进行动态的扩展。因此这种部署方式适合监控规模不大，Promthues Server也不会频繁发生迁移的情况，并且只需要保存短周期监控数据的场景。</p>\n<h2 id=\"基本HA-远程存储\"><a href=\"#基本HA-远程存储\" class=\"headerlink\" title=\"基本HA + 远程存储\"></a>基本HA + 远程存储</h2><p>在基本HA模式的基础上通过添加Remote Storage存储支持，将监控数据保存在第三方存储服务上。 <a href=\"https://i.loli.net/2021/09/01/TxZwACltDE1PaVp.jpg\"><img src=\"https://i.loli.net/2021/09/01/TxZwACltDE1PaVp.jpg\"></a> 在解决了Promthues服务可用性的基础上，同时确保了数据的持久化，当Promthues Server发生宕机或者数据丢失的情况下，可以快速的恢复。 同时Promthues Server可能很好的进行迁移。因此，该方案适用于用户监控规模不大，但是希望能够将监控数据持久化，同时能够确保Promthues Server的可迁移性的场景。</p>\n<h2 id=\"基本HA-远程存储-联邦集群\"><a href=\"#基本HA-远程存储-联邦集群\" class=\"headerlink\" title=\"基本HA + 远程存储 + 联邦集群\"></a>基本HA + 远程存储 + 联邦集群</h2><p>当单台Promthues Server无法处理大量的采集任务时，用户可以考虑基于Prometheus联邦集群的方式将监控采集任务划分到不同的Promthues实例当中即在任务级别功能分区。 <a href=\"https://i.loli.net/2021/09/01/R2NqcyouOUQmZzI.jpg\"><img src=\"https://i.loli.net/2021/09/01/R2NqcyouOUQmZzI.jpg\"></a> 这种部署方式一般适用于两种场景： 场景一：单数据中心 + 大量的采集任务 这种场景下Promthues的性能瓶颈主要在于大量的采集任务，因此用户需要利用Prometheus联邦集群的特性，将不同类型的采集任务划分到不同的Promthues子服务中，从而实现功能分区。例如一个Promthues Server负责采集基础设施相关的监控指标，另外一个Prometheus Server负责采集应用监控指标。再有上层Prometheus Server实现对数据的汇聚。 场景二：多数据中心 这种模式也适合与多数据中心的情况，当Promthues Server无法直接与数据中心中的Exporter进行通讯时，在每一个数据中部署一个单独的Promthues Server负责当前数据中心的采集任务是一个不错的方式。这样可以避免用户进行大量的网络配置，只需要确保主Promthues Server实例能够与当前数据中心的Prometheus Server通讯即可。 中心Promthues Server负责实现对多数据中心数据的聚合。</p>\n<h2 id=\"高可用方案选择\"><a href=\"#高可用方案选择\" class=\"headerlink\" title=\"高可用方案选择\"></a>高可用方案选择</h2><p>上面的部分，根据不同的场景演示了3种不同的高可用部署方案。当然对于Promthues部署方案需要用户根据监控规模以及自身的需求进行动态调整，下表展示了Promthues和高可用有关3个选项各自解决的问题，用户可以根据自己的需求灵活选择 <a href=\"https://i.loli.net/2021/09/01/q129eHPwEoaL8gG.jpg\"><img src=\"https://i.loli.net/2021/09/01/q129eHPwEoaL8gG.jpg\"></a></p>\n<h1 id=\"在K8S里面的监控方案\"><a href=\"#在K8S里面的监控方案\" class=\"headerlink\" title=\"在K8S里面的监控方案\"></a>在K8S里面的监控方案</h1><p><a href=\"https://i.loli.net/2021/09/01/3Ja9lGSOVyxoHLQ.jpg\"><img src=\"https://i.loli.net/2021/09/01/3Ja9lGSOVyxoHLQ.jpg\"></a></p>\n","categories":["skills"],"tags":["k8s","监控","Promethues"]},{"title":"Oralce 数据库修改实例名和数据库名","url":"/2021/10/13/oralce-%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BF%AE%E6%94%B9%E5%AE%9E%E4%BE%8B%E5%90%8D%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E5%90%8D/","content":"<h1 id=\"Oralce-数据库修改实例名和数据库名\"><a href=\"#Oralce-数据库修改实例名和数据库名\" class=\"headerlink\" title=\"Oralce 数据库修改实例名和数据库名\"></a>Oralce 数据库修改实例名和数据库名</h1><p>分为两个阶段，第一阶段修改实例名sid；第二阶段修改数据库名dbname 将原先的实例名PSPROD 更改为 PSUAT 将原先的数据库名PSPROD 更改为 PSUAT</p>\n<span id=\"more\"></span>\n<h2 id=\"1-修改实例名-sid\"><a href=\"#1-修改实例名-sid\" class=\"headerlink\" title=\"1. 修改实例名 sid\"></a>1. 修改实例名 sid</h2><h3 id=\"1-1-查看当前实例名\"><a href=\"#1-1-查看当前实例名\" class=\"headerlink\" title=\"1.1 查看当前实例名\"></a>1.1 查看当前实例名</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 登录数据库</span></span><br><span class=\"line\">su - oracle</span><br><span class=\"line\">sqlplus / as sysdba</span><br><span class=\"line\"></span><br><span class=\"line\">SQL*Plus: Release 12.2.0.1.0 Production on Wed Oct 13 15:53:09 2021</span><br><span class=\"line\"></span><br><span class=\"line\">Copyright (c) 1982, 2016, Oracle.  All rights reserved.</span><br><span class=\"line\"></span><br><span class=\"line\">Connected to:</span><br><span class=\"line\">Oracle Database 12c Enterprise Edition Release 12.2.0.1.0 - 64bit Production</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看实例名</span></span><br><span class=\"line\">SQL&gt; select instance from v<span class=\"variable\">$thread</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">INSTANCE</span><br><span class=\"line\">--------------------------------------------------------------------------------</span><br><span class=\"line\">PSPROD</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-2-关闭数据库\"><a href=\"#1-2-关闭数据库\" class=\"headerlink\" title=\"1.2 关闭数据库\"></a>1.2 关闭数据库</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SQL</span><span class=\"operator\">&gt;</span> shutdown immediate</span><br><span class=\"line\">Database closed.</span><br><span class=\"line\">Database dismounted.</span><br><span class=\"line\">ORACLE instance shut down.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SQL</span><span class=\"operator\">&gt;</span> exit</span><br><span class=\"line\">Disconnected <span class=\"keyword\">from</span> Oracle Database <span class=\"number\">12</span>c Enterprise Edition <span class=\"keyword\">Release</span> <span class=\"number\">12.2</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"number\">.0</span> <span class=\"operator\">-</span> <span class=\"number\">64</span>bit Production</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-3-修改-x2F-etc-x2F-oratab文件\"><a href=\"#1-3-修改-x2F-etc-x2F-oratab文件\" class=\"headerlink\" title=\"1.3 修改&#x2F;etc&#x2F;oratab文件\"></a>1.3 修改&#x2F;etc&#x2F;oratab文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将文件里面的PSPROD换成PSUAT</span></span><br><span class=\"line\">vim /etc/oratab</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-4-修改-bash-profile文件\"><a href=\"#1-4-修改-bash-profile文件\" class=\"headerlink\" title=\"1.4 修改.bash_profile文件\"></a>1.4 修改.bash_profile文件</h3><p>编辑oracle用户的 .bash_profile文件,将文件里面的PSPROD换成PSUAT</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim ~/.bash_profile</span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.bash_profile</span><br><span class=\"line\"><span class=\"comment\"># 查看是否生效</span></span><br><span class=\"line\">envgrep ORACLE</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-5-修改dbs目录下的文件名\"><a href=\"#1-5-修改dbs目录下的文件名\" class=\"headerlink\" title=\"1.5 修改dbs目录下的文件名\"></a>1.5 修改dbs目录下的文件名</h3><p>dbs目录是用于存放数据库服务器端的参数文件Spfile、初始化文件init、还有密码文件orapw$ORACLE_SID</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"variable\">$ORACLE_HOME</span>/dbs</span><br><span class=\"line\"><span class=\"built_in\">mv</span> hc_PSPROD.dat  hc_PSUAT.dat</span><br><span class=\"line\"><span class=\"built_in\">mv</span> lkPSPROD lkPSUAT</span><br><span class=\"line\"><span class=\"built_in\">mv</span> spfilePSPROD.ora  spfilePSUAT.ora</span><br></pre></td></tr></table></figure>\n\n<p>重新生成密码文件，并将旧的密码文件删除</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">orapwd file=<span class=\"variable\">$ORACLE_HOME</span>/dbs/oraw<span class=\"variable\">$ORACLE_SID</span> password=Admin123. entries=5 force=y</span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf orapwPSPROD</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-6-登录数据库查看\"><a href=\"#1-6-登录数据库查看\" class=\"headerlink\" title=\"1.6 登录数据库查看\"></a>1.6 登录数据库查看</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sqlplus / as sysdba</span><br><span class=\"line\"></span><br><span class=\"line\">SQL*Plus: Release 12.2.0.1.0 Production on Wed Oct 13 16:05:24 2021</span><br><span class=\"line\"></span><br><span class=\"line\">Copyright (c) 1982, 2016, Oracle.  All rights reserved.</span><br><span class=\"line\"></span><br><span class=\"line\">Connected to an idle instance.</span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt; startup</span><br><span class=\"line\">ORACLE instance started.</span><br><span class=\"line\"></span><br><span class=\"line\">Total System Global Area 8053063680 bytes</span><br><span class=\"line\">Fixed Size          8639712 bytes</span><br><span class=\"line\">Variable Size        1593838368 bytes</span><br><span class=\"line\">Database Buffers     6442450944 bytes</span><br><span class=\"line\">Redo Buffers            8134656 bytes</span><br><span class=\"line\">Database mounted.</span><br><span class=\"line\">Database opened.</span><br><span class=\"line\">SQL&gt; select instance from v<span class=\"variable\">$thread</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">INSTANCE</span><br><span class=\"line\">--------------------------------------------------------------------------------</span><br><span class=\"line\">PSUAT</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-修改数据库名dbname\"><a href=\"#2-修改数据库名dbname\" class=\"headerlink\" title=\"2. 修改数据库名dbname\"></a>2. 修改数据库名dbname</h2><p>不用退出登录，接着开始修改数据库名dbname</p>\n<h3 id=\"2-1-备份控制文件，并关闭退出数据库\"><a href=\"#2-1-备份控制文件，并关闭退出数据库\" class=\"headerlink\" title=\"2.1 备份控制文件，并关闭退出数据库\"></a>2.1 备份控制文件，并关闭退出数据库</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SQL</span><span class=\"operator\">&gt;</span> <span class=\"keyword\">alter</span> database backup controlfile <span class=\"keyword\">to</span> trace resetlogs;</span><br><span class=\"line\"></span><br><span class=\"line\">Database altered.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SQL</span><span class=\"operator\">&gt;</span> shutdown immediate</span><br><span class=\"line\">Database closed.</span><br><span class=\"line\">Database dismounted.</span><br><span class=\"line\">ORACLE instance shut down.</span><br><span class=\"line\"><span class=\"keyword\">SQL</span><span class=\"operator\">&gt;</span> exit</span><br><span class=\"line\">Disconnected <span class=\"keyword\">from</span> Oracle Database <span class=\"number\">12</span>c Enterprise Edition <span class=\"keyword\">Release</span> <span class=\"number\">12.2</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"number\">.0</span> <span class=\"operator\">-</span> <span class=\"number\">64</span>bit Production</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-根据旧的控制文件生成修改更新控制文件的sql语句\"><a href=\"#2-2-根据旧的控制文件生成修改更新控制文件的sql语句\" class=\"headerlink\" title=\"2.2 根据旧的控制文件生成修改更新控制文件的sql语句\"></a>2.2 根据旧的控制文件生成修改更新控制文件的sql语句</h3><p>进入控制文件的备份目录，根据alter_orcl.log找到控制备份文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">/data/app/oracle/diag/rdbms/psprod/PSUAT/trace</span><br><span class=\"line\">vim alert_PSUAT.<span class=\"built_in\">log</span></span><br></pre></td></tr></table></figure>\n\n<p>在 alert_PSUAT.log 文件中找到contolfile的备份trc Backup controlfile written to trace file &#x2F;data&#x2F;app&#x2F;oracle&#x2F;diag&#x2F;rdbms&#x2F;psprodstb5&#x2F;PSUAT&#x2F;trace&#x2F;PSUAT_ora_3619.trc 复制一份进行修改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cp</span> /data/app/oracle/diag/rdbms/psprodstb5/PSUAT/trace/PSUAT_ora_3619.trc /tmp/PSUAT.sql</span><br></pre></td></tr></table></figure>\n\n<p>编辑文件isdms.sql 1）查找STARTUP NOMOUNT语句，将这一行上面的所有行都删除 2）将– End of tempfile additions.语句下面的行全部删除 3）查找所有以–开始的行，把这些行删除 4）查找所有的PSPROD修改为PSUAT，所有的psprod修改为psuat 5）找到CREATE CONTROLFILE REUSE DATABASE…语句，将其中的REUSE修改为SET 6）找到RECOVER DATABASE USING BACKUP CONTROLFILE语句，将其用双横线（–）注释掉 修改完后：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">STARTUP NOMOUNT</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> CONTROLFILE <span class=\"keyword\">SET</span> DATABASE &quot;PSUAT&quot; RESETLOGS FORCE LOGGING ARCHIVELOG</span><br><span class=\"line\">    MAXLOGFILES <span class=\"number\">16</span></span><br><span class=\"line\">    MAXLOGMEMBERS <span class=\"number\">3</span></span><br><span class=\"line\">    MAXDATAFILES <span class=\"number\">200</span></span><br><span class=\"line\">    MAXINSTANCES <span class=\"number\">8</span></span><br><span class=\"line\">    MAXLOGHISTORY <span class=\"number\">292</span></span><br><span class=\"line\">LOGFILE</span><br><span class=\"line\">  <span class=\"keyword\">GROUP</span> <span class=\"number\">4</span> <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/redo04.log&#x27;</span>  SIZE <span class=\"number\">500</span>M BLOCKSIZE <span class=\"number\">512</span>,</span><br><span class=\"line\">  <span class=\"keyword\">GROUP</span> <span class=\"number\">5</span> <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/redo05.log&#x27;</span>  SIZE <span class=\"number\">500</span>M BLOCKSIZE <span class=\"number\">512</span>,</span><br><span class=\"line\">  <span class=\"keyword\">GROUP</span> <span class=\"number\">6</span> <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/redo06.log&#x27;</span>  SIZE <span class=\"number\">500</span>M BLOCKSIZE <span class=\"number\">512</span></span><br><span class=\"line\"><span class=\"comment\">-- STANDBY LOGFILE</span></span><br><span class=\"line\"><span class=\"comment\">--   GROUP 1 &#x27;/data/app/oracle/oradata/PSUAT/standby01.log&#x27;  SIZE 500M BLOCKSIZE 512,</span></span><br><span class=\"line\"><span class=\"comment\">--   GROUP 2 &#x27;/data/app/oracle/oradata/PSUAT/standby02.log&#x27;  SIZE 500M BLOCKSIZE 512,</span></span><br><span class=\"line\"><span class=\"comment\">--   GROUP 3 &#x27;/data/app/oracle/oradata/PSUAT/standby03.log&#x27;  SIZE 500M BLOCKSIZE 512,</span></span><br><span class=\"line\"><span class=\"comment\">--   GROUP 7 &#x27;/data/app/oracle/oradata/PSUAT/standby04.log&#x27;  SIZE 500M BLOCKSIZE 512</span></span><br><span class=\"line\">DATAFILE</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/system01.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/aaapp.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/sysaux01.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/undotbs01.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/psdefault.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/users01.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/aalarge.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/adapp.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/amapp.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/avapp.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/bdapp.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/bnapp.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/bnlarge.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/ccapp.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/coapp.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/cuaudit.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/cularg1.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/cularg2.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/cularg3.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/cularge.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/diapp.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/dtapp.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/eoapp.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/eobfapp.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/eocfapp.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/eocmapp.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/eocmlrg.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/eocmwrk.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/eocuapp.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/eoculrg.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/eodsapp.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/eodslrg.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/eoecapp.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/eoeclrg.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/eoecwrk.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/eoeiapp.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/eoeilrg.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/eoewapp.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/eoewlrg.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/eoewwrk.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/eoiuapp.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/eoiulrg.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/eoiuwrk.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/eolarge.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/eoltapp.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/eoppapp.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/eopplrg.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/eotpapp.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/eotplrg.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/epapp.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/eplarge.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/erapp.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/erlarge.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/erwork.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/faapp.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/falarge.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/fgapp.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/fglarge.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/fsapp.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/giapp.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/gpapp.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/gpdeapp.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/hpapp.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/hrapp.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/hrapp1.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/hrapp2.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/hrapp3.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/hrapp4.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/hrapp5.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/hrapp6.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/hrapp7.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/hrimage.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/hrlarg1.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/hrlarge.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/hrsapp.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/hrsarch.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/hrslarge.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/hrswork.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/hrwork.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/htapp.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/inapp.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/paapp.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/palarge.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/pcapp.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/pclarge.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/piapp.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/pilarge.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/piwork.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/poapp.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/psimage.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/psimage2.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/psimgr.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/psindex.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/ptamsg.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/ptapp.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/ptappe.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/ptaudit.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/ptcmstar.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/ptlock.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/ptprc.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/ptprjwk.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/ptrpts.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/psmatvw.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/pttbl.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/pttlrg.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/pttree.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/ptwork.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/pvapp.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/py0lrg.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/pyapp.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/pylarge.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/pywork.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/saapp.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/sacapp.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/salarge.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/srapp.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/stapp.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/stlarge.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/stwork.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/tlapp.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/tllarge.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/tlwork.dbf&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/waapp.dbf&#x27;</span></span><br><span class=\"line\"><span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> AL32UTF8</span><br><span class=\"line\">;</span><br><span class=\"line\"><span class=\"comment\">-- RECOVER DATABASE USING BACKUP CONTROLFILE</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> DATABASE <span class=\"keyword\">OPEN</span> RESETLOGS;</span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span>SPACE TEMP <span class=\"keyword\">ADD</span> TEMPFILE <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/temp01.dbf&#x27;</span></span><br><span class=\"line\">     SIZE <span class=\"number\">306184192</span>  REUSE AUTOEXTEND <span class=\"keyword\">ON</span> NEXT <span class=\"number\">655360</span>  MAXSIZE <span class=\"number\">32767</span>M;</span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span>SPACE PSTEMP <span class=\"keyword\">ADD</span> TEMPFILE <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/pstemp01.dbf&#x27;</span></span><br><span class=\"line\">     SIZE <span class=\"number\">314572800</span>  REUSE AUTOEXTEND OFF;</span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span>SPACE PSGTT01 <span class=\"keyword\">ADD</span> TEMPFILE <span class=\"string\">&#x27;/data/app/oracle/oradata/PSUAT/psgtt01.dbf&#x27;</span></span><br><span class=\"line\">     SIZE <span class=\"number\">524288000</span>  REUSE AUTOEXTEND <span class=\"keyword\">ON</span> NEXT <span class=\"number\">5242880</span>  MAXSIZE <span class=\"number\">32767</span>M;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-生成配置文件\"><a href=\"#2-3-生成配置文件\" class=\"headerlink\" title=\"2.3 生成配置文件\"></a>2.3 生成配置文件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sqlplus  / as sysdba</span><br><span class=\"line\"></span><br><span class=\"line\">SQL*Plus: Release 12.2.0.1.0 Production on Wed Oct 13 16:19:11 2021</span><br><span class=\"line\"></span><br><span class=\"line\">Copyright (c) 1982, 2016, Oracle.  All rights reserved.</span><br><span class=\"line\"></span><br><span class=\"line\">Connected to an idle instance.</span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt; create pfile   from spfile;</span><br><span class=\"line\"></span><br><span class=\"line\">File created.</span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt; exit</span><br><span class=\"line\">Disconnected</span><br></pre></td></tr></table></figure>\n\n<p>最终生成的文件在$ORACLE_HOME&#x2F;dbs目录下文件名为init$ORACLE_SID.ora 在本示例中为：initPSUAT.ora</p>\n<h3 id=\"2-4-目录和文件修改\"><a href=\"#2-4-目录和文件修改\" class=\"headerlink\" title=\"2.4 目录和文件修改\"></a>2.4 目录和文件修改</h3><h4 id=\"2-4-1-initPSUAT-ora文件修改\"><a href=\"#2-4-1-initPSUAT-ora文件修改\" class=\"headerlink\" title=\"2.4.1 initPSUAT.ora文件修改\"></a>2.4.1 initPSUAT.ora文件修改</h4><p>这个文件是上面生成的配置文件 1）将PSPROD.开头的配置项删除 2）将文件中的PSPROD替换成PSUAT，psprod替换成psuat</p>\n<h4 id=\"2-4-2-init-ora文件修改\"><a href=\"#2-4-2-init-ora文件修改\" class=\"headerlink\" title=\"2.4.2 init.ora文件修改\"></a>2.4.2 init.ora文件修改</h4><p>将文件中的PSPROD替换成PSUAT，psprod替换成psuat</p>\n<h4 id=\"2-4-3-spfilePSUAT-ora文件修改\"><a href=\"#2-4-3-spfilePSUAT-ora文件修改\" class=\"headerlink\" title=\"2.4.3 spfilePSUAT.ora文件修改\"></a>2.4.3 spfilePSUAT.ora文件修改</h4><p>1）将PSPROD.开头的配置项删除 2）将文件中的PSPROD替换成PSUAT，psprod替换成psuat</p>\n<h4 id=\"2-4-4-删除文件lkPSPROD\"><a href=\"#2-4-4-删除文件lkPSPROD\" class=\"headerlink\" title=\"2.4.4 删除文件lkPSPROD\"></a>2.4.4 删除文件lkPSPROD</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">rm</span> lkPSPROD</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-5-修改-ORACLE-BASE-x2F-admin目录下的目录和文件内容\"><a href=\"#2-5-修改-ORACLE-BASE-x2F-admin目录下的目录和文件内容\" class=\"headerlink\" title=\"2.5 修改$ORACLE_BASE&#x2F;admin目录下的目录和文件内容\"></a>2.5 修改$ORACLE_BASE&#x2F;admin目录下的目录和文件内容</h3><h4 id=\"2-5-1-将admin目录下的PSPROD目录名重命名为PSUAT\"><a href=\"#2-5-1-将admin目录下的PSPROD目录名重命名为PSUAT\" class=\"headerlink\" title=\"2.5.1 将admin目录下的PSPROD目录名重命名为PSUAT\"></a>2.5.1 将admin目录下的PSPROD目录名重命名为PSUAT</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"variable\">$ORACLE_BASE</span>/admin</span><br><span class=\"line\"><span class=\"built_in\">mv</span> PSPROD PSUAT</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-6-修改-ORACLE-BASE-x2F-diag目录下的目录\"><a href=\"#2-6-修改-ORACLE-BASE-x2F-diag目录下的目录\" class=\"headerlink\" title=\"2.6 修改$ORACLE_BASE&#x2F;diag目录下的目录\"></a>2.6 修改$ORACLE_BASE&#x2F;diag目录下的目录</h3><h6 id=\"修改目录名，删除旧的psprod目录\"><a href=\"#修改目录名，删除旧的psprod目录\" class=\"headerlink\" title=\"修改目录名，删除旧的psprod目录\"></a>修改目录名，删除旧的psprod目录</h6><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"variable\">$ORACLE_BASE</span>/diag/rdbms</span><br><span class=\"line\"><span class=\"built_in\">mv</span> psprod psuat</span><br><span class=\"line\"><span class=\"built_in\">cd</span> psuat</span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf PSPROD</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-7-修改-ORACLE-BASE-x2F-oradata目录下的目录和文件内容\"><a href=\"#2-7-修改-ORACLE-BASE-x2F-oradata目录下的目录和文件内容\" class=\"headerlink\" title=\"2.7 修改$ORACLE_BASE&#x2F;oradata目录下的目录和文件内容\"></a>2.7 修改$ORACLE_BASE&#x2F;oradata目录下的目录和文件内容</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"variable\">$ORACLE_BASE</span>/oradata</span><br><span class=\"line\"><span class=\"built_in\">mv</span> PSPROD/ PSUAT</span><br><span class=\"line\"><span class=\"comment\"># 删除控制文件</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> PSUAT</span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf control01.ctl  </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-8-修改监听的配置文件tnsnames-ora\"><a href=\"#2-8-修改监听的配置文件tnsnames-ora\" class=\"headerlink\" title=\"2.8 修改监听的配置文件tnsnames.ora\"></a>2.8 修改监听的配置文件tnsnames.ora</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"variable\">$ORACLE_HOME</span>/network/admin</span><br><span class=\"line\">vim tnsnames.ora </span><br><span class=\"line\"><span class=\"comment\"># 修改 host 及 PSPROD 改为 PSUAT</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-8-调用前面生成的-sql-生成控制文件\"><a href=\"#2-8-调用前面生成的-sql-生成控制文件\" class=\"headerlink\" title=\"2.8 调用前面生成的 sql 生成控制文件\"></a>2.8 调用前面生成的 sql 生成控制文件</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"> sqlplus <span class=\"operator\">/</span> <span class=\"keyword\">as</span> sysdba</span><br><span class=\"line\"><span class=\"keyword\">SQL</span><span class=\"operator\">&gt;</span> @<span class=\"operator\">/</span>tmp<span class=\"operator\">/</span>PSUAT.sql</span><br><span class=\"line\">ORA<span class=\"number\">-01081</span>: cannot <span class=\"keyword\">start</span> already<span class=\"operator\">-</span><span class=\"keyword\">running</span> ORACLE <span class=\"operator\">-</span> shut it down <span class=\"keyword\">first</span></span><br><span class=\"line\"></span><br><span class=\"line\">Control file created.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Database altered.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Tablespace altered.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Tablespace altered.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Tablespace altered.</span><br><span class=\"line\"></span><br><span class=\"line\">## 查看是否修改成功</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SQL</span><span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> open_mode <span class=\"keyword\">from</span> v$database;</span><br><span class=\"line\"></span><br><span class=\"line\">OPEN_MODE</span><br><span class=\"line\"><span class=\"comment\">------------------------------------------------------------</span></span><br><span class=\"line\">READ WRITE</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SQL</span><span class=\"operator\">&gt;</span> <span class=\"keyword\">show</span> <span class=\"keyword\">parameter</span> name</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                     TYPE</span><br><span class=\"line\"><span class=\"comment\">------------------------------------ ---------------------------------</span></span><br><span class=\"line\"><span class=\"keyword\">VALUE</span></span><br><span class=\"line\"><span class=\"comment\">------------------------------</span></span><br><span class=\"line\">cdb_cluster_name             string</span><br><span class=\"line\">PSUAT</span><br><span class=\"line\">cell_offloadgroup_name           string</span><br><span class=\"line\"></span><br><span class=\"line\">db_file_name_convert             string</span><br><span class=\"line\"><span class=\"operator\">/</span>data<span class=\"operator\">/</span>app<span class=\"operator\">/</span>oracle<span class=\"operator\">/</span>oradata<span class=\"operator\">/</span>PSUAT</span><br><span class=\"line\">, <span class=\"operator\">/</span>data<span class=\"operator\">/</span>app<span class=\"operator\">/</span>oracle<span class=\"operator\">/</span>oradata<span class=\"operator\">/</span>PSU</span><br><span class=\"line\"><span class=\"keyword\">AT</span></span><br><span class=\"line\">db_name                  string</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                     TYPE</span><br><span class=\"line\"><span class=\"comment\">------------------------------------ ---------------------------------</span></span><br><span class=\"line\"><span class=\"keyword\">VALUE</span></span><br><span class=\"line\"><span class=\"comment\">------------------------------</span></span><br><span class=\"line\">PSUAT</span><br><span class=\"line\">db_unique_name               string</span><br><span class=\"line\">PSUAT</span><br><span class=\"line\">global_names                 <span class=\"type\">boolean</span></span><br><span class=\"line\"><span class=\"literal\">FALSE</span></span><br><span class=\"line\">instance_name                string</span><br><span class=\"line\">PSUAT</span><br><span class=\"line\">lock_name_space              string</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">NAME                     TYPE</span><br><span class=\"line\"><span class=\"comment\">------------------------------------ ---------------------------------</span></span><br><span class=\"line\"><span class=\"keyword\">VALUE</span></span><br><span class=\"line\"><span class=\"comment\">------------------------------</span></span><br><span class=\"line\">log_file_name_convert            string</span><br><span class=\"line\"></span><br><span class=\"line\">pdb_file_name_convert            string</span><br><span class=\"line\"></span><br><span class=\"line\">processor_group_name             string</span><br><span class=\"line\"></span><br><span class=\"line\">service_names                string</span><br><span class=\"line\">PSUAT</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-重启数据库及监听\"><a href=\"#3-重启数据库及监听\" class=\"headerlink\" title=\"3. 重启数据库及监听\"></a>3. 重启数据库及监听</h2><p>重启数据库</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SQL</span><span class=\"operator\">&gt;</span> shutdown immediate</span><br><span class=\"line\">Database closed.</span><br><span class=\"line\">Database dismounted.</span><br><span class=\"line\">ORACLE instance shut down.</span><br><span class=\"line\"><span class=\"keyword\">SQL</span><span class=\"operator\">&gt;</span> startup</span><br><span class=\"line\">ORACLE instance started.</span><br><span class=\"line\"></span><br><span class=\"line\">Total <span class=\"keyword\">System</span> <span class=\"keyword\">Global</span> Area <span class=\"number\">8053063680</span> bytes</span><br><span class=\"line\">Fixed Size          <span class=\"number\">8639712</span> bytes</span><br><span class=\"line\">Variable Size        <span class=\"number\">1593838368</span> bytes</span><br><span class=\"line\">Database Buffers     <span class=\"number\">6442450944</span> bytes</span><br><span class=\"line\">Redo Buffers            <span class=\"number\">8134656</span> bytes</span><br><span class=\"line\">Database mounted.</span><br><span class=\"line\">Database opened.</span><br><span class=\"line\"><span class=\"keyword\">SQL</span><span class=\"operator\">&gt;</span> exit</span><br><span class=\"line\">Disconnected <span class=\"keyword\">from</span> Oracle Database <span class=\"number\">12</span>c Enterprise Edition <span class=\"keyword\">Release</span> <span class=\"number\">12.2</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"number\">.0</span> <span class=\"operator\">-</span> <span class=\"number\">64</span>bit Production</span><br></pre></td></tr></table></figure>\n\n<p>重启监听</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">lsnrctl start</span><br></pre></td></tr></table></figure>","categories":["skills"],"tags":["运维","Oracle","数据库"]},{"title":"从零到一搭建基于kubernetes的分布式构建平台","url":"/2021/10/21/%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Ekubernetes%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%84%E5%BB%BA%E5%B9%B3%E5%8F%B0/","content":"<h2 id=\"分布式构建系统架构\"><a href=\"#分布式构建系统架构\" class=\"headerlink\" title=\"分布式构建系统架构\"></a>分布式构建系统架构</h2><p>一个是<code>Jenkins</code>，一个流行的持续集成&#x2F;发布的工具，另一个是<code>Kubernetes</code>，一个流行的容器编排引擎。持续构建与发布是我们日常工作中必不可少的一个步骤，目前大多公司都采用 Jenkins 集群来搭建符合需求的 CI&#x2F;CD 流程，然而传统的 Jenkins Slave 一主多从方式会存在一些痛点: 1. 主 Master 发生单点故障时，整个流程都不可用了； 1. 每个 Slave 的配置环境不一样，来完成不同语言的编译打包等操作，但是这些差异化的配置导致管理起来非常不方便，维护起来也是比较费劲； 1. 资源分配不均衡，有的 Slave要运行的job出现排队等待，而有Slave处于空闲状态；最后资源有浪费，每台 Slave 可能是实体机或者VM，当Slave处于空闲状态时，也不会完全释放掉资源。 针对这些痛点，我们引入了<code>kubernetes-plugin插件</code></p>\n<span id=\"more\"></span>\n<h4 id=\"kubernetes-plugin插件使用\"><a href=\"#kubernetes-plugin插件使用\" class=\"headerlink\" title=\"kubernetes-plugin插件使用\"></a>kubernetes-plugin插件使用</h4><p><img src=\"https://www.kubernetes.org.cn/img/2017/10/20171025111340.jpg\" alt=\"image\"></p>\n<ol>\n<li><strong>服务高可用</strong>，当 Jenkins Master 出现故障时，Kubernetes 会自动创建一个新的 Jenkins Master 容器，并且将 Volume 分配给新创建的容器，保证数据不丢失，从而达到集群服务高可用。</li>\n<li><strong>动态伸缩，合理使用资源</strong>，每次运行 Job 时，会自动创建一个 Jenkins Slave，Job 完成后，Slave 自动注销并删除容器，资源自动释放，而且 Kubernetes 会根据每个资源的使用情况，动态分配 Slave 到空闲的节点上创建，降低出现因某节点资源利用率高，还排队等待在该节点的情况。</li>\n<li><strong>扩展性好</strong>，当 Kubernetes 集群的资源严重不足而导致 Job 排队等待时，可以很容易的添加一个 Kubernetes Node 到集群中，从而实现扩展。</li>\n</ol>\n<h2 id=\"搭建Kuberntes集群\"><a href=\"#搭建Kuberntes集群\" class=\"headerlink\" title=\"搭建Kuberntes集群\"></a>搭建Kuberntes集群</h2><p>kubeadm进行搭建</p>\n<h2 id=\"搭建Jenkins集群\"><a href=\"#搭建Jenkins集群\" class=\"headerlink\" title=\"搭建Jenkins集群\"></a>搭建Jenkins集群</h2><p>kubernetes集群搭建好了以后，可以通过kubectl进行远程安装。具体的安装的<code>yaml</code>文件如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">---</span> <span class=\"string\">yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">extensions/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\"> <span class=\"attr\">name:</span> <span class=\"string\">jenkins-dev</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\"> <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\"> <span class=\"attr\">template:</span></span><br><span class=\"line\">  <span class=\"attr\">metadata:</span></span><br><span class=\"line\">   <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">jenkins-dev-test</span></span><br><span class=\"line\">  <span class=\"attr\">spec:</span></span><br><span class=\"line\">   <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">     <span class=\"attr\">fsGroup:</span> <span class=\"number\">1000</span></span><br><span class=\"line\">     <span class=\"attr\">runAsUser:</span> <span class=\"number\">0</span></span><br><span class=\"line\">   <span class=\"attr\">containers:</span></span><br><span class=\"line\">   <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">jenkins</span></span><br><span class=\"line\">     <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">     <span class=\"attr\">image:</span> <span class=\"string\">jenkins/jenkins:lts</span></span><br><span class=\"line\">     <span class=\"attr\">ports:</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">     <span class=\"attr\">volumeMounts:</span>  </span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/var/jenkins_home</span></span><br><span class=\"line\">         <span class=\"attr\">name:</span> <span class=\"string\">jenkins-home</span> </span><br><span class=\"line\">   <span class=\"attr\">volumes:</span> </span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">jenkins-home</span></span><br><span class=\"line\">       <span class=\"attr\">persistentVolumeClaim:</span> </span><br><span class=\"line\">         <span class=\"attr\">claimName:</span> <span class=\"string\">jenkins-claim</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">jenkins-dev</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"comment\"># type: LoadBalancer</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">jenkins-dev-test</span></span><br><span class=\"line\">  <span class=\"comment\"># ensure the client ip is propagated to avoid the invalid crumb issue when using LoadBalancer (k8s &gt;=1.7)</span></span><br><span class=\"line\">  <span class=\"comment\">#externalTrafficPolicy: Local</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">web</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">50000</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">agent</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">50000</span></span><br></pre></td></tr></table></figure>\n\n<p>把jenkins的工作目录<code>/var/jenkins_home</code>挂载到了openebs管理的硬盘上。</p>\n<h2 id=\"构建镜像环境准备\"><a href=\"#构建镜像环境准备\" class=\"headerlink\" title=\"构建镜像环境准备\"></a>构建镜像环境准备</h2><p>Maven的DockerInDocker镜像dockerfile</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">FROM</span> <span class=\"string\">cnych/jenkins:jnlp6</span></span><br><span class=\"line\"><span class=\"string\">MAINTAINER</span> <span class=\"string\">Stanley</span> <span class=\"string\">Huang</span> <span class=\"string\">&lt;xinyu.huang02@liulishuo.com&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">USER</span> <span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"string\">RUN</span> <span class=\"string\">apt-get</span> <span class=\"string\">update</span> <span class=\"string\">&amp;&amp;</span> <span class=\"string\">apt-get</span> <span class=\"string\">install</span> <span class=\"string\">-y</span> <span class=\"string\">libltdl7.*</span></span><br><span class=\"line\"><span class=\"string\">RUN</span> <span class=\"string\">apt-get</span> <span class=\"string\">install</span> <span class=\"string\">maven</span> <span class=\"string\">-y</span></span><br></pre></td></tr></table></figure>\n\n<p>Gradle的DockerInDockerDockerfile</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">FROM</span> <span class=\"string\">cnych/jenkins:jnlp6</span></span><br><span class=\"line\"><span class=\"string\">MAINTAINER</span> <span class=\"string\">Stanley</span> <span class=\"string\">Huang</span> <span class=\"string\">&lt;xinyu.huang02@liulishuo.com&gt;</span></span><br><span class=\"line\"><span class=\"string\">ARG</span> <span class=\"string\">GRADLE_VERSION=5.6.1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">USER</span> <span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"string\">RUN</span> <span class=\"string\">apt-get</span> <span class=\"string\">update</span> <span class=\"string\">&amp;&amp;</span> <span class=\"string\">apt-get</span> <span class=\"string\">install</span> <span class=\"string\">-y</span> <span class=\"string\">libltdl7.*</span></span><br><span class=\"line\"><span class=\"string\">RUN</span> <span class=\"string\">apt-get</span> <span class=\"string\">install</span> <span class=\"string\">maven</span> <span class=\"string\">-y</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">WORKDIR</span> <span class=\"string\">/usr/bin</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">RUN</span> <span class=\"string\">\\</span></span><br><span class=\"line\">  <span class=\"string\">curl</span> <span class=\"string\">-sLO</span> <span class=\"string\">https://services.gradle.org/distributions/gradle-$&#123;GRADLE_VERSION&#125;-all.zip</span> <span class=\"string\">&amp;&amp;</span> <span class=\"string\">\\</span></span><br><span class=\"line\">  <span class=\"string\">unzip</span> <span class=\"string\">gradle-$&#123;GRADLE_VERSION&#125;-all.zip</span> <span class=\"string\">&amp;&amp;</span> <span class=\"string\">\\</span></span><br><span class=\"line\">  <span class=\"string\">ln</span> <span class=\"string\">-s</span> <span class=\"string\">gradle-$&#123;GRADLE_VERSION&#125;</span> <span class=\"string\">gradle</span> <span class=\"string\">&amp;&amp;</span> <span class=\"string\">\\</span></span><br><span class=\"line\">  <span class=\"string\">rm</span> <span class=\"string\">gradle-$&#123;GRADLE_VERSION&#125;-all.zip</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">ENV</span> <span class=\"string\">GRADLE_HOME</span> <span class=\"string\">/usr/bin/gradle</span></span><br><span class=\"line\"><span class=\"string\">ENV</span> <span class=\"string\">PATH</span> <span class=\"string\">$PATH:$GRADLE_HOME/bin</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置Ingress和域名\"><a href=\"#配置Ingress和域名\" class=\"headerlink\" title=\"配置Ingress和域名\"></a>配置Ingress和域名</h2><p>Ingress是授权入站连接到达集群服务的规则集合。</p>\n<ol>\n<li>从外部流量调度到nodeprot上的service</li>\n<li>从service调度到ingress-controller</li>\n<li>ingress-controller根据ingress中的定义（虚拟主机或者后端的url）</li>\n<li>根据虚拟主机名调度到后端的一组pod中</li>\n</ol>\n<p><img src=\"https://img2018.cnblogs.com/blog/1349539/201809/1349539-20180930094200688-1480474925.png\" alt=\"image\"> 安装<code>ingress-nginx</code>, 官方文档如下，可以直接在k8s集群安装：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Namespace</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app.kubernetes.io/name:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\">    <span class=\"attr\">app.kubernetes.io/part-of:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-configuration</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app.kubernetes.io/name:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\">    <span class=\"attr\">app.kubernetes.io/part-of:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">tcp-services</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app.kubernetes.io/name:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\">    <span class=\"attr\">app.kubernetes.io/part-of:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">udp-services</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app.kubernetes.io/name:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\">    <span class=\"attr\">app.kubernetes.io/part-of:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-ingress-serviceaccount</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app.kubernetes.io/name:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\">    <span class=\"attr\">app.kubernetes.io/part-of:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-ingress-clusterrole</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app.kubernetes.io/name:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\">    <span class=\"attr\">app.kubernetes.io/part-of:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">configmaps</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">endpoints</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">nodes</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">pods</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">secrets</span></span><br><span class=\"line\">    <span class=\"attr\">verbs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">list</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">watch</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">nodes</span></span><br><span class=\"line\">    <span class=\"attr\">verbs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">get</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">services</span></span><br><span class=\"line\">    <span class=\"attr\">verbs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">get</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">list</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">watch</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">events</span></span><br><span class=\"line\">    <span class=\"attr\">verbs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">create</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">patch</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;extensions&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;networking.k8s.io&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ingresses</span></span><br><span class=\"line\">    <span class=\"attr\">verbs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">get</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">list</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">watch</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;extensions&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;networking.k8s.io&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ingresses/status</span></span><br><span class=\"line\">    <span class=\"attr\">verbs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">update</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Role</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-ingress-role</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app.kubernetes.io/name:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\">    <span class=\"attr\">app.kubernetes.io/part-of:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">configmaps</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">pods</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">secrets</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">namespaces</span></span><br><span class=\"line\">    <span class=\"attr\">verbs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">get</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">configmaps</span></span><br><span class=\"line\">    <span class=\"attr\">resourceNames:</span></span><br><span class=\"line\">      <span class=\"comment\"># Defaults to &quot;&lt;election-id&gt;-&lt;ingress-class&gt;&quot;</span></span><br><span class=\"line\">      <span class=\"comment\"># Here: &quot;&lt;ingress-controller-leader&gt;-&lt;nginx&gt;&quot;</span></span><br><span class=\"line\">      <span class=\"comment\"># This has to be adapted if you change either parameter</span></span><br><span class=\"line\">      <span class=\"comment\"># when launching the nginx-ingress-controller.</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;ingress-controller-leader-nginx&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">verbs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">get</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">update</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">configmaps</span></span><br><span class=\"line\">    <span class=\"attr\">verbs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">create</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">endpoints</span></span><br><span class=\"line\">    <span class=\"attr\">verbs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">get</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">RoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-ingress-role-nisa-binding</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app.kubernetes.io/name:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\">    <span class=\"attr\">app.kubernetes.io/part-of:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">Role</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-ingress-role</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">nginx-ingress-serviceaccount</span></span><br><span class=\"line\">    <span class=\"attr\">namespace:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-ingress-clusterrole-nisa-binding</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app.kubernetes.io/name:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\">    <span class=\"attr\">app.kubernetes.io/part-of:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-ingress-clusterrole</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">nginx-ingress-serviceaccount</span></span><br><span class=\"line\">    <span class=\"attr\">namespace:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-ingress-controller</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app.kubernetes.io/name:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\">    <span class=\"attr\">app.kubernetes.io/part-of:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app.kubernetes.io/name:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\">      <span class=\"attr\">app.kubernetes.io/part-of:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app.kubernetes.io/name:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\">        <span class=\"attr\">app.kubernetes.io/part-of:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\">      <span class=\"attr\">annotations:</span></span><br><span class=\"line\">        <span class=\"attr\">prometheus.io/port:</span> <span class=\"string\">&quot;10254&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">prometheus.io/scrape:</span> <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">serviceAccountName:</span> <span class=\"string\">nginx-ingress-serviceaccount</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx-ingress-controller</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.25.0</span></span><br><span class=\"line\">          <span class=\"attr\">args:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">/nginx-ingress-controller</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">--configmap=$(POD_NAMESPACE)/nginx-configuration</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">--tcp-services-configmap=$(POD_NAMESPACE)/tcp-services</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">--udp-services-configmap=$(POD_NAMESPACE)/udp-services</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">--publish-service=$(POD_NAMESPACE)/ingress-nginx</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">--annotations-prefix=nginx.ingress.kubernetes.io</span></span><br><span class=\"line\">          <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">            <span class=\"attr\">allowPrivilegeEscalation:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">            <span class=\"attr\">capabilities:</span></span><br><span class=\"line\">              <span class=\"attr\">drop:</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">ALL</span></span><br><span class=\"line\">              <span class=\"attr\">add:</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">NET_BIND_SERVICE</span></span><br><span class=\"line\">            <span class=\"comment\"># www-data -&gt; 33</span></span><br><span class=\"line\">            <span class=\"attr\">runAsUser:</span> <span class=\"number\">33</span></span><br><span class=\"line\">          <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">POD_NAME</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">fieldPath:</span> <span class=\"string\">metadata.name</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">POD_NAMESPACE</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">fieldPath:</span> <span class=\"string\">metadata.namespace</span></span><br><span class=\"line\">          <span class=\"attr\">ports:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">http</span></span><br><span class=\"line\">              <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">https</span></span><br><span class=\"line\">              <span class=\"attr\">containerPort:</span> <span class=\"number\">443</span></span><br><span class=\"line\">          <span class=\"attr\">livenessProbe:</span></span><br><span class=\"line\">            <span class=\"attr\">failureThreshold:</span> <span class=\"number\">3</span></span><br><span class=\"line\">            <span class=\"attr\">httpGet:</span></span><br><span class=\"line\">              <span class=\"attr\">path:</span> <span class=\"string\">/healthz</span></span><br><span class=\"line\">              <span class=\"attr\">port:</span> <span class=\"number\">10254</span></span><br><span class=\"line\">              <span class=\"attr\">scheme:</span> <span class=\"string\">HTTP</span></span><br><span class=\"line\">            <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">            <span class=\"attr\">periodSeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">            <span class=\"attr\">successThreshold:</span> <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">          <span class=\"attr\">readinessProbe:</span></span><br><span class=\"line\">            <span class=\"attr\">failureThreshold:</span> <span class=\"number\">3</span></span><br><span class=\"line\">            <span class=\"attr\">httpGet:</span></span><br><span class=\"line\">              <span class=\"attr\">path:</span> <span class=\"string\">/healthz</span></span><br><span class=\"line\">              <span class=\"attr\">port:</span> <span class=\"number\">10254</span></span><br><span class=\"line\">              <span class=\"attr\">scheme:</span> <span class=\"string\">HTTP</span></span><br><span class=\"line\">            <span class=\"attr\">periodSeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">            <span class=\"attr\">successThreshold:</span> <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br></pre></td></tr></table></figure>\n\n<p>在安装一个service，通过nodeport方式对外暴露端口，之后都通过该端口和容器内的服务进行通讯：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Service</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: ingress-nginx</span><br><span class=\"line\">  namespace: ingress-nginx</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app.kubernetes.io/name: ingress-nginx</span><br><span class=\"line\">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  type: NodePort</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">    - name: http</span><br><span class=\"line\">      port: 80</span><br><span class=\"line\">      targetPort: 80</span><br><span class=\"line\">      nodePort: 80</span><br><span class=\"line\">      protocol: TCP</span><br><span class=\"line\">    - name: https</span><br><span class=\"line\">      port: 443</span><br><span class=\"line\">      targetPort: 443</span><br><span class=\"line\">      protocol: TCP</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    app.kubernetes.io/name: ingress-nginx</span><br><span class=\"line\">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里暴露80端口</p>\n</blockquote>\n<p>创建一个ingress, 绑定后端服务，并且设置域名。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">extensions/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Ingress</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">ingress-myapp</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">rules:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">host:</span> <span class=\"string\">dev-jenkins-k8s.liulishuo.work</span></span><br><span class=\"line\">    <span class=\"attr\">http:</span></span><br><span class=\"line\">      <span class=\"attr\">paths:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">path:</span></span><br><span class=\"line\">        <span class=\"attr\">backend:</span></span><br><span class=\"line\">          <span class=\"attr\">serviceName:</span> <span class=\"string\">myapp</span></span><br><span class=\"line\">          <span class=\"attr\">servicePort:</span> <span class=\"number\">80</span></span><br></pre></td></tr></table></figure>\n\n<p>如上所示，这里以<code>dev-jenkins-k8s.liulishuo.work</code>为例，在ingress成功创建以后，找到sa配置下域名即可完成。</p>\n<h2 id=\"OpenEBS存储服务\"><a href=\"#OpenEBS存储服务\" class=\"headerlink\" title=\"OpenEBS存储服务\"></a>OpenEBS存储服务</h2><p>通过如下指令进行安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl apply -f https://openebs.github.io/charts/openebs-operator-1.1.0.yaml</span><br></pre></td></tr></table></figure>\n\n<p>基于LocalPV的hostPath方式，管理员可以创建一个个性化的<code>StorageClass</code>，通过下面的相同配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">storage.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">StorageClass</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">openebs-hostpath</span></span><br><span class=\"line\">  <span class=\"attr\">annotations:</span></span><br><span class=\"line\">    <span class=\"attr\">openebs.io/cas-type:</span> <span class=\"string\">local</span></span><br><span class=\"line\">    <span class=\"attr\">cas.openebs.io/config:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">BasePath</span></span><br><span class=\"line\">        <span class=\"attr\">value:</span> <span class=\"string\">&quot;/var/openebs/local&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">StorageType</span></span><br><span class=\"line\">        <span class=\"attr\">value:</span> <span class=\"string\">&quot;hostpath&quot;</span></span><br><span class=\"line\"><span class=\"attr\">provisioner:</span> <span class=\"string\">openebs.io/local</span></span><br><span class=\"line\"><span class=\"attr\">reclaimPolicy:</span> <span class=\"string\">Delete</span></span><br><span class=\"line\"><span class=\"attr\">volumeBindingMode:</span> <span class=\"string\">WaitForFirstConsumer</span></span><br></pre></td></tr></table></figure>\n\n<p>当需要使用存储的时候, 可以创建一个pvc进行请求存储操作</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">kind: PersistentVolumeClaim</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: jenkins-dev-aws-claim</span><br><span class=\"line\">  namespace: jenkins-dev</span><br><span class=\"line\">  annotations:</span><br><span class=\"line\">    volume.beta.kubernetes.io/storage-class: openebs-hostpath</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  accessModes:</span><br><span class=\"line\">    - ReadWriteOnce</span><br><span class=\"line\">  resources:</span><br><span class=\"line\">    requests:</span><br><span class=\"line\">      storage: 15G</span><br></pre></td></tr></table></figure>\n\n<p>上面通过<code>openebs-hostpath</code>方式，申请了15G的内存进行使用, 并且采用<code>ReadWriteOnce</code>方式进行。pvc使用以后，通过<code>get pvc</code>指令可以查看到以及bound。 并且告诉你一个VOLUME目录，例如下面的<code>pvc-36743f52-9f11-47d9-97f8-dedc22046a9e</code>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">xinyu:~ xinyuhuang$  kubectl --kubeconfig ~/.kube/kubeconfig get pvc -n jenkins-dev</span><br><span class=\"line\">NAME                     STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS       AGE</span><br><span class=\"line\">jenkins-hostpath-claim   Bound    pvc-36743f52-9f11-47d9-97f8-dedc22046a9e   15G        RWO            openebs-hostpath   16h</span><br><span class=\"line\">jenkins-pv-claim         Bound    jenkins-pv-volume                          10Gi       RWO            manual             15d</span><br></pre></td></tr></table></figure>\n\n<p>openebs的hostPath方式默认将volume数据存储在<code>/var/openebs/local</code>下，可以对其进行备份。</p>\n<h2 id=\"数据备份\"><a href=\"#数据备份\" class=\"headerlink\" title=\"数据备份\"></a>数据备份</h2><h2 id=\"搭建过程中遇到的问题\"><a href=\"#搭建过程中遇到的问题\" class=\"headerlink\" title=\"搭建过程中遇到的问题\"></a>搭建过程中遇到的问题</h2><ul>\n<li><strong>jnlp agent 连接不上master</strong></li>\n</ul>\n<p>遇到这个问题，需要注意下面几点，看看是不是设置错了 1. <code>Command to run</code> 不填内容 1. <code>Arguments to pass to the command</code>不填内容 1. <code>Container Template</code>必须设置为<code>jnlp</code> 1. <code>Jenkins tunnel</code>设置为<code>服务名：50000（端口号）</code></p>\n<ul>\n<li><strong>如何让ingress controller对外暴露80端口</strong></li>\n</ul>\n<p>默认情况下，强行开放80端口，会爆出下面的错误</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">The Service &quot;ingress-nginx&quot; is invalid: spec.ports[0].nodePort: Invalid value: 80: provided port is not in the valid range. The range of valid ports is 30000-32767</span><br></pre></td></tr></table></figure>\n\n<p>我们需要修改下<code>kube-apiserver</code>的yaml配置文件。修改<code>/etc/kubernetes/manifests/kube-apiserver.yaml</code>(有些版本也可能是json)文件，修改其中的<code>- --service-node-port-range=80-32767</code> 将range从30000-32767修改为80-32767。如果没有这句话，则按照格式添加一句。</p>\n<ul>\n<li><strong>Gradle Build速度缓慢</strong></li>\n</ul>\n<p>对<code>~/.gradle</code>和<code>/home/jenkins/workspace</code>进行hostpath挂载，相当于添加了缓存。</p>\n<ul>\n<li><strong>Kubernetes-plugin连接测试Jenkins失败</strong></li>\n</ul>\n<p>会爆出下面的错误</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">deployments.apps is forbidden: User “system:serviceaccount:default:default” cannot create deployments.apps in the namespace</span><br></pre></td></tr></table></figure>\n\n<p>可以通过使得有权限访问pod api</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl create clusterrolebinding serviceaccounts-cluster-admin \\</span><br><span class=\"line\">  --clusterrole=cluster-admin \\</span><br><span class=\"line\">  --group=system:serviceaccounts</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>jenkins异常重启导致用户名和密码改变</strong></li>\n</ul>\n<p><a href=\"https://www.jianshu.com/p/5e8b53baeff5\">配置文件修改密码</a></p>\n<h2 id=\"快速恢复和迁移\"><a href=\"#快速恢复和迁移\" class=\"headerlink\" title=\"快速恢复和迁移\"></a>快速恢复和迁移</h2><p>jenkins可能经常会有环境的迁移，由于Jenkins的插件下载由于各种原因下载很缓慢，因此能过快速copy配置环境很重要。我们在Master节点都会通过openebs对<code>/var/jenkins_home</code>配置文件进行挂载。openebs的路径为<code>/var/openebs/local</code>。可以对下面的volume进行拷贝备份，迁移和快速恢复时，再通过将备份的配置文件复制到新的jenkins挂载的volume中，即可快速迁移和恢复。具体步骤如下：</p>\n<ul>\n<li>将备份的jenkins配置文件拷贝到新创建的jenkins挂载目录下。所有文件拷贝过去即可。</li>\n<li>重启Jenkins，重启只要删除相应jenkins的pod即可，deployment会自动创建新的pod。</li>\n</ul>\n","categories":["Essay"],"tags":["k8s"]},{"title":"近期面试记录","url":"/2021/10/27/%E8%BF%91%E6%9C%9F%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95/","content":"<h1 id=\"B-站资深运维开发\"><a href=\"#B-站资深运维开发\" class=\"headerlink\" title=\"B 站资深运维开发\"></a>B 站资深运维开发</h1><p><img src=\"https://www.52ynn.top/wp-content/uploads/2020/05/2cc01a9550b0ff2f145a3f1c80db1029-300x300.png\"></p>\n<h2 id=\"一面-电话面试-2021-10-26-挂\"><a href=\"#一面-电话面试-2021-10-26-挂\" class=\"headerlink\" title=\"一面 电话面试 2021-10-26 挂\"></a>一面 电话面试 2021-10-26 挂</h2><span id=\"more\"></span>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">自我介绍</span><br><span class=\"line\"></span><br><span class=\"line\">1. Python 可变函数和不可变函数</span><br><span class=\"line\">https://www.cnblogs.com/blackmatrix/p/5614086.html</span><br><span class=\"line\">2. Python 判断回文</span><br><span class=\"line\">https://blog.csdn.net/geerniya/article/details/77489355</span><br><span class=\"line\">3. ansible 基于什么协议</span><br><span class=\"line\">ssh</span><br><span class=\"line\">4. 输入一个域名做了哪些事情</span><br><span class=\"line\"></span><br><span class=\"line\"> 输入地址</span><br><span class=\"line\"> 浏览器查找域名的 IP 地址</span><br><span class=\"line\"> 浏览器向 web 服务器发送一个 HTTP 请求</span><br><span class=\"line\"> 服务器的永久重定向响应</span><br><span class=\"line\"> 服务器处理请求</span><br><span class=\"line\"> 服务器返回一个 HTTP 响应</span><br><span class=\"line\"> 浏览器显示 HTML</span><br><span class=\"line\"> 浏览器发送请求获取嵌入在 HTML 中的资源（如图片、音频、视频、CSS、JS等等）</span><br><span class=\"line\"></span><br><span class=\"line\">5. http 是无状态还是有状态</span><br><span class=\"line\">HTTP 是一个属于应用层的面向对象的协议，HTTP 协议一共有五大特点：1、支持客户/服务器模式；2、简单快速；3、灵活；4、无连接；5、无状态。</span><br><span class=\"line\">三次握手，四次挥手</span><br><span class=\"line\">怎么保证安全：https://segmentfault.com/a/1190000022950463</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">6. mysql 主从复制原理</span><br><span class=\"line\">https://www.cnblogs.com/rickiyang/p/13856388.html</span><br><span class=\"line\"></span><br><span class=\"line\">7. linux 服务： nfs  ftp 这些</span><br><span class=\"line\">8. lnmp</span><br><span class=\"line\">9. shell 怎么杀死资源占用率高的服务</span><br><span class=\"line\">https://blog.csdn.net/hpf247/article/details/104915668</span><br><span class=\"line\">10. linux 大日志如何做切割</span><br><span class=\"line\">https://blog.csdn.net/soslinken/article/details/87626655</span><br><span class=\"line\">11. gitlab 问题排查</span><br><span class=\"line\">网络，日志等</span><br><span class=\"line\">12. k8s 核心组件，有没有实际部署过</span><br><span class=\"line\"> etcd 保存了整个集群的状态；</span><br><span class=\"line\"> apiserver 提供了资源操作的唯一入口，并提供认证、授权、访问控制、API 注册和发现等机制；</span><br><span class=\"line\"> controller manager 负责维护集群的状态，比如故障检测、自动扩展、滚动更新等；</span><br><span class=\"line\"> scheduler 负责资源的调度，按照预定的调度策略将 Pod 调度到相应的机器上；</span><br><span class=\"line\"> kubelet 负责维护容器的生命周期，同时也负责 Volume（CVI）和网络（CNI）的管理；</span><br><span class=\"line\"> Container runtime 负责镜像管理以及 Pod 和容器的真正运行（CRI）；</span><br><span class=\"line\"> kube-proxy 负责为 Service 提供 cluster 内部的服务发现和负载均衡</span><br><span class=\"line\">13. 怎么保证服务的稳定性（部分调用失败问题）</span><br><span class=\"line\">https://segmentfault.com/a/1190000039979748</span><br><span class=\"line\">14. cdn 为什么快，可以缓存哪些东西，包括接口吗</span><br><span class=\"line\">https://www.zhihu.com/question/36514327</span><br><span class=\"line\">15. pod ip 漂移怎么办</span><br><span class=\"line\">service作为服务发现，不存在找不到服务的原因</span><br><span class=\"line\">16. Jenkins 扩容，集群</span><br><span class=\"line\">https://www.cnblogs.com/stulzq/p/9297260.html</span><br><span class=\"line\">17. Jenkins 流水线编排</span><br><span class=\"line\">https://www.jenkins.io/zh/doc/tutorials/build-a-multibranch-pipeline-project/</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"声网-高级-SRE-工程师-2021-10-26\"><a href=\"#声网-高级-SRE-工程师-2021-10-26\" class=\"headerlink\" title=\"声网 高级 SRE 工程师 2021-10-26\"></a>声网 高级 SRE 工程师 2021-10-26</h1><p><a href=\"https://i.loli.net/2021/10/27/8PMkeAjWaQJvOdq.jpg\"><img src=\"https://i.loli.net/2021/10/27/8PMkeAjWaQJvOdq.jpg\"></a></p>\n<h2 id=\"笔试\"><a href=\"#笔试\" class=\"headerlink\" title=\"笔试\"></a>笔试</h2><p><a href=\"https://i.loli.net/2021/10/27/iXpkAusL4H8GqbI.jpg\"><img src=\"https://i.loli.net/2021/10/27/iXpkAusL4H8GqbI.jpg\"></a></p>\n<h2 id=\"一面-二面-视频-2021-11-02\"><a href=\"#一面-二面-视频-2021-11-02\" class=\"headerlink\" title=\"一面 二面 视频 2021-11-02\"></a>一面 二面 视频 2021-11-02</h2><p>整整两个小时,实在记不住问了多少了 反正就是问各种项目,基础知识这些玩意 等后续</p>\n<h1 id=\"快手-高级运维开发工程师-2021-10-27-挂\"><a href=\"#快手-高级运维开发工程师-2021-10-27-挂\" class=\"headerlink\" title=\"快手 高级运维开发工程师 2021-10-27 挂\"></a>快手 高级运维开发工程师 2021-10-27 挂</h1><p><a href=\"https://i.loli.net/2021/10/27/nCpThESXuzwrogV.jpg\"><img src=\"https://i.loli.net/2021/10/27/nCpThESXuzwrogV.jpg\"></a></p>\n<h2 id=\"一面-视频面试\"><a href=\"#一面-视频面试\" class=\"headerlink\" title=\"一面 视频面试\"></a>一面 视频面试</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1. 大文件日志用logstash 是多个低配置还是少量高配置</span><br><span class=\"line\">2. CDN 文件丢失怎么办</span><br><span class=\"line\">https://support.huaweicloud.com/cdn_faq/cdn_01_0008.html</span><br><span class=\"line\">3. 如果有个用户卡怎么排查</span><br><span class=\"line\">https://zhuanlan.zhihu.com/p/101620459</span><br><span class=\"line\">4. 联邦集群是什么，什么用途</span><br><span class=\"line\">https://jimmysong.io/kubernetes-handbook/practice/federation.html</span><br><span class=\"line\">5. redis 和 mq 有什么区别</span><br><span class=\"line\">https://www.cnblogs.com/dengguangxue/p/11537466.html</span><br><span class=\"line\">6. k8s 和docker 什么关系</span><br><span class=\"line\">https://zhuanlan.zhihu.com/p/87186261</span><br><span class=\"line\">7. proc 目录里面存储的是什么</span><br><span class=\"line\">https://zhuanlan.zhihu.com/p/26923061</span><br><span class=\"line\">8. logstash 怎么处理非 json 的日志</span><br><span class=\"line\">https://blog.csdn.net/jiao_fuyou/article/details/49174269</span><br><span class=\"line\">9. 内存、cpu、io、磁盘的命令</span><br><span class=\"line\">https://www.cnblogs.com/lzghyh/p/13035675.html</span><br><span class=\"line\">10. 怎么样才能做好运维</span><br><span class=\"line\">11. mysql 从哪些方面去排查 cpu 占用高的原因</span><br><span class=\"line\">https://www.cnblogs.com/zh94/p/12019333.html</span><br><span class=\"line\">12. k8s master 节点有哪些核心组件</span><br><span class=\"line\">13. ingress 的网络模式</span><br><span class=\"line\">https://kubernetes.io/zh/docs/concepts/services-networking/ingress/</span><br><span class=\"line\">14. 容器化迁移是怎么做的</span><br><span class=\"line\">15. 怎么判断一个进程是不是僵尸进程，怎么找到</span><br><span class=\"line\">https://blog.csdn.net/shanzhizi/article/details/47320595</span><br><span class=\"line\">16. 怎么判断内存溢出 </span><br><span class=\"line\">https://blog.csdn.net/xiaofei0859/article/details/77446579</span><br><span class=\"line\">17. mysql 造成死锁的原因</span><br><span class=\"line\">https://www.modb.pro/db/33477</span><br><span class=\"line\">18. 说下自己的两个项目，以及其中遇到的问题</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"翼方健数-运维开发工程师-2021-10-28-挂\"><a href=\"#翼方健数-运维开发工程师-2021-10-28-挂\" class=\"headerlink\" title=\"翼方健数 运维开发工程师 2021-10-28 挂\"></a>翼方健数 运维开发工程师 2021-10-28 挂</h1><ol>\n<li>dockerfile 中 add 和 copy 的区别<ol start=\"2\">\n<li>怎么部署有状态应用</li>\n</ol>\n</li>\n<li>ELK 包括哪些<ol start=\"4\">\n<li>k8s 是怎么进行资源调度的</li>\n<li>Deployment pod container 是什么关系</li>\n<li>service 怎么暴露端口到外部</li>\n<li>项目中遇到的问题以及解决方案</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"心动网络-系统运维工程师-2021-11-10\"><a href=\"#心动网络-系统运维工程师-2021-11-10\" class=\"headerlink\" title=\"心动网络 系统运维工程师 2021-11-10\"></a>心动网络 系统运维工程师 2021-11-10</h1><h1 id=\"平安产险\"><a href=\"#平安产险\" class=\"headerlink\" title=\"平安产险\"></a>平安产险</h1>","categories":["Essay"],"tags":["面试"]},{"title":"2021个人年终总结","url":"/2021/12/13/2021%E4%B8%AA%E4%BA%BA%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/","content":"<h1 id=\"2021个人年终总结\"><a href=\"#2021个人年终总结\" class=\"headerlink\" title=\"2021个人年终总结\"></a>2021个人年终总结</h1><h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>每一年都会习惯性的在年底写一份年终总结来回顾下这一年的事情，今年其实已经快忘记了，今天在看完<code>V2ex</code>上关于“逃离一线城市”主题的几篇帖子的时候想起了这件事。 <code>2021</code>年我也在想这个问题，无论是对于我自己还是对于小孩，我都不是很愿意离开大城市的，于我而言，大城市有更好的发展，于小孩而言，大城市有相对更好的教育医疗资源。 其实 <code>2021</code>年对我来说是及其平淡的一年，没有一些特别的事情发生，上班、下班、周末在上海或者回芜湖，在我前几天看的一篇文章中说的很对：</p>\n<span id=\"more\"></span>\n<blockquote>\n<p>生活本就是平平淡淡，柴米油盐酱醋茶。</p>\n</blockquote>\n<p>我认为家人身体健康，平平安安，生活无忧就没问题了。 回归正题，今年的总结还是一句话总结下每个方面：</p>\n<h2 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h2><p>整体没有太大的改变，基本上是每月回去一次，<code>10</code>月份还了部分房贷，计划明年将房贷还完。</p>\n<h2 id=\"家人\"><a href=\"#家人\" class=\"headerlink\" title=\"家人\"></a>家人</h2><p>去年有说过带我的父母和能能的父母去做一次体检但是一直没有去做，希望年前能有时间带他们去做一次，女儿现在也开始慢慢长大，家人身体健康是我最强大的后盾。</p>\n<h2 id=\"个人\"><a href=\"#个人\" class=\"headerlink\" title=\"个人\"></a>个人</h2><p>对自己个人来说，<code>2021</code>年是最没有太大提升的地方，越发觉得自己有点躺平了，希望<code>2022</code>年能多点奋斗精神。</p>\n<h2 id=\"工作\"><a href=\"#工作\" class=\"headerlink\" title=\"工作\"></a>工作</h2><p>工作没有变化，上半年雄哥邀请我回上家公司，因为待遇问题没回去，下半年因为公司裁员也看了一段时间机会，最后也没有离开现在的公司。</p>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p>说说去年的计划完成情况吧 <a href=\"https://s2.loli.net/2021/12/13/ElZ83zUXWyxucJp.jpg\"><img src=\"https://s2.loli.net/2021/12/13/ElZ83zUXWyxucJp.jpg\"></a> 1. 减肥没成功，但是坚持健身，体质还好 2. 争取春节前完成吧 3. 坚持一段时间，但是下半年放弃了 4. k8s方面略有提升 5. 达成，但还了房贷 6. 基本完成 2022 年就不做详细的计划了，大致如下： 1. 换份工作 2. 接小孩来上海 3. 多挣钱 4. 多读书</p>\n","categories":["life"],"tags":["个人","总结","2021"]},{"title":"Kubernetes 源码：Kubernetes 目录结构","url":"/2022/02/22/kubernetes-%E6%BA%90%E7%A0%81%EF%BC%9Akubernetes-%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/","content":"<h1 id=\"Kubernetes-源码阅读\"><a href=\"#Kubernetes-源码阅读\" class=\"headerlink\" title=\"Kubernetes 源码阅读\"></a>Kubernetes 源码阅读</h1><p>version:v1.24 目录结构： <img src=\"https://www.52ynn.top/wp-content/uploads/2022/02/6214aa9a32e73.png\" alt=\"file\"></p>\n<h1 id=\"目录结构分析\"><a href=\"#目录结构分析\" class=\"headerlink\" title=\"目录结构分析\"></a>目录结构分析</h1><p>根据功能主要分成以下几类：</p>\n<ol>\n<li>文档类：（<code>api 、docs 、logo</code>）</li>\n<li>工具类：（<code>build、cluster、Godeps、hack、staging、translations</code>）</li>\n<li>代码类:（<code>cmd、pkg、plugin、test、third_party</code>）</li>\n</ol>\n<p>工具类主要用到的build目录下的文件，自己动手编译的时候会用到；核心代码集中在cmd和pkg中。 cmd内部包含各个组件的入口，具体核心的实现部分在pkg目录下，分别如图：</p>\n<span id=\"more\"></span>\n<p>plugin目录之前的版本包括scheduler部分的代码，当前版本（应该是在1.10之后）已经将scheduler部分代码移到和其他组件一致的pkg目录，所以目前plugin主要包含的是认证与鉴权部分的代码。</p>\n","categories":["skills"],"tags":["Kubernetes源码"]},{"title":"说实话，想家了","url":"/2022/05/13/%E8%AF%B4%E5%AE%9E%E8%AF%9D%EF%BC%8C%E6%83%B3%E5%AE%B6%E4%BA%86/","content":"<p>在上海 从3月10号被封控在家至今 没有物资的缺乏 也没有对政府的管理太多的抱怨 只是想家了，想家人了！<span id=\"more\"></span></p>\n","categories":["life"],"tags":["疫情"]},{"title":"简单聊聊kafka","url":"/2022/05/14/%E7%AE%80%E5%8D%95%E8%81%8A%E8%81%8Akafka/","content":"<h1 id=\"消息队列的通信模型\"><a href=\"#消息队列的通信模型\" class=\"headerlink\" title=\"消息队列的通信模型\"></a>消息队列的通信模型</h1><h2 id=\"点对点模式（queue）\"><a href=\"#点对点模式（queue）\" class=\"headerlink\" title=\"点对点模式（queue）\"></a>点对点模式（queue）</h2><p>消息生产者生产消息发送到queue中，然后消息消费者从queue中取出并且消费消息。一条消息被消费以后，queue中就没有了，不存在重复消费。</p>\n<span id=\"more\"></span>\n<h2 id=\"发布-x2F-订阅（topic）\"><a href=\"#发布-x2F-订阅（topic）\" class=\"headerlink\" title=\"发布&#x2F;订阅（topic）\"></a>发布&#x2F;订阅（topic）</h2><p>消息生产者（发布）将消息发布到<code>topic</code>中，同时有多个消息消费者（订阅）消费该消息。和点对点方式不同，发布到<code>topic</code>的消息会被所有订阅者消费（类似于关注了微信公众号的人都能收到推送的消息）。</p>\n<h1 id=\"Kafka\"><a href=\"#Kafka\" class=\"headerlink\" title=\"Kafka\"></a>Kafka</h1><p><code>Apache Kafka</code>由<code>LinkedIn</code>开发，最初被设计用来解决<code>LinkedIn</code>公司内部海量日志传输等问题。</p>\n<h2 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h2><p><img src=\"https://www.52ynn.top/wp-content/uploads/2022/05/627f6d0f5c780.png\" alt=\"file\"></p>\n<ul>\n<li>Producer：生产者，消息的产生者，是消息的入口。</li>\n<li>Kafka cluster： kafka 集群，一台或多台服务器组成。<ul>\n<li>Broker： Broker 是指部署了 kafka 实例的服务器节点。每个服务器上有一个或多个 kafka 实例。</li>\n<li>Topic： 消息的主题，可以理解为消息的分类，kafka 的数据就保存在 topic。每个 broker 都可以创建多个 topic。实际应用中通常是一个业务线建一个 topic。</li>\n<li>Partition: Topic 的分区，每个 topic 可以有多个分区，分区的作用是做负载。提高 kafka 吞吐量。同一个 Topic 在不同的分区的数据是不重复的，partition 的表现形式就是一个一个的文件夹。</li>\n<li>Replication： 每一个分区都有多个副本，副本的作用是做备胎。当主分区（Leader）故障的时候会选择一个备胎（Follower）上位，成为 Leader。</li>\n</ul>\n</li>\n<li>Consumer： 消费者，即消息的消费方，是消息的出口。<ul>\n<li>Consumer Group： 我们可以将多个消费组组成一个消费者组，在Kafka 的设计中同一个分区的数据只能被消费者组中的某一个消费者消费。同一个消费者组的消费者可以消费同一个 topic 的不同分区的数据。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"工作流程\"><a href=\"#工作流程\" class=\"headerlink\" title=\"工作流程\"></a>工作流程</h2><p><img src=\"https://www.52ynn.top/wp-content/uploads/2022/05/627f708252162.png\" alt=\"file\"></p>\n<ol>\n<li>生产者从 kafka 集群获取分区 leader 信息</li>\n<li>生产者将消息发送给 leader</li>\n<li>leader 将消息写入本地磁盘</li>\n<li>follower 从 leader 拉取消息数据</li>\n<li>follower 将消息写入本地磁盘后向 leader 发送 ACK</li>\n<li>leader 收到所有的 follower 的 ACK 之后向生产者发送 ACK</li>\n</ol>\n<h2 id=\"选择-partition-的原则\"><a href=\"#选择-partition-的原则\" class=\"headerlink\" title=\"选择 partition 的原则\"></a>选择 partition 的原则</h2><ol>\n<li>写入指定 partition</li>\n<li>没有指定 partition，但是设置了 key，则会根据 key 的值 hash 出一个 partition</li>\n<li>如果没指定 partition，也没设置 key，则轮询</li>\n</ol>\n<h2 id=\"ACK-应答机制\"><a href=\"#ACK-应答机制\" class=\"headerlink\" title=\"ACK 应答机制\"></a>ACK 应答机制</h2><ul>\n<li>0 代表 producer 往集群发送数据不需要等到集群的返回，不确保消息发送成功。</li>\n<li>1 代表producer 往集群发送数据只需要 leader 应答就可以发送下一条，只确保 leader 发送成功。</li>\n<li>all 代表 producer 往集群发送数据需要所有的 follower 都完成从 leader 的同步才会发送下一条，确保 leader 发送成功和所有的副本都完成备份。</li>\n</ul>\n<h2 id=\"Topic-和数据日志\"><a href=\"#Topic-和数据日志\" class=\"headerlink\" title=\"Topic 和数据日志\"></a>Topic 和数据日志</h2><p>topic 是同一类别的消息记录（record）的集合。在 kafka 中，一个主题通常有多个订阅这。对于每个主题，kafka集群维护了一个分区数据日志文件的结构如下： <img src=\"https://www.52ynn.top/wp-content/uploads/2022/05/627f73d5c6f48.png\" alt=\"file\"> 每个 partition 都是一个有序并且不可变的消息记录集合。当心的数据写入时，就被追加到 partition 的末尾。在每个 partition 中，每条消息都会被分配一个顺序的唯一标识，这个标识被称为 offset，即偏移量。 Kafka 可以配置一个保留期限，用来标识日志会在 Kafka 集群内保留多长时间。Kafka 集群会保留在保留期限内所有发布的消息，超过期限会被清空。</p>\n<h2 id=\"消费数据\"><a href=\"#消费数据\" class=\"headerlink\" title=\"消费数据\"></a>消费数据</h2><p>多个消费者实例可以组成一个消费者组，并用一个标签来标识这个消费者组。一个消费者组中的不同消费者实例可以运行在不同的进程甚至不同的服务器上。 <img src=\"https://www.52ynn.top/wp-content/uploads/2022/05/627f750fde275.png\" alt=\"file\"> 消费者可以消费多个 partition 但一个 partition 只能被一个Consumer group 中的一个消费者消费。</p>\n<h1 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h1><p>消息队列 追踪网站活动 Metrics</p>\n","categories":["skills"],"tags":["kafka"]},{"title":"First week at WiredCraft","url":"/2022/05/27/first-week-at-wiredcraft/","content":"<p>This week is the first week that i joined the WiredCraft.</p>\n<span id=\"more\"></span>\n\n<p><strong>There are lots of things new for me :</strong></p>\n<ul>\n<li>Communicate in English in most cases(so i start write blog with english to Improve my English)</li>\n<li>Need to be familiar with DevOps tools(helm&#x2F;pipeline&#x2F;ansible&#x2F;github action).</li>\n<li>Different work flow with last job.</li>\n</ul>\n<p><strong>Something good:</strong></p>\n<ul>\n<li>Colleagues are great(eg technology communicate).</li>\n<li>More automated workflow</li>\n<li>Have weekly meeting to share company update and team update.</li>\n</ul>\n<p><strong>Other:</strong></p>\n<p>My phone brand is Huawei ,it’s not support google service ,slack can’t send me notifications properly,so i need open slack to see message every few minutes .</p>\n<p><strong>All in all</strong>: Integrate into the team as soon as.</p>\n<p><strong>At Last:</strong></p>\n<p>I will come home from quarantine tomorrow.</p>\n<p>Have a great weekend!</p>\n","categories":["Essay"],"tags":["WiredCraft","work"]},{"title":"Enable Github SSO for Sentry(self-hosted)","url":"/2022/06/12/enable-github-sso-for-sentryself-hosted/","content":"<h2 id=\"Getting-Started\"><a href=\"#Getting-Started\" class=\"headerlink\" title=\"Getting Started\"></a>Getting Started</h2><p>Once SSO be activated,</p>\n<p>All existing users will recevie a email to link their account before they are able to continue using Sentry（<strong>This will happen automatically once SSO is successfully configured</strong>）.<span id=\"more\"></span></p>\n<p>Every member who creates a new account via SSO will be given global organization access with a member role.</p>\n<h3 id=\"Steps\"><a href=\"#Steps\" class=\"headerlink\" title=\"Steps\"></a>Steps</h3><p>To enable Github SSO for Sentry , both Github and Sentry need to do some configuration.</p>\n<h4 id=\"Steps-in-Github\"><a href=\"#Steps-in-Github\" class=\"headerlink\" title=\"Steps in Github\"></a>Steps in Github</h4><p>Create a new Github App :</p>\n<ul>\n<li><p>Create Github App: <a href=\"https://docs.github.com/en/developers/apps/building-github-apps/creating-a-github-app\">https://docs.github.com/en/developers/apps/building-github-apps/creating-a-github-app</a></p>\n</li>\n<li><p>Github App requires permissions and information to be filled in:<a href=\"https://develop.sentry.dev/self-hosted/sso/#create-github-app-for-sso--integration\">https://develop.sentry.dev/self-hosted/sso/#create-github-app-for-sso--integration</a></p>\n</li>\n<li><p>Insatll Github App: <a href=\"https://docs.github.com/en/developers/apps/managing-github-apps/installing-github-apps#installing-your-private-github-app-on-your-repository\">https://docs.github.com/en/developers/apps/managing-github-apps/installing-github-apps#installing-your-private-github-app-on-your-repository</a></p>\n</li>\n<li><p>After installation，you need save the following information:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">App ID</span><br><span class=\"line\">GitHub App name</span><br><span class=\"line\">Webhook secret</span><br><span class=\"line\">Client ID</span><br><span class=\"line\">Client Secret</span><br><span class=\"line\">private-key</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"Steps-in-Sentry\"><a href=\"#Steps-in-Sentry\" class=\"headerlink\" title=\"Steps in Sentry\"></a>Steps in Sentry</h4><ul>\n<li>Update configuration with Github App infomation</li>\n</ul>\n<p>in <code>sentry/config.yaml</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">github-app.id:</span> <span class=\"string\">&lt;App</span> <span class=\"string\">ID&gt;</span></span><br><span class=\"line\"><span class=\"attr\">github-app.name:</span> <span class=\"string\">&#x27;&lt;GitHub App name&gt;&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">github-app.webhook-secret:</span> <span class=\"string\">&#x27;&lt;Webhook secret&gt;&#x27;</span> <span class=\"comment\"># Use only if configured in GitHub</span></span><br><span class=\"line\"><span class=\"attr\">github-app.client-id:</span> <span class=\"string\">&#x27;&lt;Client ID&gt;&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">github-app.client-secret:</span> <span class=\"string\">&#x27;&lt;Client secret&gt;&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">github-login.client-secre:</span> <span class=\"string\">&#x27;&lt;Client secret&gt;&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">github-login.client-id:</span> <span class=\"string\">&#x27;&lt;Client secret&gt;&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">github-app.private-key:</span> </span><br><span class=\"line\">  <span class=\"string\">-----BEGIN</span> <span class=\"string\">RSA</span> <span class=\"string\">PRIVATE</span> <span class=\"string\">KEY-----</span></span><br><span class=\"line\">  <span class=\"string\">privatekeyprivatekeyprivatekeyprivatekey</span></span><br><span class=\"line\">  <span class=\"string\">privatekeyprivatekeyprivatekeyprivatekey</span></span><br><span class=\"line\">  <span class=\"string\">privatekeyprivatekeyprivatekeyprivatekey</span></span><br><span class=\"line\">  <span class=\"string\">privatekeyprivatekeyprivatekeyprivatekey</span></span><br><span class=\"line\">  <span class=\"string\">privatekeyprivatekeyprivatekeyprivatekey</span></span><br><span class=\"line\">  <span class=\"string\">-----END</span> <span class=\"string\">RSA</span> <span class=\"string\">PRIVATE</span> <span class=\"string\">KEY-----</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>restart</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker-compose restart</span><br></pre></td></tr></table></figure></li>\n</ul>\n","categories":["skills"],"tags":["记录","sentry"]},{"title":"Setup xpack security for ELK 8.x","url":"/2022/07/15/setup-xpack-security-for-elk-8-x/","content":"<h1 id=\"Setup-xpack-security-for-ELK-8-x\"><a href=\"#Setup-xpack-security-for-ELK-8-x\" class=\"headerlink\" title=\"Setup xpack security for ELK 8.x\"></a>Setup xpack security for ELK 8.x</h1><blockquote>\n<p>I use docker to run ELK,so all of the following operations are based on docker container operations,If you are running elk in other ways, note the path to execute the command.</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"Generate-the-certificate-authority\"><a href=\"#Generate-the-certificate-authority\" class=\"headerlink\" title=\"Generate the certificate authority\"></a>Generate the certificate authority</h2><ol>\n<li>Use the <code>elasticsearch-certutil</code> tool on any single node to generate a CA for your cluster.</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"> # </span><span class=\"language-bash\">Docker</span> </span><br><span class=\"line\"> docker exec -it elasticsearch /bin/bash</span><br><span class=\"line\">./bin/elasticsearch-certutil ca</span><br></pre></td></tr></table></figure>\n\n<p>a.When prompted, accept the default file name, which is <code>elastic-stack-ca.p12</code>. This file contains the public certificate for your CA and the private key used to sign certificates for each node.</p>\n<p>b.Enter a password for your CA. You can choose to leave the password blank if you’re not deploying to a production environment.</p>\n<ol start=\"2\">\n<li>On any single node, generate a certificate and private key for the nodes in your cluster. You include the <code>elastic-stack-ca.p12</code> output file that you generated in the previous step.</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Docker</span> </span><br><span class=\"line\">./bin/elasticsearch-certutil cert --ca elastic-stack-ca.p12</span><br></pre></td></tr></table></figure>\n\n<p>a. Enter the password for your CA, or press <strong>Enter</strong> if you did not configure one in the previous step.</p>\n<p>b. Create a password for the certificate and accept the default file name.The output file is a keystore named <code>elastic-certificates.p12</code>. This file contains a node certificate, node key, and CA certificate.</p>\n<ol start=\"3\">\n<li>On <strong>every</strong> node in your cluster, copy the <code>elastic-certificates.p12</code> file to the <code>$ES_PATH_CONF</code> directory.</li>\n</ol>\n<h2 id=\"Config-elasticsearch-yml\"><a href=\"#Config-elasticsearch-yml\" class=\"headerlink\" title=\"Config elasticsearch.yml\"></a>Config elasticsearch.yml</h2><ol>\n<li>add the follow to <code>elasticsearch.yml</code></li>\n</ol>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">xpack.security.transport.ssl.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">xpack.security.transport.ssl.verification_mode:</span> <span class=\"string\">certificate</span> </span><br><span class=\"line\"><span class=\"attr\">xpack.security.transport.ssl.client_authentication:</span> <span class=\"string\">required</span></span><br><span class=\"line\"><span class=\"attr\">xpack.security.transport.ssl.keystore.path:</span> <span class=\"string\">elastic-certificates.p12</span></span><br><span class=\"line\"><span class=\"attr\">xpack.security.transport.ssl.truststore.path:</span> <span class=\"string\">elastic-certificates.p12</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>If you entered a password when creating the node certificate, run the following commands to store the password in the Elasticsearch keystore:</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">./bin/elasticsearch-keystore add xpack.security.transport.ssl.keystore.secure_password</span><br><span class=\"line\">./bin/elasticsearch-keystore add xpack.security.transport.ssl.truststore.secure_password</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><p>Complete the previous steps for each node in your cluster.</p>\n</li>\n<li><p>On <strong>every</strong> node in your cluster, start Elasticsearch.</p>\n</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker restart elasticsearch</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Generate-password\"><a href=\"#Generate-password\" class=\"headerlink\" title=\"Generate password\"></a>Generate password</h2><p>Generate password and copy it</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Docker </span></span><br><span class=\"line\">./bin/elasticsearch-setup-password auto</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Config-kibana\"><a href=\"#Config-kibana\" class=\"headerlink\" title=\"Config kibana\"></a>Config kibana</h2><p>add the follow to kibana.yml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">elasticsearch.username:</span> [<span class=\"string\">MY_ELASTIC_USERNAME</span>]</span><br><span class=\"line\"><span class=\"attr\">elasticsearch.passowrd:</span> [<span class=\"string\">MY_ELASTIC_PASSWORD</span>]</span><br></pre></td></tr></table></figure>\n","categories":["skills"],"tags":["ELK"]},{"title":"Migration Blog","url":"/2022/08/06/Migration-Blog/","content":"<h1 id=\"Reason\"><a href=\"#Reason\" class=\"headerlink\" title=\"Reason\"></a>Reason</h1><p>Alibaba Cloud ecs is about to expire, the renewal fee is relatively high, and the blog is not used much.</p>\n<span id=\"more\"></span>\n<h1 id=\"Blog\"><a href=\"#Blog\" class=\"headerlink\" title=\"Blog\"></a>Blog</h1><p>Repo: <a href=\"https://github.com/sven0219/sven0219.github.io\">https://github.com/sven0219/sven0219.github.io</a><br>Currently blogs use <code>github pages</code> + <code>Hexo</code> + <code>Next</code></p>\n<h1 id=\"Plan\"><a href=\"#Plan\" class=\"headerlink\" title=\"Plan\"></a>Plan</h1><p>At the end of August 2022, all previous content on Alibaba Cloud ecs will be migrated here, and this blog will be used later.</p>\n","categories":["Blog"],"tags":["Blog"]},{"title":"Mariadb issue optimization","url":"/2022/09/05/Mariadb-issue-optimization/","content":"<h2 id=\"Background-of-the-issue\"><a href=\"#Background-of-the-issue\" class=\"headerlink\" title=\"Background of the issue\"></a>Background of the issue</h2><p>In the project,need a complete migration of data from their Mariadb(10.5.7) to our AWS RDS Mariadb(10.6.7).</p>\n<p>I did the following：</p>\n<ol>\n<li>Use the mysqldump command to export sql file from their database</li>\n<li>Import the sql file into our database</li>\n</ol>\n<span id=\"more\"></span>\n\n<h2 id=\"Issue-Description\"><a href=\"#Issue-Description\" class=\"headerlink\" title=\"Issue Description\"></a>Issue Description</h2><p>The time to run the following sql on our database(14.3s) is significantly longer than on theirs(0.002s).</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT ...</span><br><span class=\"line\">FROM `tbl_key_visual` `t`  </span><br><span class=\"line\">  LEFT OUTER JOIN `tbl_storage` `storage` ON (`t`.`storage_id`=`storage`.`storage_id`) </span><br><span class=\"line\">  LEFT OUTER JOIN `tbl_storage` `relatedStorages` ON (`relatedStorages`.`parent_id`=`storage`.`storage_id`) </span><br><span class=\"line\">  LEFT OUTER JOIN `tbl_image` `image` ON (`t`.`image_id`=`image`.`image_id`) </span><br><span class=\"line\">  LEFT OUTER JOIN `tbl_image` `relatedImages` ON (`relatedImages`.`parent_image_id`=`image`.`image_id`)  </span><br><span class=\"line\">WHERE (kv_status=&#x27;published&#x27;) </span><br><span class=\"line\">ORDER BY kv_order ASC;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>explain  sql  on our new db:</p>\n<p><img src=\"https://raw.githubusercontent.com/sven0219/sven0219.github.io/static_files/blog/images/4cac1200-2532-4948-bcb1-f1229dd0b9fa.png\"></p>\n<p>explain  sql  on their old db:</p>\n<p><img src=\"https://raw.githubusercontent.com/sven0219/sven0219.github.io/static_files/blog/images/c453f8a0-11d0-4317-92a8-5c271ecc8c08.png\"></p>\n<p>When adding force index, you will get a similar query time</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT  ...</span><br><span class=\"line\">FROM `tbl_key_visual` `t`  </span><br><span class=\"line\">  LEFT OUTER JOIN `tbl_storage` `storage` ON (`t`.`storage_id`=`storage`.`storage_id`) </span><br><span class=\"line\">  LEFT OUTER JOIN `tbl_storage` `relatedStorages` force index(index_parent_id) ON (`relatedStorages`.`parent_id`=`storage`.`storage_id`) </span><br><span class=\"line\">  LEFT OUTER JOIN `tbl_image` `image` ON (`t`.`image_id`=`image`.`image_id`) </span><br><span class=\"line\">  LEFT OUTER JOIN `tbl_image` `relatedImages` force index(parent_image_id) ON (`relatedImages`.`parent_image_id`=`image`.`image_id`) </span><br><span class=\"line\">WHERE (kv_status=&#x27;published&#x27;) </span><br><span class=\"line\">ORDER BY kv_order ASC;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Cause-of-this-issue\"><a href=\"#Cause-of-this-issue\" class=\"headerlink\" title=\"Cause of this issue\"></a>Cause of this issue</h2><p>When the result obtained by explain shows Using join buffer  in extra means the join is unable to use an index, and it’s doing the join the hard way.</p>\n<h2 id=\"How-to-slove\"><a href=\"#How-to-slove\" class=\"headerlink\" title=\"How to slove\"></a>How to slove</h2><blockquote>\n<p>When rows are added or deleted to an InnoDB <a href=\"https://mariadb.com/kb/en/full-text-indexes/\">fulltext index</a>, the index is not immediately re-organized, as this can be an expensive operation. Change statistics are stored in a separate location . The fulltext index is only fully re-organized when an OPTIMIZE TABLE statement is run.</p>\n</blockquote>\n<p>Run </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">optimize table tablename</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://mariadb.com/kb/en/optimize-table/\">https://mariadb.com/kb/en/optimize-table/</a> </p>\n","categories":["work"],"tags":["mariadb","issue","devops"]},{"title":"Use PicGo as Picture bed","url":"/2022/09/14/Use-PicGo-as-Picture-bed/","content":"<h1 id=\"Why-need-PicGo\"><a href=\"#Why-need-PicGo\" class=\"headerlink\" title=\"Why need PicGo\"></a>Why need PicGo</h1><p>I have used some Picture bed such as <code>sm.ms</code> before, but some are unstable.</p>\n<p>so I came up with the idea of building one myself. </p>\n<p>After checking some information, I found that <code>PicGo + GithHub</code> can also be implemented. </p>\n<p>This article introduces how to build it.</p>\n<span id=\"more\"></span>\n\n\n\n<h1 id=\"Install-PicGo\"><a href=\"#Install-PicGo\" class=\"headerlink\" title=\"Install PicGo\"></a>Install PicGo</h1><p>Click <a href=\"https://github.com/Molunerfinn/PicGo/releases\">here</a> to down PicGo.</p>\n<p>Ref: <a href=\"https://picgo.github.io/PicGo-Doc/en/guide/#instruction\">https://picgo.github.io/PicGo-Doc/en/guide/#instruction</a></p>\n<h1 id=\"Configuration\"><a href=\"#Configuration\" class=\"headerlink\" title=\"Configuration\"></a>Configuration</h1><h2 id=\"Create-and-log-in-your-GitHub-account\"><a href=\"#Create-and-log-in-your-GitHub-account\" class=\"headerlink\" title=\"Create and log in your GitHub account\"></a>Create and log in your GitHub account</h2><p><a href=\"https://github.com/\">Github</a></p>\n<h2 id=\"Create-a-repo-for-GitHub-Img\"><a href=\"#Create-a-repo-for-GitHub-Img\" class=\"headerlink\" title=\"Create a repo for GitHub Img\"></a>Create a repo for GitHub Img</h2><p>Since I built the picture bed mainly for the blog you are currently visiting, so I created a new branch on <a href=\"https://github.com/sven0219/sven0219.github.io/tree/static_files\">sven0219.github.io</a></p>\n<p>You can also create a new repository.</p>\n<p><img src=\"https://raw.githubusercontent.com/sven0219/sven0219.github.io/static_files/blog/images/20220914193528.png\"></p>\n<h2 id=\"Generate-a-token-for-PicGo\"><a href=\"#Generate-a-token-for-PicGo\" class=\"headerlink\" title=\"Generate a token for PicGo\"></a>Generate a token for PicGo</h2><p>open <a href=\"https://github.com/settings/tokens\">Github setting</a></p>\n<p>Generate new token for picture bed:</p>\n<p><img src=\"https://raw.githubusercontent.com/sven0219/sven0219.github.io/static_files/blog/images/20220914193833.png\"></p>\n<p><img src=\"https://raw.githubusercontent.com/sven0219/sven0219.github.io/static_files/blog/images/20220914193947.png\"></p>\n<h2 id=\"Configure-your-GitHub-repository-for-PicGo\"><a href=\"#Configure-your-GitHub-repository-for-PicGo\" class=\"headerlink\" title=\"Configure your GitHub repository for PicGo.\"></a>Configure your GitHub repository for PicGo.</h2><p><img src=\"https://raw.githubusercontent.com/sven0219/sven0219.github.io/static_files/blog/images/20220914194100.png\"></p>\n<p>After uploading, you can find that some new images are added to your repository:</p>\n<p><img src=\"https://raw.githubusercontent.com/sven0219/sven0219.github.io/static_files/blog/images/20220914194144.png\"></p>\n<p>Ref : <a href=\"https://picgo.github.io/PicGo-Doc/en/guide/config.html#github-img\">https://picgo.github.io/PicGo-Doc/en/guide/config.html#github-img</a></p>\n","categories":["skills"],"tags":["PicGo"]},{"title":"说说最近工作和生活的一些事","url":"/2022/09/14/%E8%AF%B4%E8%AF%B4%E6%9C%80%E8%BF%91%E5%B7%A5%E4%BD%9C%E5%92%8C%E7%94%9F%E6%B4%BB%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BA%8B/","content":"<h1 id=\"前面\"><a href=\"#前面\" class=\"headerlink\" title=\"前面\"></a>前面</h1><p>记得之前有写过以后写东西要全用英文，现在发现自己坚持不了，很多时候还是google翻译，以后还是关于技术性的文章用英文吧。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"最近生活\"><a href=\"#最近生活\" class=\"headerlink\" title=\"最近生活\"></a>最近生活</h1><p>上周趁着中秋假期回家将房贷还掉了，虽然不多但是总算没有大额欠款了，算是了了一件比较大的事情。</p>\n<p>明年小孩就要上幼儿园了，老婆想让孩子在身边上学，我本身小时候也是留守儿童能体会那种留守的感受，另外小孩在家长身边成长会更好，所以准备年底在上海换个住处，然后计划着小孩明年 9 月上学的日程。</p>\n<p>另外关于未来定居的城市，和老婆商量的结果是以后定居南京，所以最近几年还是得努力努力。</p>\n<p>很多时候这些大的决定都是老婆推动着我去做出来的，但是我本身的性格就是随遇而安，而且很多时候比较以自我为中心，导致考虑不到家人的想法。</p>\n<p>关于生活方面的事情，我的处理方式一直是顺其自然，但是有时候确实不能这样，我老婆关于生活的规划的想法还是比较靠谱的，以后还是多听听她的意见。</p>\n<h1 id=\"最近工作\"><a href=\"#最近工作\" class=\"headerlink\" title=\"最近工作\"></a>最近工作</h1><p>入职 wiredcraft 也将近四个月了，也开始慢慢的熟悉公司的工作流程了，kaleo 对我比较有耐心也很照顾我，虽然不说，但是从最近安排给我的工作来看还是在按照我之前入职所说的职业方向给我安排对应的工作。</p>\n<p>这里主要说说自己的问题，也许是前一份工作懒散惯了，导致现在在接触一个新的东西的时候，内心本能的有点抗拒导致主动性不强，不愿意接触新的事物。但是回头看近四个月的工作，每天都在接触新的东西，最后也是完成了。</p>\n<p>所以还是得敢于面对新的东西，不管怎么说，还年轻是吧？</p>\n<h1 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h1><p>最近喜欢看 B 站上的一个 Up 主的视频，主要是记录反应农村生活，分享一下：<a href=\"https://space.bilibili.com/14342271\">遇真纪事</a></p>\n<p><img src=\"https://raw.githubusercontent.com/sven0219/sven0219.github.io/static_files/blog/images/202209141911689.png\"></p>\n","categories":["life"],"tags":["生活","总结"]},{"title":"How to send aws cloud watch alarms to slack","url":"/2022/09/19/How-to-send-aws-cloud-watch-alarms-to-slack/","content":"<h1 id=\"Original-link\"><a href=\"#Original-link\" class=\"headerlink\" title=\"Original link\"></a>Original link</h1><p>blog: <a href=\"https://medium.com/pixelpoint/how-to-send-aws-cloudwatch-alarms-to-slack-502bcf106047\">https://medium.com/pixelpoint/how-to-send-aws-cloudwatch-alarms-to-slack-502bcf106047</a><br>Repo: <a href=\"https://github.com/assertible/lambda-cloudwatch-slack\">https://github.com/assertible/lambda-cloudwatch-slack</a></p>\n<p>Backup_repo: <a href=\"https://github.com/sven0219/lambda-cloudwatch-slack\">https://github.com/sven0219/lambda-cloudwatch-slack</a></p>\n<span id=\"more\"></span>\n\n<p>Alarm and monitoring systems are a key part of mature products and applications. If you worry about your customers, it’s better to be notified when something goes wrong then be in the dark. If you host your infrastructure on AWS, the only one way to get the full metrics of your used services is to use CloudWatch. AWS CloudWatch doesn’t only give you access to metrics, however, it also creates alarms for specific cases. But, if you worked with AWS before you no doubt noticed that the interface and certain functions are a far cry from “user friendly,” which means that sending a notification with alarms to Slack not a trivial task.</p>\n<p>This article reveals the secrets you should know to set up the alarms you need in five minutes. For those of you who would like to see all in action, please watch our <a href=\"https://youtu.be/pLO1sxeViAQ\">video tutorial</a>.</p>\n<p>There are a few steps we will need to go through to make this happen:</p>\n<ul>\n<li>Create an AWS Access Key and Secret</li>\n<li>Create a Role</li>\n<li>Deploy the Lambda function</li>\n<li>Create an SNS topic and subscription</li>\n<li>Create a Cloudwatch Alarm</li>\n</ul>\n<h1 id=\"1-Create-AWS-Access-Key-and-Secret\"><a href=\"#1-Create-AWS-Access-Key-and-Secret\" class=\"headerlink\" title=\"1. Create AWS Access Key and Secret\"></a>1. Create AWS Access Key and Secret</h1><p>If you already have your AWS Access Key and Secret, you can skip this step. Otherwise, follow this <a href=\"https://console.aws.amazon.com/iam/home#/users\">link</a>. Choose your user, then go to the Security Credentials tab and click Create Access Key.</p>\n<p><img src=\"https://miro.medium.com/max/700/0*zWqauOvcWXzQO0oF.png\" alt=\"img\"></p>\n<p>Copy the AWS Access Key and Secret; we will use them during configuring deployment of Lambda Function.</p>\n<h1 id=\"Create-a-Role\"><a href=\"#Create-a-Role\" class=\"headerlink\" title=\"Create a Role\"></a>Create a Role</h1><p>The Role will be used by your Lambda function and requires permission to do certain things.<br>Follow this <a href=\"https://console.aws.amazon.com/iam/home?region=eu-west-1#/roles\">link</a> then click Create Role.</p>\n<p><img src=\"https://miro.medium.com/max/1400/0*5oPa4D8cMS3WuYKQ.png\" alt=\"img\"></p>\n<p>Chose Lambda from the list.</p>\n<p><img src=\"https://miro.medium.com/max/1400/0*2UxybTKshbBug1fu.png\" alt=\"img\"></p>\n<p>Find AWSLambdaBasicExecutionRole and select it.</p>\n<p><img src=\"https://miro.medium.com/max/1400/0*sKq_nSSpfAUPjIuv.png\" alt=\"img\"></p>\n<p>Finally, type a role name, such as “cloudwatch-to-slack-role,” click on the newly created role in the list and copy the ARN name. We will use it in step 3 during deployment of the Lambda function.</p>\n<p><img src=\"https://miro.medium.com/max/1400/0*32hWWUT-90PFy-ke.png\" alt=\"img\"></p>\n<p><img src=\"https://miro.medium.com/max/1400/0*6CMNNWbFpgLhNbov.png\" alt=\"img\"></p>\n<h1 id=\"3-Deploy-the-Lambda-function\"><a href=\"#3-Deploy-the-Lambda-function\" class=\"headerlink\" title=\"3. Deploy the Lambda function\"></a>3. Deploy the Lambda function</h1><p>To deploy the AWS Lambda function, you need to clone the <a href=\"https://github.com/assertible/lambda-cloudwatch-slack\">repository</a> and have Node.js installed on your local machine. Especially for that guide, we contributed significantly in the repository to get a better configuration process.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git clone git@github.com:assertible/lambda-cloudwatch-slack.git</span><br><span class=\"line\">cd lambda-cloudwatch-slack</span><br><span class=\"line\">cp .env.example .env</span><br></pre></td></tr></table></figure>\n\n<p>Open your .env file and fill in the environment variables.</p>\n<p><strong>UNENCRYPTED_HOOK_URL</strong><br>That variable you should fill with the Slack Incoming Webhook; create a new one for CloudWatch on <a href=\"https://slack.com/apps/A0F7XDUAZ-incoming-webhooks\">that page</a> for your organization</p>\n<p><img src=\"https://miro.medium.com/max/1400/0*iEyYWmMd4mePXgkF.png\" alt=\"img\"></p>\n<p>Follow the practice of using one hook for one specific service. Once you create a webhook, choose a channel, then post notifications, create a username(the title for messages) and, of course, add a nice picture. Download the Cloudwatch logo from the link <a href=\"https://user-images.githubusercontent.com/2697570/46758481-30917080-cccd-11e8-966b-9a2813ff1e8a.png\">here</a></p>\n<p><img src=\"https://miro.medium.com/max/1400/0*QRuDvzQhZyejZd28.png\" alt=\"img\"></p>\n<p><strong>AWS_FUNCTION_NAME</strong><br>The name of your function which will be declared in your AWS Lambda function page. Let’s call it “cloudwatch-to-slack.”</p>\n<p><strong>AWS_REGION&#x3D;eu-west-1</strong><br>Chose the region of the Lambda function.</p>\n<p><strong>AWS_ROLE&#x3D;”arn:aws:iam::123456789123:role&#x2F;lambda_exec_role”</strong><br>Copy the arn id from the second step here.</p>\n<p><strong>AWS_ACCESS_KEY_ID</strong><br><strong>AWS_SECRET_ACCESS_KEY</strong><br>Fill in the AWS Access Key and Secret with your keys from the first step.</p>\n<p>Now we’re ready to deploy; simply execute the following command in your terminal from the folder with the repository we cloned:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install</span><br><span class=\"line\">npm run deploy</span><br></pre></td></tr></table></figure>\n\n<p>If everything went well, you will be able to find your fresh installed function on the Lambda page in AWS.</p>\n<p><img src=\"https://miro.medium.com/max/1400/0*V96DK2--tsAA-Ehb.png\" alt=\"img\"></p>\n<h1 id=\"4-Create-an-SNS-topic-and-subscription\"><a href=\"#4-Create-an-SNS-topic-and-subscription\" class=\"headerlink\" title=\"4. Create an SNS topic and subscription\"></a>4. Create an SNS topic and subscription</h1><p>Browse in AWS to the Simple Notification Service. Ironically, this service is anything but simple, especially the terminology they use and steps you have to go through.</p>\n<p>Go to Topics and click Create New Topic. I chose the name “cloudwatch-alarms” for the notification that will be sent.</p>\n<p><img src=\"https://miro.medium.com/max/1400/0*51Wd3IQRolGYZzCj.png\" alt=\"img\"></p>\n<p><img src=\"https://miro.medium.com/max/1400/0*iP0s4kMwqJ6jZSB0.png\" alt=\"img\"></p>\n<p>Open the created topic and create a subscription.</p>\n<p><img src=\"https://miro.medium.com/max/1400/0*H3yB9E_joMvOoxT_.png\" alt=\"img\"></p>\n<p>Select AWS Lambda as your Protocol and pick the endpoint with the name of your function.</p>\n<p><img src=\"https://miro.medium.com/max/1400/0*XTJCIkTZNR2W9qxn.png\" alt=\"img\"></p>\n<p>That’s it; now we are ready to create an alarm.</p>\n<h1 id=\"5-Create-Cloudwatch-Alarm\"><a href=\"#5-Create-Cloudwatch-Alarm\" class=\"headerlink\" title=\"5. Create Cloudwatch Alarm\"></a>5. Create Cloudwatch Alarm</h1><p>Navigate through Cloudwatch to your AWS account and click Create Alarm.</p>\n<p><img src=\"https://miro.medium.com/max/1400/0*m4NOR_xaWUjGh88S.png\" alt=\"img\"></p>\n<p>Chose the metric you would like to monitor, define the alarm configuration and select your SNS topic name in the Send Notification To section.</p>\n<p><img src=\"https://miro.medium.com/max/1400/0*_zs3-XgGp-iZBev3.png\" alt=\"img\"></p>\n<p>I recommend that you specifically define conditions that will immediately throw alarms for the purposes of testing your function. If everything is configured properly, you will see the message in your Slack channel.</p>\n<p><img src=\"https://miro.medium.com/max/1400/0*KcnuUilMbFCT5Ct1.png\" alt=\"img\"></p>\n<p>I hope this guide helps you save time and set up alarms for your current or future projects.</p>\n<p><strong>Additional notes</strong>:<br>By default, AWS Lambda has blueprints that allow you to do different things with a simple configuration and, in those blueprints, you may even find a CloudWatch-to-Slack function. Unfortunately, this send a very poor, unstructured data to the channel.</p>\n","categories":["skills"],"tags":["aws","cloudwatch","alarm","backup"]},{"title":"How to Send Log Files to AWS cloudwatch","url":"/2022/09/21/How-to-Send-Log-Files-to-AWS-cloudwatch/","content":"<h1 id=\"Original-link\"><a href=\"#Original-link\" class=\"headerlink\" title=\"Original link\"></a>Original link</h1><p>blog: <a href=\"https://www.rapidspike.com/blog/how-to-send-log-files-to-aws-cloudwatch-ubuntu/\">https://www.rapidspike.com/blog/how-to-send-log-files-to-aws-cloudwatch-ubuntu/</a></p>\n<span id=\"more\"></span>\n\n<p><a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/WhatIsCloudWatchLogs.html\">AWS CloudWatch</a> allows you to collect logs from your AWS EC2 instances. Files such as the Apache2 access and error logs that are commonly found on web servers. Or any log file. This is especially useful if you have a scaling group of instances behind a load balancer. Rather than connecting to each instance and manually searching the logs with <a href=\"https://www.computerhope.com/unix/ugrep.htm\">grep</a>, CloudWatch centralises the logs into one log stream, allowing you to search all your log files from one place.</p>\n<p>For example, we have a few EC2 instances behind a Load Balancer to run our main platform API. They all run Apache2 so we send the contents of the Apache2 error log to CloudWatch. Even with just a few servers it’s much easier than logging into each one individually and searching each file with grep commands. Our <a href=\"https://www.rapidspike.com/performance-synthetic-user-journey-monitoring/\">User Journey</a> infrastructure has over 50 servers and would be practically impossible to manage through the command line alone. If an issue occurs we’re able to see all the logs in the AWS Console without wasting time logging onto everything.</p>\n<p>To get CloudWatch set-up on Ubuntu, you need to complete the following:</p>\n<ul>\n<li>Create a new IAM role (one time only)</li>\n<li>Attach the IAM role to an EC2 instance</li>\n<li>Install and configure the CloudWatch agent</li>\n</ul>\n<h2 id=\"Create-a-New-IAM-Role\"><a href=\"#Create-a-New-IAM-Role\" class=\"headerlink\" title=\"Create a New IAM Role\"></a>Create a New IAM Role</h2><p>To allow an EC2 instance to communicate with CloudWatch, you first need to create an IAM Role. You only need to do this once, so you can skip this step after it’s been created.</p>\n<ol>\n<li><p>Open the <a href=\"https://console.aws.amazon.com/iam/\">IAM console</a>. From the menu, select <strong>Roles</strong> and then click the <strong>Create role</strong> button.</p>\n</li>\n<li><p>Under</p>\n<p>Choose the service that will use this role</p>\n<p>, select</p>\n<p>EC2</p>\n<p>and click the</p>\n<p>Next: Permissions</p>\n<p>button:</p>\n<p><img src=\"https://www.rapidspike.com/wp-content/uploads/2019/07/aws-iam-create-role.png\" alt=\"img\"></p>\n</li>\n<li><p>Search for the</p>\n<p>CloudWatchAgentServerPolicy</p>\n<p>policy, check the checkbox and click</p>\n<p>Next: Tags</p>\n<p>:</p>\n<p><img src=\"https://www.rapidspike.com/wp-content/uploads/2019/07/aws-aim-attach-permissions-policies.png\" alt=\"img\"></p>\n</li>\n<li><p>Add tags if required (I left them blank). Click <strong>Next: Review</strong>.</p>\n</li>\n<li><p>Enter a Role name (e.g. <em>CloudWatchAgentServerRole</em>). Then click <strong>Create role</strong>.</p>\n</li>\n</ol>\n<h2 id=\"Attach-the-IAM-Role\"><a href=\"#Attach-the-IAM-Role\" class=\"headerlink\" title=\"Attach the IAM Role\"></a>Attach the IAM Role</h2><p>To attach the IAM Role to the EC2 instance, you can either do it through the AWS console or via the AWS Command Line Interface (CLI):</p>\n<h3 id=\"1-Using-the-AWS-Console\"><a href=\"#1-Using-the-AWS-Console\" class=\"headerlink\" title=\"1. Using the AWS Console\"></a>1. Using the AWS Console</h3><p>Go to the <a href=\"https://console.aws.amazon.com/ec2/\">EC2 Dashboard</a>, select <strong>Instances</strong> from the menu and check the checkbox next to the EC2 instance you want to stream the logs from. To attach the IAM Role, click the <strong>Actions</strong> dropdown and select <strong>Instance Settings</strong> &gt; <strong>Attach&#x2F;Replace IAM Role</strong>:</p>\n<p><img src=\"https://www.rapidspike.com/wp-content/uploads/2019/07/ec2-instances.png\" alt=\"Go to the EC2 Dashboard, select Instances, Instance Settings, Attach/Replace IAM Role.\"></p>\n<p>Search for and select the IAM role created above (e.g. <em>CloudWatchAgentServerRole</em>), then click <strong>Apply</strong> to attach the IAM role:</p>\n<p><img src=\"https://www.rapidspike.com/wp-content/uploads/2019/07/ec2-instances-attach-replace-iam-role.png\" alt=\"Attach/Replace IAM Role\"></p>\n<h3 id=\"2-Using-the-AWS-CLI\"><a href=\"#2-Using-the-AWS-CLI\" class=\"headerlink\" title=\"2. Using the AWS CLI\"></a>2. Using the AWS CLI</h3><p>This command was <a href=\"https://aws.amazon.com/blogs/security/new-attach-an-aws-iam-role-to-an-existing-amazon-ec2-instance-by-using-the-aws-cli/\">added to the AWS CLI in version 1.11.46</a>, so make sure you have the correct version (you can check the version with <code>aws --version</code>).</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ aws ec2 associate-iam-instance-profile --instance-id YourInstanceId --iam-instance-profile Name=CloudWatchAgentServerRole</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Install-CloudWatch-Agent\"><a href=\"#Install-CloudWatch-Agent\" class=\"headerlink\" title=\"Install CloudWatch Agent\"></a>Install CloudWatch Agent</h2><p>Now everything is in place, connect to the EC2 instance you want to log data from and run through the following few commands. The first is to download the CloudWatch Agent from S3 (the following is for AMD64 Ubuntu, if you want a download for Centos, Debian, etc, see a full list <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/install-CloudWatch-Agent-commandline-fleet.html\">here</a>):</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ wget https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb</span><br></pre></td></tr></table></figure>\n\n<p>Install the Agent with:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo dpkg -i -E ./amazon-cloudwatch-agent.deb</span><br></pre></td></tr></table></figure>\n\n<p>Now it’s installed it needs to be configured before it can be started. There are two ways to do this, using the wizard which will ask you a series of questions and generate a config file for you, or you can manually add a config file. As we’re only interested in logging one file to CloudWatch and it’s the same on each EC2 instance, it’s easy to manually add a config file:</p>\n<h3 id=\"1-Manually-create-config-json\"><a href=\"#1-Manually-create-config-json\" class=\"headerlink\" title=\"1. Manually create config.json\"></a>1. Manually create config.json</h3><p>The Log Agent uses a config file located at <code>/opt/aws/amazon-cloudwatch-agent/bin/config.json</code>. Use your favourite editor (e.g. vim) to create and edit a file with the following content, e.g.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim /opt/aws/amazon-cloudwatch-agent/bin/config.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">     &quot;agent&quot;: &#123;</span><br><span class=\"line\">         &quot;run_as_user&quot;: &quot;root&quot;</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     &quot;logs&quot;: &#123;</span><br><span class=\"line\">         &quot;logs_collected&quot;: &#123;</span><br><span class=\"line\">             &quot;files&quot;: &#123;</span><br><span class=\"line\">                 &quot;collect_list&quot;: [</span><br><span class=\"line\">                     &#123;</span><br><span class=\"line\">                         &quot;file_path&quot;: &quot;/var/log/apache2/error.log&quot;,</span><br><span class=\"line\">                         &quot;log_group_name&quot;: &quot;apache-error-log&quot;,</span><br><span class=\"line\">                         &quot;log_stream_name&quot;: &quot;&#123;instance_id&#125;&quot;</span><br><span class=\"line\">                     &#125;</span><br><span class=\"line\">                 ]</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>The most important part of the config file is <code>file_path</code>. This is the path to the log file on the server that you want to collect data from. <code>/var/log/apache2/error.log</code> is the default error log for Apache on Ubuntu. The <code>log_group_name</code> and <code>log_stream_name</code> options are just used for naming the Log Group and Log Streams respectively in CloudWatch. I’d recommend keeping <code>&#123;instance_id&#125;</code> for the <code>log_stream_name</code> as this helps identify which EC2 instance sent the log data.</p>\n<h3 id=\"2-Wizard\"><a href=\"#2-Wizard\" class=\"headerlink\" title=\"2. Wizard\"></a>2. Wizard</h3><p>To start the wizard run:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-config-wizard</span><br></pre></td></tr></table></figure>\n\n<p>You’ll be asked a series of questions. The Log Agent can be used to collect system-level metrics, so you will be asked about them. But you can ignore those questions as they’re not related to collecting logs. If you do use the wizard, you can always take the config file that’s generated and then manually add that (following the step above) to any additional instances.</p>\n<h2 id=\"Start-the-Agent\"><a href=\"#Start-the-Agent\" class=\"headerlink\" title=\"Start the Agent\"></a>Start the Agent</h2><p>Run the following command to run the agent. The CloudWatch agent is integrated with systemd so it will start automatically after a reboot:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/bin/config.json -s</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"View-Logs\"><a href=\"#View-Logs\" class=\"headerlink\" title=\"View Logs\"></a>View Logs</h2><p>Once the log file you are watching has data written to it, you’ll be able to find it in CloudWatch. Go to the <a href=\"https://console.aws.amazon.com/cloudwatch/\">CloudWatch Overview</a> and select <strong>Logs</strong> from the menu. You should see the label for the Log Group you used in the config (e.g. <em>apache-error-log</em>).</p>\n<p><img src=\"https://www.rapidspike.com/wp-content/uploads/2019/07/cloudwatch-logs.png\" alt=\"CloudWatch Overview Log Group\"></p>\n<p>Click on the log group name to see the log streams. Each log stream uses the EC2 instance ID, so you know which EC2 instance logged the data:</p>\n<p><img src=\"https://www.rapidspike.com/wp-content/uploads/2019/07/cloudwatch-log-group-1024x544.png\" alt=\"img\"></p>\n<p>To search the logs, click the <strong>Search Log Group</strong> button. In the filter text box, enter a search term to search <em>all</em> your log files in one go:</p>\n<p><img src=\"https://www.rapidspike.com/wp-content/uploads/2019/07/cloudwatch-search-log-group-1024x544.png\" alt=\"img\"></p>\n","categories":["skills"],"tags":["aws","cloudwatch","alarm","backup"]},{"title":"Docker upgrade issue","url":"/2022/11/25/Docker-upgrade-issue/","content":"<h1 id=\"Why\"><a href=\"#Why\" class=\"headerlink\" title=\"Why\"></a>Why</h1><p>We have a server running docker version <code>17.06</code>，one day there was a issue：<a href=\"https://github.com/docker/for-linux/issues/1\">issue</a></p>\n<span id=\"more\"></span>\n<p>So yesterday we started upgrading Docker from <code>17.06</code> to <code>20.10</code></p>\n<p>Then came the disaster that lasted for more than a day😂😂</p>\n<h1 id=\"Issue\"><a href=\"#Issue\" class=\"headerlink\" title=\"Issue\"></a>Issue</h1><p>After the upgrade, there have error when start docker container:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker: Error response from daemon: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container </span><br></pre></td></tr></table></figure>\n\n<p>We tried restarting docker and restarting the server, neither worked.</p>\n<p>But we start docker with debug is work, then we found all container network has issue . A container under the same network cannot link to another container through the container name, and the ip can be pinged, but the port is blocked.</p>\n<p>We created a httpserver on that server(Docker 20.10.21 )</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -p 8000:8000 -it python:3.7-slim python3 -m http.server --bind 0.0.0.0</span><br></pre></td></tr></table></figure>\n\n<p>Then we run <code>curl 127.0.0.1:8000</code> on monitor server , got</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl: (56) Recv failure: Connection reset by peer</span><br></pre></td></tr></table></figure>\n\n<p>But I tested it on other server (Docker 19.03.11) server and got</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;</span><br><span class=\"line\">&lt;title&gt;Directory listing for /&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;h1&gt;Directory listing for /&lt;/h1&gt;</span><br><span class=\"line\">&lt;hr&gt;</span><br><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">&lt;li&gt;&lt;a href=&quot;.ansible/&quot;&gt;.ansible/&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">&lt;li&gt;&lt;a href=&quot;.ansible_galaxy&quot;&gt;.ansible_galaxy&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>And we also tested in my local(Docker 20.10.21), Same as on kibana.</p>\n<h1 id=\"Resloved\"><a href=\"#Resloved\" class=\"headerlink\" title=\"Resloved\"></a>Resloved</h1><p>We found a same <a href=\"https://stackoverflow.com/questions/43153503/docker-on-centos-7-2-kernelunregister-netdevice-waiting-for-lo-to-become-free\">issue</a></p>\n<p>And upgraded the kernel form <code>3.10.0-514.26.2.el7.x86_64</code> to <code>3.10.0-1160.80.1.el7.x86_64</code> and rebooted server .<br>Not sure what was causing the problem, </p>\n<p>now the newly created container is also normal.</p>\n","categories":["skills"],"tags":["skills","docker"]},{"title":"疫情的三年","url":"/2022/11/29/%E7%96%AB%E6%83%85%E7%9A%84%E4%B8%89%E5%B9%B4/","content":"<p>新冠已经持续三年了，不清楚还需要多久能持续。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"2019\"><a href=\"#2019\" class=\"headerlink\" title=\"2019\"></a>2019</h1><p>清晰的记得，19 年底，过年准备回家前一周，开始有疫情的新闻出来。</p>\n<p>回去前几天，周边所以的药店和超市都没有口罩卖了，同事花大价钱（15 元&#x2F;个）买了几个 N95，我因为价格太贵同事也觉得没有那么严重，就直接没戴口罩回家了。</p>\n<p>当时乘坐公共交通也没有必须带口罩的规定。</p>\n<p>那年过年是工作以后在家待的最长的时间，我的女儿也是在那段封控期间出生的。</p>\n<h1 id=\"2020\"><a href=\"#2020\" class=\"headerlink\" title=\"2020\"></a>2020</h1><p>对于 2020 年的疫情没有那么多的感受，只是每天上班需要测体温，当时还没有核酸检测的概念。</p>\n<p>记忆比较深的时，夏天公司由于疫情原因不能开中央空调，所以那年夏天都是靠着风扇在办公室度过的。</p>\n<p>同时，20 年下半年换了一份工作，离开了毕业后的第一家公司。</p>\n<h1 id=\"2021\"><a href=\"#2021\" class=\"headerlink\" title=\"2021\"></a>2021</h1><p>2021 年记忆最深的是全国到处都在要你打疫苗，经常在上海的路边看到打疫苗送购物券这种宣传。</p>\n<p>也见过一些地方基层拿着鸡毛当令箭。</p>\n<h1 id=\"2022\"><a href=\"#2022\" class=\"headerlink\" title=\"2022\"></a>2022</h1><h2 id=\"上半年\"><a href=\"#上半年\" class=\"headerlink\" title=\"上半年\"></a>上半年</h2><p>2022 年春节刚过没多久，上海开始陆陆续续出现疫情，接着公司就开始宣布居家办公。</p>\n<p>3 月底的时候，因为老婆还需要去公司上班，于是就还待在上海，但是万万没想到，这一待就是三个月。</p>\n<p>上海宣布了封城，被封的几个月，生活上除了每天的核酸和不能出门以外，没有太大的影响。生活用品也还是能买到，只是价格贵了点。居委会也发了很多批物资。</p>\n<p>但是，这是我在上海持续待的时间最长的一次，第一次这么长时间没有回家看小孩。</p>\n<p>封城期间也换了一份工作，也就是现在的公司。</p>\n<p>在 5 月底的时候，上海的高铁开始慢慢通了，经历了几天的抢票终于抢到了回家的票，于是联系了上海这边的居委、市长热线、交警部门和老家的防疫部门，经历重重困难才被允许离沪返乡，第一次觉得回家那么难。</p>\n<p>因为没有公共交通，私家车天价，我们是骑自行车去车站的，路上看见了太多太多的人和事。</p>\n<h2 id=\"下半年\"><a href=\"#下半年\" class=\"headerlink\" title=\"下半年\"></a>下半年</h2><p>七月底又返沪继续工作了，一直到现在，期间基本每隔一天都在做核酸。</p>\n<p>现在接近年底，疫情又开始了，网上的论调从前两年的支持防疫开始慢慢的转变成资本家操纵防疫了，今天还和老婆商量着今年早点回家，防止又被封。</p>\n<h1 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h1><p>三年时间真的已经很长了，我的女儿出生时开始出现疫情，现在都快上幼儿园了。</p>\n<p>有太多的人的生活和工作被疫情影响，真心希望疫情快点结束，生活回归正常。</p>\n","categories":["life"],"tags":["生活","疫情","工作"]},{"title":"疫情结束啦！","url":"/2022/12/15/%E7%96%AB%E6%83%85%E7%BB%93%E6%9D%9F%E5%95%A6%EF%BC%81/","content":"<p>2022年的最后一个月，疫情也到尾声了。</p>\n<span id=\"more\"></span>\n\n<p>伴随着月初的各项疫情的措施接触，朋友圈和身边感染的人也开始变多了。<br>好消息是基本上都在一周左右都恢复了。</p>\n","categories":["life"],"tags":["生活","疫情","工作"]},{"title":"New Year","url":"/2023/01/03/New-Year/","content":"<p>新的一年，这几天发生了太多事情。</p>\n<span id=\"more\"></span>\n<p>亲人去世，老人住院，家人相继感染新冠。</p>\n<p>知道感染新冠是必然的事情，但是突然所有的事情一起来了，真的有点接受不了。</p>\n<p>希望2023年，新的一年能彻底告别新冠！</p>\n","categories":["life"],"tags":["疫情","2023"]}]